name: Build Data Debug Test APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code (integer)'
        required: true
        default: '106'
        type: string
  push:
    paths:
      - 'DATA_DEBUG_TEST_*.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create Android project structure
        run: |
          mkdir -p android-app/src/main/java/com/miletrackerpro/app
          mkdir -p android-app/src/main/res/layout
          mkdir -p android-app/src/main/res/values

      - name: Create AndroidManifest.xml
        run: |
          cat > android-app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.miletrackerpro.app">
              
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              
              <application
                  android:allowBackup="true"
                  android:icon="@android:drawable/ic_menu_mylocation"
                  android:label="Data Debug Test"
                  android:theme="@android:style/Theme.Material.Light">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

      - name: Create build.gradle (Module)
        run: |
          cat > android-app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 35

              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 35
                  versionCode ${{ github.event.inputs.version_code }}
                  versionName "1.0.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.10.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.code.gson:gson:2.10.1'
          }
          EOF

      - name: Create settings.gradle
        run: |
          cat > android-app/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerDataDebug'
          EOF

      - name: Create build.gradle (Project)
        working-directory: android-app
        run: |
          cat > build.gradle << 'EOF'
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.0'
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create gradle.properties
        run: |
          cat > android-app/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048M
          EOF

      - name: Create Data Debug MainActivity.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;

          import android.app.Activity;
          import android.os.Bundle;
          import android.os.AsyncTask;
          import android.util.Log;
          import android.widget.*;
          import android.view.View;
          import android.graphics.Color;
          import java.net.HttpURLConnection;
          import java.net.URL;
          import java.io.InputStream;
          import java.io.BufferedReader;
          import java.io.InputStreamReader;
          import com.google.gson.Gson;
          import com.google.gson.JsonArray;
          import com.google.gson.JsonObject;

          public class MainActivity extends Activity {
              private static final String TAG = "DataDebug";
              private static final String API_BASE_URL = "https://mileage-tracker-codenurse.replit.app";
              
              private Button downloadButton;
              private TextView statusText;
              private ScrollView scrollView;
              private TextView dataText;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(20, 20, 20, 20);
                  mainLayout.setBackgroundColor(Color.parseColor("#F5F5F5"));

                  // Header
                  TextView headerText = new TextView(this);
                  headerText.setText("Data Debug Test");
                  headerText.setTextSize(24);
                  headerText.setTextColor(Color.parseColor("#2E7D32"));
                  headerText.setPadding(0, 0, 0, 20);
                  mainLayout.addView(headerText);

                  // Download Button
                  downloadButton = new Button(this);
                  downloadButton.setText("Download Trip Data");
                  downloadButton.setTextSize(16);
                  downloadButton.setBackgroundColor(Color.parseColor("#4CAF50"));
                  downloadButton.setTextColor(Color.WHITE);
                  downloadButton.setPadding(20, 20, 20, 20);
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  buttonParams.setMargins(0, 0, 0, 20);
                  downloadButton.setLayoutParams(buttonParams);
                  downloadButton.setOnClickListener(new View.OnClickListener() {
                      @Override
                      public void onClick(View v) {
                          downloadData();
                      }
                  });
                  mainLayout.addView(downloadButton);

                  // Status Text
                  statusText = new TextView(this);
                  statusText.setText("Ready to download data");
                  statusText.setTextSize(14);
                  statusText.setTextColor(Color.parseColor("#666666"));
                  statusText.setPadding(15, 15, 15, 15);
                  statusText.setBackgroundColor(Color.parseColor("#E8F5E8"));
                  mainLayout.addView(statusText);

                  // Scrollable Data Display
                  scrollView = new ScrollView(this);
                  LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      0,
                      1.0f
                  );
                  scrollParams.setMargins(0, 20, 0, 0);
                  scrollView.setLayoutParams(scrollParams);
                  
                  dataText = new TextView(this);
                  dataText.setText("No data downloaded yet");
                  dataText.setTextSize(12);
                  dataText.setTextColor(Color.parseColor("#333333"));
                  dataText.setPadding(15, 15, 15, 15);
                  dataText.setBackgroundColor(Color.WHITE);
                  scrollView.addView(dataText);
                  
                  mainLayout.addView(scrollView);

                  setContentView(mainLayout);
              }

              private void downloadData() {
                  statusText.setText("Downloading data...");
                  statusText.setTextColor(Color.parseColor("#FF9800"));
                  dataText.setText("Connecting to API...");
                  downloadButton.setEnabled(false);

                  new DataDownloadTask().execute();
              }

              private class DataDownloadTask extends AsyncTask<Void, Void, String> {
                  @Override
                  protected String doInBackground(Void... params) {
                      Log.d(TAG, "Starting data download...");
                      
                      try {
                          String response = makeApiCall("/api/trips");
                          Log.d(TAG, "Raw API response: " + response);
                          
                          return response;
                      } catch (Exception e) {
                          Log.e(TAG, "Download error: " + e.getMessage());
                          return "ERROR: " + e.getMessage();
                      }
                  }

                  @Override
                  protected void onPostExecute(String result) {
                      downloadButton.setEnabled(true);
                      
                      if (result.startsWith("ERROR:")) {
                          statusText.setText("Download failed");
                          statusText.setTextColor(Color.parseColor("#D32F2F"));
                          dataText.setText("Error Details:\n" + result.substring(7));
                          dataText.setTextColor(Color.parseColor("#D32F2F"));
                          return;
                      }

                      try {
                          analyzeData(result);
                      } catch (Exception e) {
                          Log.e(TAG, "Analysis error: " + e.getMessage());
                          statusText.setText("Data analysis failed");
                          statusText.setTextColor(Color.parseColor("#D32F2F"));
                          dataText.setText("Analysis Error: " + e.getMessage() + "\n\nRaw Data:\n" + result);
                          dataText.setTextColor(Color.parseColor("#D32F2F"));
                      }
                  }
              }

              private void analyzeData(String rawData) {
                  StringBuilder analysis = new StringBuilder();
                  analysis.append("=== RAW API RESPONSE ===\n");
                  analysis.append("Length: ").append(rawData.length()).append(" characters\n");
                  analysis.append("First 200 chars: ").append(rawData.substring(0, Math.min(200, rawData.length()))).append("\n\n");

                  try {
                      Gson gson = new Gson();
                      
                      if (rawData.trim().startsWith("[")) {
                          // Parse as JSON array
                          JsonArray trips = gson.fromJson(rawData, JsonArray.class);
                          analysis.append("=== PARSED AS JSON ARRAY ===\n");
                          analysis.append("Total trips found: ").append(trips.size()).append("\n\n");
                          
                          statusText.setText("Found " + trips.size() + " trips");
                          statusText.setTextColor(Color.parseColor("#4CAF50"));
                          
                          // Analyze first few trips
                          for (int i = 0; i < Math.min(3, trips.size()); i++) {
                              JsonObject trip = trips.get(i).getAsJsonObject();
                              analysis.append("--- Trip ").append(i + 1).append(" ---\n");
                              
                              // Check each field
                              String[] fields = {"id", "start_location", "end_location", "distance", 
                                               "start_time", "end_time", "auto_detected", "user_id", 
                                               "device_id", "category", "client_name", "notes"};
                              
                              for (String field : fields) {
                                  if (trip.has(field)) {
                                      String value = trip.get(field).getAsString();
                                      analysis.append(field).append(": ");
                                      if (value.length() > 50) {
                                          analysis.append(value.substring(0, 47)).append("...");
                                      } else {
                                          analysis.append(value);
                                      }
                                      analysis.append("\n");
                                  } else {
                                      analysis.append(field).append(": [MISSING]\n");
                                  }
                              }
                              analysis.append("\n");
                          }
                          
                          // Check data quality issues
                          analysis.append("=== DATA QUALITY ANALYSIS ===\n");
                          int encryptedCount = 0;
                          int missingLocationCount = 0;
                          int timestampIssues = 0;
                          
                          for (int i = 0; i < trips.size(); i++) {
                              JsonObject trip = trips.get(i).getAsJsonObject();
                              
                              // Check for encrypted data
                              if (trip.has("start_location")) {
                                  String startLoc = trip.get("start_location").getAsString();
                                  if (startLoc.contains(":") && startLoc.length() > 50) {
                                      encryptedCount++;
                                  }
                                  if (startLoc.equals("0, 0") || startLoc.trim().isEmpty()) {
                                      missingLocationCount++;
                                  }
                              }
                              
                              // Check timestamps
                              if (trip.has("start_time")) {
                                  String timestamp = trip.get("start_time").getAsString();
                                  if (!timestamp.matches("\\d{4}-\\d{2}-\\d{2}.*")) {
                                      timestampIssues++;
                                  }
                              }
                          }
                          
                          analysis.append("Encrypted locations: ").append(encryptedCount).append("/").append(trips.size()).append("\n");
                          analysis.append("Missing locations: ").append(missingLocationCount).append("/").append(trips.size()).append("\n");
                          analysis.append("Timestamp issues: ").append(timestampIssues).append("/").append(trips.size()).append("\n");
                          
                      } else if (rawData.trim().startsWith("{")) {
                          // Parse as single JSON object
                          JsonObject response = gson.fromJson(rawData, JsonObject.class);
                          analysis.append("=== PARSED AS JSON OBJECT ===\n");
                          analysis.append("Keys: ").append(response.keySet().toString()).append("\n");
                          
                          if (response.has("error")) {
                              statusText.setText("API returned error");
                              statusText.setTextColor(Color.parseColor("#D32F2F"));
                              analysis.append("Error: ").append(response.get("error").getAsString()).append("\n");
                          }
                      } else {
                          analysis.append("=== NOT VALID JSON ===\n");
                          analysis.append("Response appears to be plain text or invalid JSON\n");
                          statusText.setText("Invalid response format");
                          statusText.setTextColor(Color.parseColor("#D32F2F"));
                      }
                      
                  } catch (Exception e) {
                      analysis.append("=== JSON PARSING FAILED ===\n");
                      analysis.append("Error: ").append(e.getMessage()).append("\n");
                      statusText.setText("JSON parsing failed");
                      statusText.setTextColor(Color.parseColor("#D32F2F"));
                  }

                  dataText.setText(analysis.toString());
                  dataText.setTextColor(Color.parseColor("#333333"));
              }

              private String makeApiCall(String endpoint) {
                  Log.d(TAG, "Connecting to: " + API_BASE_URL + endpoint);
                  
                  try {
                      URL url = new URL(API_BASE_URL + endpoint);
                      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                      connection.setRequestMethod("GET");
                      connection.setRequestProperty("Content-Type", "application/json");
                      connection.setRequestProperty("Accept", "application/json");
                      
                      // Add authentication headers
                      connection.setRequestProperty("Authorization", "Bearer demo-admin-token");
                      connection.setRequestProperty("X-User-Email", "pcates@catesconsultinggroup.com");
                      
                      connection.setConnectTimeout(15000);
                      connection.setReadTimeout(15000);
                      
                      Log.d(TAG, "Sending request...");
                      
                      int responseCode = connection.getResponseCode();
                      Log.d(TAG, "Response code: " + responseCode);
                      
                      // Read response
                      InputStream inputStream = (responseCode >= 200 && responseCode < 300) ? 
                          connection.getInputStream() : connection.getErrorStream();
                      
                      StringBuilder response = new StringBuilder();
                      try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
                          String line;
                          while ((line = reader.readLine()) != null) {
                              response.append(line);
                          }
                      }
                      
                      String responseText = response.toString();
                      Log.d(TAG, "Response received, length: " + responseText.length());
                      
                      return responseText;
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Connection error: " + e.getMessage());
                      throw new RuntimeException("Network error: " + e.getMessage());
                  }
              }
          }
          EOF

      - name: Create proguard-rules.pro
        run: |
          cat > android-app/proguard-rules.pro << 'EOF'
          # Add project specific ProGuard rules here
          -keep class com.google.gson.** { *; }
          -keepattributes Signature
          -keepattributes *Annotation*
          EOF

      - name: Set up Gradle wrapper
        working-directory: android-app
        run: |
          # Install gradle first
          wget -q https://services.gradle.org/distributions/gradle-8.1.1-bin.zip
          unzip -q gradle-8.1.1-bin.zip
          export PATH=$PWD/gradle-8.1.1/bin:$PATH
          
          # Create wrapper
          gradle wrapper --gradle-version 8.1.1
          chmod +x gradlew
          
          # Verify wrapper works
          ./gradlew --version

      - name: Build APK
        working-directory: android-app
        run: |
          ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Sign APK
        working-directory: android-app
        run: |
          # Generate keystore
          keytool -genkey -v -keystore release-key.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias release-key -storepass android -keypass android -dname "CN=Data Debug Test, OU=Development, O=MileTracker, L=City, S=State, C=US"
          
          # Sign APK
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore -storepass android -keypass android build/outputs/apk/release/app-release-unsigned.apk release-key
          
          # Align APK
          zipalign -v 4 build/outputs/apk/release/app-release-unsigned.apk build/outputs/apk/release/app-release-signed.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Data-Debug-Test-APK
          path: android-app/build/outputs/apk/release/app-release-signed.apk
