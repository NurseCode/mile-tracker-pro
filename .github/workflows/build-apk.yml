name: FIXED UI CLEAN - Bottom Tabs, Less Red, Better Layout

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean and create Android project structure
        run: |
          rm -rf android
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/utils
          mkdir -p android/app/src/main/res/layout
          mkdir -p android/app/src/main/res/values
          mkdir -p android/gradle/wrapper

      - name: Create Gradle wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create Gradle wrapper JAR
        run: |
          mkdir -p android/gradle/wrapper
          curl -L https://github.com/gradle/gradle/raw/v8.6.0/gradle/wrapper/gradle-wrapper.jar -o android/gradle/wrapper/gradle-wrapper.jar

      - name: Create gradlew script
        run: |
          cat > android/gradlew << 'EOF'
          #!/bin/sh

          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`

          DEFAULT_JVM_OPTS="-Xmx1024m -Xms256m"

          die () {
              echo
              echo "$*"
              echo
              exit 1
          }

          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
          fi

          SAVED="`pwd`"
          cd "`dirname \"$0\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null

          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

          exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF

          chmod +x android/gradlew

      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerPro'
          include ':app'
          EOF

      - name: Create gradle.properties
        run: |
          cat > android/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.enableR8.fullMode=false
          EOF

      - name: Create root build.gradle - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 24
                  compileSdkVersion = 34
                  targetSdkVersion = 34
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.1.4")
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create app/build.gradle - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 34

              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 34
                  versionCode 27
                  versionName "4.7-clean-ui"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      debuggable false
                      signingConfig signingConfigs.debug
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              packagingOptions {
                  pickFirst '**/kotlin-stdlib-*.jar'
                  pickFirst '**/kotlin-stdlib-jdk*.jar'
                  exclude 'META-INF/kotlin-stdlib.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk7.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk8.kotlin_module'
              }
          }

          configurations.all {
              resolutionStrategy {
                  force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.android.gms:play-services-location:21.0.1'

              // Force specific Kotlin version to avoid conflicts
              implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
          }
          EOF

      - name: Create SAFE AndroidManifest.xml - INTERNET ALLOWED BUT OPTIONAL
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">

              <!-- Location permissions -->
              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />

              <!-- Background service permissions -->
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />

              <!-- OPTIONAL network access for API testing -->
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="MileTracker Pro"
                  android:theme="@style/AppTheme"
                  android:networkSecurityConfig="@xml/network_security_config"
                  android:usesCleartextTraffic="true">

                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:screenOrientation="portrait">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <!-- Auto Detection Service -->
                  <service
                      android:name=".services.AutoDetectionService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />

                  <!-- Manual Trip Service -->
                  <service
                      android:name=".services.ManualTripService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />

              </application>
          </manifest>
          EOF

      - name: Create OPTIONAL Network Security Config
        run: |
          mkdir -p android/app/src/main/res/xml
          cat > android/app/src/main/res/xml/network_security_config.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <network-security-config>
              <domain-config cleartextTrafficPermitted="true">
                  <domain includeSubdomains="true">18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev</domain>
                  <domain includeSubdomains="true">replit.dev</domain>
                  <domain includeSubdomains="true">localhost</domain>
                  <domain includeSubdomains="true">10.0.2.2</domain>
              </domain-config>
              <base-config cleartextTrafficPermitted="false">
                  <trust-anchors>
                      <certificates src="system"/>
                  </trust-anchors>
              </base-config>
          </network-security-config>
          EOF

      - name: Create app resources with RED CAR ICON + CLEAN THEME
        run: |
          # Create styles.xml - MUTED THEME (YOUR PREFERENCE)
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667eea</item>
                  <item name="colorPrimaryDark">#5a6fd8</item>
                  <item name="colorAccent">#667eea</item>
              </style>
          </resources>
          EOF

          # Create strings.xml
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
              <string name="auto_detection_notification">Auto trip detection active</string>
              <string name="trip_in_progress_notification">Trip in progress</string>
              <string name="manual_trip_notification">Manual trip recording</string>
          </resources>
          EOF

          # Create colors.xml - MUTED COLORS (YOUR PREFERENCE)
          cat > android/app/src/main/res/values/colors.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <color name="primary">#667eea</color>
              <color name="primary_dark">#5a6fd8</color>
              <color name="accent">#667eea</color>
              <color name="white">#FFFFFF</color>
              <color name="black">#000000</color>
              <color name="success">#28a745</color>
              <color name="danger">#dc3545</color>
              <color name="warning">#ffc107</color>
              <color name="tab_active">#667eea</color>
              <color name="tab_inactive">#9CA3AF</color>
              <color name="background">#f5f5f5</color>
              <color name="card_background">#ffffff</color>
              <color name="text_primary">#495057</color>
              <color name="text_secondary">#6C757D</color>
          </resources>
          EOF

      - name: Create RED CAR ICON - YOUR PREFERRED VERSION
        run: |
          mkdir -p android/app/src/main/res/drawable
          cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="24dp"
              android:height="24dp"
              android:viewportWidth="24.0"
              android:viewportHeight="24.0">
              <path
                  android:fillColor="#dc3545"
                  android:pathData="M18.92,6.01C18.72,5.42 18.16,5 17.5,5h-11C5.84,5 5.28,5.42 5.08,6.01L3,12v8c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-1h12v1c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-8L18.92,6.01zM6.5,16C5.67,16 5,15.33 5,14.5S5.67,13 6.5,13S8,13.67 8,14.5S7.33,16 6.5,16zM17.5,16c-0.83,0 -1.5,-0.67 -1.5,-1.5s0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5S18.33,16 17.5,16zM5,11l1.5,-4.5h11L19,11H5z"/>
          </vector>
          EOF

      - name: Create AddressLookup utility - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/utils/AddressLookup.java << 'EOF'
          package com.miletrackerpro.app.utils;

          import android.content.Context;
          import android.location.Address;
          import android.location.Geocoder;
          import android.os.Handler;
          import android.os.Looper;
          import java.io.IOException;
          import java.util.List;
          import java.util.Locale;

          public class AddressLookup {
              private Context context;
              private Geocoder geocoder;

              public interface AddressCallback {
                  void onAddressFound(String address);
                  void onAddressError(String error);
              }

              public AddressLookup(Context context) {
                  this.context = context;
                  this.geocoder = new Geocoder(context, Locale.getDefault());
              }

              public void getAddressFromLocation(double latitude, double longitude, AddressCallback callback) {
                  new Thread(() -> {
                      try {
                          List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1);
                          
                          Handler mainHandler = new Handler(Looper.getMainLooper());
                          
                          if (addresses != null && !addresses.isEmpty()) {
                              Address address = addresses.get(0);
                              String addressText = formatAddress(address);
                              
                              mainHandler.post(() -> callback.onAddressFound(addressText));
                          } else {
                              mainHandler.post(() -> callback.onAddressError("Address not found"));
                          }
                      } catch (IOException e) {
                          Handler mainHandler = new Handler(Looper.getMainLooper());
                          mainHandler.post(() -> callback.onAddressError("Geocoder error: " + e.getMessage()));
                      }
                  }).start();
              }

              private String formatAddress(Address address) {
                  StringBuilder sb = new StringBuilder();
                  
                  if (address.getSubThoroughfare() != null) {
                      sb.append(address.getSubThoroughfare()).append(" ");
                  }
                  if (address.getThoroughfare() != null) {
                      sb.append(address.getThoroughfare()).append(", ");
                  }
                  if (address.getLocality() != null) {
                      sb.append(address.getLocality()).append(", ");
                  }
                  if (address.getAdminArea() != null) {
                      sb.append(address.getAdminArea());
                  }
                  
                  String result = sb.toString().trim();
                  if (result.endsWith(",")) {
                      result = result.substring(0, result.length() - 1);
                  }
                  
                  return result.isEmpty() ? String.format("%.4f, %.4f", address.getLatitude(), address.getLongitude()) : result;
              }
          }
          EOF

      - name: Create Trip storage class - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/storage/Trip.java << 'EOF'
          package com.miletrackerpro.app.storage;

          import java.text.SimpleDateFormat;
          import java.util.Date;
          import java.util.Locale;

          public class Trip {
              private long id;
              private String startAddress;
              private String endAddress;
              private double startLatitude;
              private double startLongitude;
              private double endLatitude;
              private double endLongitude;
              private double distance;
              private long duration;
              private String category;
              private long startTime;
              private long endTime;
              private boolean autoDetected;

              public Trip() {
                  this.category = "Personal"; // DEFAULT TO PERSONAL
                  this.autoDetected = false;
              }

              // Getters and setters
              public long getId() { return id; }
              public void setId(long id) { this.id = id; }

              public String getStartAddress() { return startAddress; }
              public void setStartAddress(String startAddress) { this.startAddress = startAddress; }

              public String getEndAddress() { return endAddress; }
              public void setEndAddress(String endAddress) { this.endAddress = endAddress; }

              public double getStartLatitude() { return startLatitude; }
              public void setStartLatitude(double startLatitude) { this.startLatitude = startLatitude; }

              public double getStartLongitude() { return startLongitude; }
              public void setStartLongitude(double startLongitude) { this.startLongitude = startLongitude; }

              public double getEndLatitude() { return endLatitude; }
              public void setEndLatitude(double endLatitude) { this.endLatitude = endLatitude; }

              public double getEndLongitude() { return endLongitude; }
              public void setEndLongitude(double endLongitude) { this.endLongitude = endLongitude; }

              public double getDistance() { return distance; }
              public void setDistance(double distance) { this.distance = distance; }

              public long getDuration() { return duration; }
              public void setDuration(long duration) { this.duration = duration; }

              public String getCategory() { return category; }
              public void setCategory(String category) { this.category = category; }

              public long getStartTime() { return startTime; }
              public void setStartTime(long startTime) { this.startTime = startTime; }

              public long getEndTime() { return endTime; }
              public void setEndTime(long endTime) { this.endTime = endTime; }

              public boolean isAutoDetected() { return autoDetected; }
              public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }

              public String getFormattedDate() {
                  SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, yyyy h:mm a", Locale.getDefault());
                  return dateFormat.format(new Date(startTime));
              }

              public String getFormattedDuration() {
                  long minutes = duration / (1000 * 60);
                  if (minutes < 60) {
                      return minutes + " min";
                  } else {
                      long hours = minutes / 60;
                      long remainingMinutes = minutes % 60;
                      return hours + "h " + remainingMinutes + "m";
                  }
              }
          }
          EOF

      - name: Create TripStorage class - WITH SMART API TOGGLE  
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
          package com.miletrackerpro.app.storage;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.util.Log;
          import org.json.JSONArray;
          import org.json.JSONException;
          import org.json.JSONObject;
          import java.util.ArrayList;
          import java.util.List;

          public class TripStorage {
              private static final String TAG = "TripStorage";
              private static final String PREFS_NAME = "MileTrackerPrefs";
              private static final String TRIPS_KEY = "trips";
              private static final String AUTO_DETECTION_KEY = "auto_detection_enabled";
              private static final String CURRENT_TRIP_KEY = "current_trip";
              private static final String API_SYNC_ENABLED_KEY = "api_sync_enabled";

              private SharedPreferences prefs;
              private Context context;

              public TripStorage(Context context) {
                  this.context = context;
                  this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
              }

              public void saveTrip(Trip trip) {
                  try {
                      List<Trip> trips = getAllTrips();
                      trip.setId(System.currentTimeMillis());
                      trips.add(trip);

                      JSONArray jsonArray = new JSONArray();
                      for (Trip t : trips) {
                          JSONObject tripJson = tripToJson(t);
                          jsonArray.put(tripJson);
                      }

                      prefs.edit().putString(TRIPS_KEY, jsonArray.toString()).apply();
                      Log.d(TAG, "Trip saved successfully to local storage");

                  } catch (JSONException e) {
                      Log.e(TAG, "Error saving trip: " + e.getMessage());
                  }
              }

              public List<Trip> getAllTrips() {
                  List<Trip> trips = new ArrayList<>();
                  try {
                      String tripsJson = prefs.getString(TRIPS_KEY, "[]");
                      JSONArray jsonArray = new JSONArray(tripsJson);

                      for (int i = 0; i < jsonArray.length(); i++) {
                          JSONObject tripJson = jsonArray.getJSONObject(i);
                          Trip trip = jsonToTrip(tripJson);
                          trips.add(trip);
                      }

                  } catch (JSONException e) {
                      Log.e(TAG, "Error loading trips: " + e.getMessage());
                  }
                  return trips;
              }

              public void saveCurrentTrip(Trip trip) {
                  try {
                      if (trip == null) {
                          prefs.edit().remove(CURRENT_TRIP_KEY).apply();
                      } else {
                          JSONObject tripJson = tripToJson(trip);
                          prefs.edit().putString(CURRENT_TRIP_KEY, tripJson.toString()).apply();
                      }
                  } catch (JSONException e) {
                      Log.e(TAG, "Error saving current trip: " + e.getMessage());
                  }
              }

              public Trip getCurrentTrip() {
                  try {
                      String tripJson = prefs.getString(CURRENT_TRIP_KEY, null);
                      if (tripJson != null) {
                          JSONObject jsonObject = new JSONObject(tripJson);
                          return jsonToTrip(jsonObject);
                      }
                  } catch (JSONException e) {
                      Log.e(TAG, "Error loading current trip: " + e.getMessage());
                  }
                  return null;
              }

              public void setAutoDetectionEnabled(boolean enabled) {
                  prefs.edit().putBoolean(AUTO_DETECTION_KEY, enabled).apply();
              }

              public boolean isAutoDetectionEnabled() {
                  return prefs.getBoolean(AUTO_DETECTION_KEY, false);
              }

              // NEW: API Sync toggle methods
              public void setApiSyncEnabled(boolean enabled) {
                  prefs.edit().putBoolean(API_SYNC_ENABLED_KEY, enabled).apply();
                  Log.d(TAG, "API sync " + (enabled ? "enabled" : "disabled"));
              }

              public boolean isApiSyncEnabled() {
                  return prefs.getBoolean(API_SYNC_ENABLED_KEY, false); // Default to OFF for safety
              }

              private JSONObject tripToJson(Trip trip) throws JSONException {
                  JSONObject json = new JSONObject();
                  json.put("id", trip.getId());
                  json.put("startAddress", trip.getStartAddress());
                  json.put("endAddress", trip.getEndAddress());
                  json.put("startLatitude", trip.getStartLatitude());
                  json.put("startLongitude", trip.getStartLongitude());
                  json.put("endLatitude", trip.getEndLatitude());
                  json.put("endLongitude", trip.getEndLongitude());
                  json.put("distance", trip.getDistance());
                  json.put("duration", trip.getDuration());
                  json.put("category", trip.getCategory());
                  json.put("startTime", trip.getStartTime());
                  json.put("endTime", trip.getEndTime());
                  json.put("autoDetected", trip.isAutoDetected());
                  return json;
              }

              private Trip jsonToTrip(JSONObject json) throws JSONException {
                  Trip trip = new Trip();
                  trip.setId(json.getLong("id"));
                  trip.setStartAddress(json.optString("startAddress", "Unknown"));
                  trip.setEndAddress(json.optString("endAddress", "Unknown"));
                  trip.setStartLatitude(json.getDouble("startLatitude"));
                  trip.setStartLongitude(json.getDouble("startLongitude"));
                  trip.setEndLatitude(json.getDouble("endLatitude"));
                  trip.setEndLongitude(json.getDouble("endLongitude"));
                  trip.setDistance(json.getDouble("distance"));
                  trip.setDuration(json.getLong("duration"));
                  trip.setCategory(json.optString("category", "Personal"));
                  trip.setStartTime(json.getLong("startTime"));
                  trip.setEndTime(json.getLong("endTime"));
                  trip.setAutoDetected(json.optBoolean("autoDetected", false));
                  return trip;
              }
          }
          EOF

      - name: Create SMART CloudBackupService - ONLY RUNS WHEN ENABLED
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/CloudBackupService.java << 'EOF'
          package com.miletrackerpro.app;

          import android.content.Context;
          import android.os.AsyncTask;
          import android.provider.Settings;
          import android.util.Log;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import org.json.JSONException;
          import org.json.JSONObject;
          import java.io.BufferedReader;
          import java.io.IOException;
          import java.io.InputStreamReader;
          import java.io.OutputStream;
          import java.net.HttpURLConnection;
          import java.net.URL;
          import java.text.SimpleDateFormat;
          import java.util.Date;
          import java.util.Locale;
          import java.util.TimeZone;

          public class CloudBackupService {
              private static final String TAG = "CloudBackupService";
              
              // CONFIRMED WORKING API URL - EXTERNAL ACCESS ALLOWED
              private static final String API_BASE_URL = "https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev/api";
              
              private Context context;
              private String deviceId;
              private TripStorage tripStorage;
              
              public CloudBackupService(Context context) {
                  this.context = context;
                  this.deviceId = generateDeviceId();
                  this.tripStorage = new TripStorage(context);
                  Log.d(TAG, "CloudBackupService initialized with deviceId: " + deviceId);
              }
              
              private String generateDeviceId() {
                  String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                  return "android-" + androidId;
              }
              
              public void backupTrip(Trip trip) {
                  // SMART: Only backup if API sync is enabled
                  if (!tripStorage.isApiSyncEnabled()) {
                      Log.d(TAG, "API sync disabled - skipping backup");
                      return;
                  }
                  
                  Log.d(TAG, "API sync enabled - starting backup");
                  new BackupTripTask().execute(trip);
              }
              
              private class BackupTripTask extends AsyncTask<Trip, Void, Boolean> {
                  @Override
                  protected Boolean doInBackground(Trip... trips) {
                      if (trips.length == 0) return false;
                      
                      Trip trip = trips[0];
                      return sendTripToAPI(trip);
                  }
                  
                  @Override
                  protected void onPostExecute(Boolean success) {
                      if (success) {
                          Log.d(TAG, "Trip backup successful to external API");
                      } else {
                          Log.w(TAG, "Trip backup failed - saved locally only");
                      }
                  }
              }
              
              private boolean sendTripToAPI(Trip trip) {
                  HttpURLConnection connection = null;
                  try {
                      // CREATE API PAYLOAD - MATCH SERVER EXPECTED FORMAT
                      JSONObject tripData = new JSONObject();
                      tripData.put("deviceId", deviceId);
                      tripData.put("startLocation", trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown Location");
                      tripData.put("endLocation", trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown Location");
                      tripData.put("startLatitude", trip.getStartLatitude());
                      tripData.put("startLongitude", trip.getStartLongitude());
                      tripData.put("endLatitude", trip.getEndLatitude());
                      tripData.put("endLongitude", trip.getEndLongitude());
                      tripData.put("distance", trip.getDistance());
                      tripData.put("duration", trip.getDuration());
                      tripData.put("category", trip.getCategory());
                      tripData.put("autoDetected", trip.isAutoDetected());
                      tripData.put("startTime", trip.getStartTime());
                      tripData.put("endTime", trip.getEndTime());
                      tripData.put("timezone", "America/New_York");
                      
                      Log.d(TAG, "Attempting to send trip to API: " + API_BASE_URL + "/trips");
                      Log.d(TAG, "Payload: " + tripData.toString());
                      
                      // MAKE API REQUEST TO CONFIRMED WORKING ENDPOINT
                      URL url = new URL(API_BASE_URL + "/trips");
                      connection = (HttpURLConnection) url.openConnection();
                      connection.setRequestMethod("POST");
                      connection.setRequestProperty("Content-Type", "application/json");
                      connection.setRequestProperty("Accept", "application/json");
                      connection.setRequestProperty("User-Agent", "MileTrackerPro-Android/4.7");
                      connection.setDoOutput(true);
                      connection.setDoInput(true);
                      connection.setConnectTimeout(10000);
                      connection.setReadTimeout(10000);
                      
                      // SEND REQUEST
                      OutputStream os = connection.getOutputStream();
                      os.write(tripData.toString().getBytes("UTF-8"));
                      os.flush();
                      os.close();
                      
                      // CHECK RESPONSE
                      int responseCode = connection.getResponseCode();
                      Log.d(TAG, "API Response Code: " + responseCode);
                      
                      // Read response body for debugging
                      BufferedReader reader;
                      if (responseCode >= 200 && responseCode < 300) {
                          reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                      } else {
                          reader = new BufferedReader(new InputStreamReader(connection.getErrorStream()));
                      }
                      
                      StringBuilder response = new StringBuilder();
                      String line;
                      while ((line = reader.readLine()) != null) {
                          response.append(line);
                      }
                      reader.close();
                      
                      Log.d(TAG, "API Response Body: " + response.toString());
                      
                      if (responseCode == 200 || responseCode == 201) {
                          Log.d(TAG, "API backup successful: " + responseCode);
                          return true;
                      } else {
                          Log.w(TAG, "API backup failed with code: " + responseCode + ", Response: " + response.toString());
                          return false;
                      }
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Network error during backup: " + e.getClass().getSimpleName() + " - " + e.getMessage());
                      e.printStackTrace();
                      return false;
                      
                  } finally {
                      if (connection != null) {
                          connection.disconnect();
                      }
                  }
              }
              
              /**
               * Get device ID for external use
               */
              public String getDeviceId() {
                  return deviceId;
              }
          }
          EOF

      - name: Create ManualTripService - CONDITIONAL API BACKUP
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/services/ManualTripService.java << 'EOF'
          package com.miletrackerpro.app.services;

          import android.Manifest;
          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Context;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.IBinder;
          import android.os.PowerManager;
          import android.util.Log;
          import androidx.core.app.ActivityCompat;
          import androidx.core.app.NotificationCompat;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import com.miletrackerpro.app.utils.AddressLookup;
          import com.miletrackerpro.app.CloudBackupService;

          public class ManualTripService extends Service implements LocationListener {

              private static final String TAG = "ManualTripService";
              private static final String CHANNEL_ID = "MANUAL_TRIP_CHANNEL";
              private static final int NOTIFICATION_ID = 2001;

              private LocationManager locationManager;
              private NotificationManager notificationManager;
              private TripStorage tripStorage;
              private CloudBackupService cloudBackup;
              private PowerManager.WakeLock wakeLock;

              private Trip currentTrip = null;
              private Location tripStartLocation = null;
              private Location lastLocation = null;
              private float totalDistance = 0.0f;

              @Override
              public void onCreate() {
                  super.onCreate();

                  locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                  notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
                  tripStorage = new TripStorage(this);
                  cloudBackup = new CloudBackupService(this);

                  PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
                  wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, 
                      "MileTracker::ManualTripService");

                  createNotificationChannel();

                  Log.d(TAG, "ManualTripService created");
              }

              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  if (intent != null) {
                      String action = intent.getAction();
                      if ("START_MANUAL_TRIP".equals(action)) {
                          startManualTrip();
                      } else if ("STOP_MANUAL_TRIP".equals(action)) {
                          stopManualTrip();
                      }
                  }
                  return START_STICKY;
              }

              private void startManualTrip() {
                  if (currentTrip != null) {
                      Log.w(TAG, "Manual trip already in progress");
                      return;
                  }

                  Log.d(TAG, "Starting manual trip");

                  currentTrip = new Trip();
                  currentTrip.setStartTime(System.currentTimeMillis());
                  currentTrip.setAutoDetected(false); // Manual trip
                  currentTrip.setCategory("Personal"); // Default category

                  totalDistance = 0.0f;
                  tripStartLocation = null;
                  lastLocation = null;

                  if (wakeLock != null && !wakeLock.isHeld()) {
                      wakeLock.acquire();
                  }

                  // Start location tracking
                  if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                      locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, this);
                      locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 10000, 50, this);
                  }

                  startForeground(NOTIFICATION_ID, createNotification("Manual trip recording..."));

                  // Broadcast trip started
                  Intent broadcastIntent = new Intent("MANUAL_TRIP_UPDATE");
                  broadcastIntent.putExtra("status", "started");
                  sendBroadcast(broadcastIntent);
              }

              private void stopManualTrip() {
                  if (currentTrip == null) {
                      Log.w(TAG, "No manual trip in progress");
                      return;
                  }

                  Log.d(TAG, "Stopping manual trip");

                  currentTrip.setEndTime(System.currentTimeMillis());
                  currentTrip.setDuration(currentTrip.getEndTime() - currentTrip.getStartTime());
                  currentTrip.setDistance(totalDistance * 0.000621371); // Convert meters to miles

                  // Get end location address
                  if (lastLocation != null) {
                      currentTrip.setEndLatitude(lastLocation.getLatitude());
                      currentTrip.setEndLongitude(lastLocation.getLongitude());

                      AddressLookup addressLookup = new AddressLookup(this);
                      addressLookup.getAddressFromLocation(
                          lastLocation.getLatitude(),
                          lastLocation.getLongitude(),
                          new AddressLookup.AddressCallback() {
                              @Override
                              public void onAddressFound(String address) {
                                  currentTrip.setEndAddress(address);
                                  finalizeTripSave();
                              }

                              @Override
                              public void onAddressError(String error) {
                                  currentTrip.setEndAddress("Unknown Location");
                                  finalizeTripSave();
                              }
                          }
                      );
                  } else {
                      currentTrip.setEndAddress("Unknown Location");
                      finalizeTripSave();
                  }
              }

              private void finalizeTripSave() {
                  // Save trip locally FIRST (always works)
                  tripStorage.saveTrip(currentTrip);

                  // Save to API ONLY if enabled (safe fallback)
                  if (tripStorage.isApiSyncEnabled()) {
                      cloudBackup.backupTrip(currentTrip);
                      Log.d(TAG, "Manual trip saved locally + API backup attempted");
                  } else {
                      Log.d(TAG, "Manual trip saved locally only (API sync disabled)");
                  }

                  Log.d(TAG, String.format("Manual trip saved: %.2f miles, %d minutes",
                      currentTrip.getDistance(),
                      currentTrip.getDuration() / (1000 * 60)));

                  // Broadcast trip completed
                  Intent broadcastIntent = new Intent("MANUAL_TRIP_UPDATE");
                  broadcastIntent.putExtra("status", "completed");
                  broadcastIntent.putExtra("distance", currentTrip.getDistance());
                  broadcastIntent.putExtra("duration", currentTrip.getDuration());
                  sendBroadcast(broadcastIntent);

                  // Clean up
                  currentTrip = null;
                  locationManager.removeUpdates(this);
                  
                  if (wakeLock != null && wakeLock.isHeld()) {
                      wakeLock.release();
                  }

                  stopForeground(true);
                  stopSelf();
              }

              @Override
              public void onLocationChanged(Location location) {
                  if (currentTrip == null) return;

                  // Set start location on first update
                  if (tripStartLocation == null) {
                      tripStartLocation = location;
                      currentTrip.setStartLatitude(location.getLatitude());
                      currentTrip.setStartLongitude(location.getLongitude());

                      AddressLookup addressLookup = new AddressLookup(this);
                      addressLookup.getAddressFromLocation(
                          location.getLatitude(),
                          location.getLongitude(),
                          new AddressLookup.AddressCallback() {
                              @Override
                              public void onAddressFound(String address) {
                                  currentTrip.setStartAddress(address);
                              }

                              @Override
                              public void onAddressError(String error) {
                                  currentTrip.setStartAddress("Unknown Location");
                              }
                          }
                      );
                  }

                  // Calculate distance
                  if (lastLocation != null) {
                      float distance = lastLocation.distanceTo(location);
                      totalDistance += distance;

                      // Broadcast distance update
                      Intent broadcastIntent = new Intent("MANUAL_TRIP_UPDATE");
                      broadcastIntent.putExtra("status", "recording");
                      broadcastIntent.putExtra("current_distance", totalDistance * 0.000621371); // Convert to miles
                      sendBroadcast(broadcastIntent);
                  }

                  lastLocation = location;
              }

              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "Manual Trip Recording",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      channel.setDescription("Tracks manual trips");
                      notificationManager.createNotificationChannel(channel);
                  }
              }

              private Notification createNotification(String message) {
                  return new NotificationCompat.Builder(this, CHANNEL_ID)
                      .setContentTitle("MileTracker Pro")
                      .setContentText(message)
                      .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                      .setOngoing(true)
                      .build();
              }

              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }

              @Override
              public void onStatusChanged(String provider, int status, android.os.Bundle extras) {}

              @Override
              public void onProviderEnabled(String provider) {}

              @Override
              public void onProviderDisabled(String provider) {}
          }
          EOF

      - name: Create AutoDetectionService - CONDITIONAL API BACKUP
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/services/AutoDetectionService.java << 'EOF'
          package com.miletrackerpro.app.services;

          import android.Manifest;
          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Context;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.IBinder;
          import android.os.PowerManager;
          import android.util.Log;
          import androidx.core.app.ActivityCompat;
          import androidx.core.app.NotificationCompat;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import com.miletrackerpro.app.utils.AddressLookup;
          import com.miletrackerpro.app.CloudBackupService;

          public class AutoDetectionService extends Service implements LocationListener {

              private static final String TAG = "AutoDetectionService";
              private static final String CHANNEL_ID = "AUTO_DETECTION_CHANNEL";
              private static final int NOTIFICATION_ID = 1001;

              // YOUR REQUESTED STOPLIGHT FIX
              private static final double MIN_TRIP_DISTANCE_MILES = 0.5;

              private LocationManager locationManager;
              private NotificationManager notificationManager;
              private TripStorage tripStorage;
              private CloudBackupService cloudBackup;
              private PowerManager.WakeLock wakeLock;

              private boolean isServiceRunning = false;
              private Trip currentTrip = null;
              private Location tripStartLocation = null;
              private Location lastLocation = null;
              private float totalDistance = 0.0f;
              private long stationaryStartTime = 0;

              @Override
              public void onCreate() {
                  super.onCreate();

                  locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                  notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);
                  tripStorage = new TripStorage(this);
                  cloudBackup = new CloudBackupService(this);

                  PowerManager powerManager = (PowerManager) getSystemService(Context.POWER_SERVICE);
                  wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, 
                      "MileTracker::AutoDetectionService");

                  createNotificationChannel();

                  Log.d(TAG, "AutoDetectionService created");
              }

              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  if (intent != null) {
                      String action = intent.getAction();
                      if ("START_AUTO_DETECTION".equals(action)) {
                          startAutoDetection();
                      } else if ("STOP_AUTO_DETECTION".equals(action)) {
                          stopAutoDetection();
                      }
                  }
                  return START_STICKY;
              }

              private void startAutoDetection() {
                  if (isServiceRunning) return;

                  Log.d(TAG, "Starting auto detection");
                  isServiceRunning = true;

                  if (wakeLock != null && !wakeLock.isHeld()) {
                      wakeLock.acquire();
                  }

                  if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                      locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 15000, 0, this);
                      locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 30000, 0, this);
                  }

                  startForeground(NOTIFICATION_ID, createNotification("Auto trip detection active"));

                  tripStorage.setAutoDetectionEnabled(true);
              }

              private void stopAutoDetection() {
                  Log.d(TAG, "Stopping auto detection");
                  isServiceRunning = false;

                  locationManager.removeUpdates(this);
                  
                  if (wakeLock != null && wakeLock.isHeld()) {
                      wakeLock.release();
                  }

                  stopForeground(true);
                  tripStorage.setAutoDetectionEnabled(false);
                  stopSelf();
              }

              @Override
              public void onLocationChanged(Location location) {
                  if (!isServiceRunning) return;

                  float speed = location.getSpeed() * 2.237f; // Convert m/s to mph

                  if (currentTrip == null) {
                      // Check if we should start a trip
                      if (speed > 8.0f) { // Starting threshold: 8 mph
                          startTrip(location);
                      }
                  } else {
                      // Trip in progress - update distance and check for end
                      if (lastLocation != null) {
                          float distance = lastLocation.distanceTo(location);
                          totalDistance += distance;
                      }

                      if (speed < 3.0f) { // Stopping threshold: 3 mph
                          if (stationaryStartTime == 0) {
                              stationaryStartTime = System.currentTimeMillis();
                          } else if (System.currentTimeMillis() - stationaryStartTime > 120000) { // 2 minutes stationary
                              endTrip(location);
                          }
                      } else {
                          stationaryStartTime = 0; // Reset stationary timer
                      }
                  }

                  lastLocation = location;
              }

              private void startTrip(Location location) {
                  Log.d(TAG, "Starting new trip");

                  currentTrip = new Trip();
                  currentTrip.setStartTime(System.currentTimeMillis());
                  currentTrip.setStartLatitude(location.getLatitude());
                  currentTrip.setStartLongitude(location.getLongitude());
                  currentTrip.setAutoDetected(true);
                  currentTrip.setCategory("Personal"); // Default category

                  tripStartLocation = location;
                  totalDistance = 0.0f;
                  stationaryStartTime = 0;

                  // Get start address
                  AddressLookup addressLookup = new AddressLookup(this);
                  addressLookup.getAddressFromLocation(
                      location.getLatitude(),
                      location.getLongitude(),
                      new AddressLookup.AddressCallback() {
                          @Override
                          public void onAddressFound(String address) {
                              currentTrip.setStartAddress(address);
                              tripStorage.saveCurrentTrip(currentTrip);
                          }

                          @Override
                          public void onAddressError(String error) {
                              currentTrip.setStartAddress("Unknown Location");
                              tripStorage.saveCurrentTrip(currentTrip);
                          }
                      }
                  );

                  updateNotification("Trip in progress");
              }

              private void endTrip(Location location) {
                  if (currentTrip == null) return;

                  Log.d(TAG, "Ending current trip");

                  currentTrip.setEndTime(System.currentTimeMillis());
                  currentTrip.setEndLatitude(location.getLatitude());
                  currentTrip.setEndLongitude(location.getLongitude());
                  currentTrip.setDuration(currentTrip.getEndTime() - currentTrip.getStartTime());

                  double distanceInMiles = totalDistance * 0.000621371; // Convert meters to miles
                  currentTrip.setDistance(distanceInMiles);

                  // Apply minimum distance filter to avoid stoplight trips
                  if (distanceInMiles < MIN_TRIP_DISTANCE_MILES) {
                      Log.d(TAG, String.format("Trip too short (%.2f miles), discarding", distanceInMiles));
                      currentTrip = null;
                      tripStorage.saveCurrentTrip(null);
                      updateNotification("Auto trip detection active");
                      return;
                  }

                  // Get end address
                  AddressLookup addressLookup = new AddressLookup(this);
                  addressLookup.getAddressFromLocation(
                      location.getLatitude(),
                      location.getLongitude(),
                      new AddressLookup.AddressCallback() {
                          @Override
                          public void onAddressFound(String address) {
                              currentTrip.setEndAddress(address);
                              finalizeTripSave();
                          }

                          @Override
                          public void onAddressError(String error) {
                              currentTrip.setEndAddress("Unknown Location");
                              finalizeTripSave();
                          }
                      }
                  );
              }

              private void finalizeTripSave() {
                  // Save trip locally FIRST (always works)
                  tripStorage.saveTrip(currentTrip);

                  // Save to API ONLY if enabled (safe fallback)
                  if (tripStorage.isApiSyncEnabled()) {
                      cloudBackup.backupTrip(currentTrip);
                      Log.d(TAG, "Auto trip saved locally + API backup attempted");
                  } else {
                      Log.d(TAG, "Auto trip saved locally only (API sync disabled)");
                  }

                  Log.d(TAG, String.format("Auto trip saved: %.2f miles, %d minutes",
                      currentTrip.getDistance(),
                      currentTrip.getDuration() / (1000 * 60)));

                  // Clean up
                  currentTrip = null;
                  tripStorage.saveCurrentTrip(null);
                  updateNotification("Auto trip detection active");
              }

              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "Auto Trip Detection",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      channel.setDescription("Automatically detects and records trips");
                      notificationManager.createNotificationChannel(channel);
                  }
              }

              private Notification createNotification(String message) {
                  return new NotificationCompat.Builder(this, CHANNEL_ID)
                      .setContentTitle("MileTracker Pro")
                      .setContentText(message)
                      .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                      .setOngoing(true)
                      .build();
              }

              private void updateNotification(String message) {
                  Notification notification = createNotification(message);
                  notificationManager.notify(NOTIFICATION_ID, notification);
              }

              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }

              @Override
              public void onStatusChanged(String provider, int status, android.os.Bundle extras) {}

              @Override
              public void onProviderEnabled(String provider) {}

              @Override
              public void onProviderDisabled(String provider) {}
          }
          EOF

      - name: Create CLEAN MainActivity with BOTTOM TABS and FIXED UI
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;

          import android.Manifest;
          import android.app.ActivityManager;
          import android.app.AlertDialog;
          import android.content.BroadcastReceiver;
          import android.content.Context;
          import android.content.Intent;
          import android.content.IntentFilter;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.Bundle;
          import android.os.Handler;
          import android.util.Log;
          import android.view.Gravity;
          import android.view.View;
          import android.widget.Button;
          import android.widget.EditText;
          import android.widget.LinearLayout;
          import android.widget.ScrollView;
          import android.widget.Spinner;
          import android.widget.ArrayAdapter;
          import android.widget.TextView;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          import com.miletrackerpro.app.services.AutoDetectionService;
          import com.miletrackerpro.app.services.ManualTripService;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import java.util.List;

          public class MainActivity extends AppCompatActivity implements LocationListener {
              private static final String TAG = "MainActivity";
              private static final int LOCATION_PERMISSION_REQUEST = 1001;
              private static final int BACKGROUND_LOCATION_PERMISSION_REQUEST = 1002;

              // Main layout
              private LinearLayout mainContentLayout;
              private LinearLayout bottomTabLayout;

              // Tab content
              private LinearLayout dashboardContent;
              private LinearLayout tripsContent;
              private Button homeTabButton;
              private Button tripsTabButton;
              private String currentTab = "home";

              // Dashboard UI Elements
              private TextView statusText;
              private TextView speedText;
              private TextView statsText;
              private Button autoToggle;
              private Button apiToggle;
              private Button manualStartButton;
              private Button manualStopButton;
              private Button addTripButton;
              private LinearLayout recentTripsLayout;

              // Trips UI Elements
              private LinearLayout allTripsLayout;
              private ScrollView allTripsScroll;

              // Services and storage
              private LocationManager locationManager;
              private TripStorage tripStorage;
              private boolean autoDetectionEnabled = false;
              private boolean manualTripInProgress = false;
              private Handler speedHandler = new Handler();
              private Runnable speedRunnable;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  try {
                      Log.d(TAG, "MainActivity onCreate starting - CLEAN UI VERSION...");
                      
                      tripStorage = new TripStorage(this);
                      createCleanLayout();
                      initializeGPS();
                      setupSpeedMonitoring();
                      requestPermissions();
                      updateStats();
                      registerBroadcastReceiver();

                      // Restore auto detection state
                      restoreAutoDetectionState();
                      
                      Log.d(TAG, "MainActivity onCreate completed successfully");
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Error in onCreate: " + e.getMessage(), e);
                      Toast.makeText(this, "App initialization error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void createCleanLayout() {
                  try {
                      // MAIN CONTAINER
                      LinearLayout mainLayout = new LinearLayout(this);
                      mainLayout.setOrientation(LinearLayout.VERTICAL);
                      mainLayout.setBackgroundColor(0xFFF5F5F5);

                      // MAIN CONTENT AREA (takes most space)
                      mainContentLayout = new LinearLayout(this);
                      mainContentLayout.setOrientation(LinearLayout.VERTICAL);
                      LinearLayout.LayoutParams contentParams = new LinearLayout.LayoutParams(
                          LinearLayout.LayoutParams.MATCH_PARENT, 
                          0, 
                          1.0f // Takes remaining space above tabs
                      );
                      mainContentLayout.setLayoutParams(contentParams);

                      // BOTTOM TAB BAR
                      bottomTabLayout = new LinearLayout(this);
                      bottomTabLayout.setOrientation(LinearLayout.HORIZONTAL);
                      bottomTabLayout.setBackgroundColor(0xFFFFFFFF);
                      bottomTabLayout.setPadding(0, 10, 0, 20);
                      bottomTabLayout.setGravity(Gravity.CENTER);

                      // HOME TAB BUTTON
                      homeTabButton = new Button(this);
                      homeTabButton.setText("🏠 Home");
                      homeTabButton.setTextSize(14);
                      homeTabButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE THEME
                      homeTabButton.setTextColor(0xFFFFFFFF);
                      homeTabButton.setOnClickListener(v -> switchToTab("home"));
                      LinearLayout.LayoutParams homeParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1);
                      homeParams.setMargins(20, 0, 10, 0);
                      homeTabButton.setLayoutParams(homeParams);
                      bottomTabLayout.addView(homeTabButton);

                      // TRIPS TAB BUTTON  
                      tripsTabButton = new Button(this);
                      tripsTabButton.setText("📋 Trips");
                      tripsTabButton.setTextSize(14);
                      tripsTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY WHEN INACTIVE
                      tripsTabButton.setTextColor(0xFFFFFFFF);
                      tripsTabButton.setOnClickListener(v -> switchToTab("trips"));
                      LinearLayout.LayoutParams tripsParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1);
                      tripsParams.setMargins(10, 0, 20, 0);
                      tripsTabButton.setLayoutParams(tripsParams);
                      bottomTabLayout.addView(tripsTabButton);

                      // CREATE TAB CONTENT
                      createDashboardContent();
                      createTripsContent();

                      // Add content and tabs to main layout
                      mainLayout.addView(mainContentLayout);
                      mainLayout.addView(bottomTabLayout);

                      // Start with home tab visible
                      switchToTab("home");

                      setContentView(mainLayout);
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Error creating clean layout: " + e.getMessage(), e);
                      throw e;
                  }
              }

              private void createDashboardContent() {
                  dashboardContent = new LinearLayout(this);
                  dashboardContent.setOrientation(LinearLayout.VERTICAL);
                  dashboardContent.setPadding(20, 20, 20, 20);

                  // Header
                  TextView headerText = new TextView(this);
                  headerText.setText("🚗 MileTracker Pro");
                  headerText.setTextSize(24);
                  headerText.setTextColor(0xFF212121);
                  headerText.setPadding(0, 0, 0, 10);
                  dashboardContent.addView(headerText);

                  // Subtitle - SHORTER TEXT
                  TextView subtitleText = new TextView(this);
                  subtitleText.setText("v4.7 • Clean UI • API Test");
                  subtitleText.setTextSize(12);
                  subtitleText.setTextColor(0xFF757575);
                  subtitleText.setPadding(0, 0, 0, 15);
                  dashboardContent.addView(subtitleText);

                  // Status
                  statusText = new TextView(this);
                  statusText.setText("Initializing...");
                  statusText.setTextSize(14);
                  statusText.setTextColor(0xFF212121);
                  statusText.setPadding(15, 15, 15, 15);
                  statusText.setBackgroundColor(0xFFe3f2fd);
                  dashboardContent.addView(statusText);

                  // Speed display
                  speedText = new TextView(this);
                  speedText.setText("Speed: -- mph");
                  speedText.setTextSize(12);
                  speedText.setTextColor(0xFF757575);
                  speedText.setPadding(15, 5, 15, 10);
                  dashboardContent.addView(speedText);

                  // API SYNC TOGGLE SECTION
                  TextView apiSectionHeader = new TextView(this);
                  apiSectionHeader.setText("🌐 API Sync");
                  apiSectionHeader.setTextSize(16);
                  apiSectionHeader.setTextColor(0xFF212121);
                  apiSectionHeader.setPadding(0, 10, 0, 5);
                  dashboardContent.addView(apiSectionHeader);

                  apiToggle = new Button(this);
                  updateApiToggleUI();
                  apiToggle.setTextSize(14);
                  apiToggle.setOnClickListener(v -> toggleApiSync());
                  dashboardContent.addView(apiToggle);

                  // AUTO DETECTION SECTION
                  TextView autoSectionHeader = new TextView(this);
                  autoSectionHeader.setText("🤖 Auto Detection");
                  autoSectionHeader.setTextSize(16);
                  autoSectionHeader.setTextColor(0xFF212121);
                  autoSectionHeader.setPadding(0, 10, 0, 5);
                  dashboardContent.addView(autoSectionHeader);

                  autoToggle = new Button(this);
                  autoToggle.setText("🔄 Auto OFF");
                  autoToggle.setTextSize(14);
                  autoToggle.setBackgroundColor(0xFF9e9e9e);
                  autoToggle.setTextColor(0xFFFFFFFF);
                  autoToggle.setOnClickListener(v -> toggleAutoDetection());
                  dashboardContent.addView(autoToggle);

                  // MANUAL CONTROLS SECTION
                  TextView manualSectionHeader = new TextView(this);
                  manualSectionHeader.setText("✋ Manual Controls");
                  manualSectionHeader.setTextSize(16);
                  manualSectionHeader.setTextColor(0xFF212121);
                  manualSectionHeader.setPadding(0, 10, 0, 5);
                  dashboardContent.addView(manualSectionHeader);

                  LinearLayout manualButtonLayout = new LinearLayout(this);
                  manualButtonLayout.setOrientation(LinearLayout.HORIZONTAL);

                  manualStartButton = new Button(this);
                  manualStartButton.setText("▶️ START");
                  manualStartButton.setTextSize(12);
                  manualStartButton.setBackgroundColor(0xFF4caf50);
                  manualStartButton.setTextColor(0xFFFFFFFF);
                  manualStartButton.setOnClickListener(v -> startManualTrip());
                  LinearLayout.LayoutParams startParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1);
                  startParams.setMargins(0, 0, 5, 0);
                  manualStartButton.setLayoutParams(startParams);
                  manualButtonLayout.addView(manualStartButton);

                  manualStopButton = new Button(this);
                  manualStopButton.setText("⏹️ STOP");
                  manualStopButton.setTextSize(12);
                  manualStopButton.setBackgroundColor(0xFFf44336);
                  manualStopButton.setTextColor(0xFFFFFFFF);
                  manualStopButton.setEnabled(false);
                  manualStopButton.setOnClickListener(v -> stopManualTrip());
                  LinearLayout.LayoutParams stopParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1);
                  stopParams.setMargins(5, 0, 0, 0);
                  manualStopButton.setLayoutParams(stopParams);
                  manualButtonLayout.addView(manualStopButton);

                  dashboardContent.addView(manualButtonLayout);

                  // ADD TRIP MANUALLY SECTION
                  addTripButton = new Button(this);
                  addTripButton.setText("➕ Add Trip Manually");
                  addTripButton.setTextSize(14);
                  addTripButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE
                  addTripButton.setTextColor(0xFFFFFFFF);
                  addTripButton.setOnClickListener(v -> showAddTripDialog());
                  LinearLayout.LayoutParams addParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                  addParams.setMargins(0, 10, 0, 0);
                  addTripButton.setLayoutParams(addParams);
                  dashboardContent.addView(addTripButton);

                  // Stats
                  statsText = new TextView(this);
                  statsText.setText("Loading stats...");
                  statsText.setTextSize(12);
                  statsText.setTextColor(0xFF212121);
                  statsText.setPadding(15, 10, 15, 10);
                  statsText.setBackgroundColor(0xFFfafafa);
                  LinearLayout.LayoutParams statsParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                  statsParams.setMargins(0, 10, 0, 0);
                  statsText.setLayoutParams(statsParams);
                  dashboardContent.addView(statsText);

                  // RECENT TRIPS SECTION
                  TextView recentTripsHeader = new TextView(this);
                  recentTripsHeader.setText("📍 Recent Trips");
                  recentTripsHeader.setTextSize(16);
                  recentTripsHeader.setTextColor(0xFF212121);
                  recentTripsHeader.setPadding(0, 15, 0, 5);
                  dashboardContent.addView(recentTripsHeader);

                  ScrollView recentTripsScroll = new ScrollView(this);
                  recentTripsLayout = new LinearLayout(this);
                  recentTripsLayout.setOrientation(LinearLayout.VERTICAL);
                  recentTripsScroll.addView(recentTripsLayout);
                  
                  LinearLayout.LayoutParams recentScrollParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      200 // Smaller height for cleaner look
                  );
                  recentTripsScroll.setLayoutParams(recentScrollParams);
                  dashboardContent.addView(recentTripsScroll);
              }

              private void createTripsContent() {
                  tripsContent = new LinearLayout(this);
                  tripsContent.setOrientation(LinearLayout.VERTICAL);
                  tripsContent.setPadding(20, 20, 20, 20);

                  // Header
                  TextView headerText = new TextView(this);
                  headerText.setText("📋 All Trips");
                  headerText.setTextSize(20);
                  headerText.setTextColor(0xFF212121);
                  headerText.setPadding(0, 0, 0, 15);
                  tripsContent.addView(headerText);

                  // Full-screen scrollable trips list
                  allTripsScroll = new ScrollView(this);
                  allTripsLayout = new LinearLayout(this);
                  allTripsLayout.setOrientation(LinearLayout.VERTICAL);
                  allTripsScroll.addView(allTripsLayout);
                  
                  LinearLayout.LayoutParams allTripsParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      0,
                      1.0f // Takes remaining space
                  );
                  allTripsScroll.setLayoutParams(allTripsParams);
                  tripsContent.addView(allTripsScroll);
              }

              // NEW: API sync toggle methods
              private void toggleApiSync() {
                  try {
                      boolean currentState = tripStorage.isApiSyncEnabled();
                      tripStorage.setApiSyncEnabled(!currentState);
                      updateApiToggleUI();
                      updateStats();
                      
                      String message = tripStorage.isApiSyncEnabled() ? 
                          "API sync ON - trips sync to database" : 
                          "API sync OFF - local storage only";
                      Toast.makeText(this, message, Toast.LENGTH_SHORT).show();
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Error toggling API sync: " + e.getMessage(), e);
                      Toast.makeText(this, "Error toggling API sync: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void updateApiToggleUI() {
                  try {
                      if (tripStorage.isApiSyncEnabled()) {
                          apiToggle.setText("🌐 API ON");
                          apiToggle.setBackgroundColor(0xFF4caf50); // Green
                          apiToggle.setTextColor(0xFFFFFFFF);
                      } else {
                          apiToggle.setText("🌐 API OFF");
                          apiToggle.setBackgroundColor(0xFF9e9e9e); // Gray
                          apiToggle.setTextColor(0xFFFFFFFF);
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating API toggle UI: " + e.getMessage(), e);
                  }
              }

              private void switchToTab(String tabName) {
                  try {
                      currentTab = tabName;
                      
                      // Remove all content from main layout
                      mainContentLayout.removeAllViews();
                      
                      if ("home".equals(tabName)) {
                          mainContentLayout.addView(dashboardContent);
                          homeTabButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE WHEN ACTIVE
                          tripsTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY WHEN INACTIVE
                          updateRecentTrips();
                      } else if ("trips".equals(tabName)) {
                          mainContentLayout.addView(tripsContent);
                          homeTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY WHEN INACTIVE
                          tripsTabButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE WHEN ACTIVE
                          updateAllTrips();
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error switching tabs: " + e.getMessage(), e);
                  }
              }

              private void updateRecentTrips() {
                  try {
                      recentTripsLayout.removeAllViews();

                      List<Trip> trips = tripStorage.getAllTrips();

                      if (trips.isEmpty()) {
                          TextView noTripsText = new TextView(this);
                          noTripsText.setText("No trips yet. Test API sync with manual trip entry!");
                          noTripsText.setTextSize(12);
                          noTripsText.setTextColor(0xFF757575);
                          noTripsText.setPadding(10, 10, 10, 10);
                          recentTripsLayout.addView(noTripsText);
                      } else {
                          // Show last 2 trips for cleaner dashboard
                          int maxTrips = Math.min(2, trips.size());
                          for (int i = trips.size() - maxTrips; i < trips.size(); i++) {
                              Trip trip = trips.get(i);
                              addTripCard(recentTripsLayout, trip, true); // compact = true
                          }
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating recent trips: " + e.getMessage(), e);
                  }
              }

              private void updateAllTrips() {
                  try {
                      allTripsLayout.removeAllViews();

                      List<Trip> trips = tripStorage.getAllTrips();

                      if (trips.isEmpty()) {
                          TextView noTripsText = new TextView(this);
                          noTripsText.setText("No trips recorded yet.\n\nTesting Steps:\n1. Turn API Sync ON\n2. Add manual trip\n3. Check server logs\n4. View your trips\n\nClean UI with bottom tabs!");
                          noTripsText.setTextSize(14);
                          noTripsText.setTextColor(0xFF757575);
                          noTripsText.setPadding(15, 30, 15, 15);
                          allTripsLayout.addView(noTripsText);
                      } else {
                          // Show all trips in reverse order (newest first)
                          for (int i = trips.size() - 1; i >= 0; i--) {
                              Trip trip = trips.get(i);
                              addTripCard(allTripsLayout, trip, false); // compact = false
                          }
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating all trips: " + e.getMessage(), e);
                  }
              }

              private void addTripCard(LinearLayout parentLayout, Trip trip, boolean compact) {
                  try {
                      TextView tripView = new TextView(this);
                      String tripType = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                      String apiStatus = tripStorage.isApiSyncEnabled() ? "📤 API" : "💾 Local";
                      
                      if (compact) {
                          tripView.setText(String.format(
                              "%s %s • %.1f mi • %s",
                              tripType,
                              apiStatus,
                              trip.getDistance(),
                              trip.getCategory()
                          ));
                          tripView.setTextSize(11);
                      } else {
                          tripView.setText(String.format(
                              "%s %s • %s\n%.2f miles • %s • %s\nFrom: %s\nTo: %s",
                              tripType,
                              apiStatus,
                              trip.getFormattedDate(),
                              trip.getDistance(),
                              trip.getFormattedDuration(),
                              trip.getCategory(),
                              trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown",
                              trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown"
                          ));
                          tripView.setTextSize(12);
                      }
                      
                      tripView.setTextColor(0xFF212121);
                      tripView.setPadding(10, 10, 10, 10);
                      tripView.setBackgroundColor(0xFFffffff);

                      LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                          LinearLayout.LayoutParams.MATCH_PARENT,
                          LinearLayout.LayoutParams.WRAP_CONTENT
                      );
                      params.setMargins(0, 0, 0, 5);
                      tripView.setLayoutParams(params);

                      parentLayout.addView(tripView);
                  } catch (Exception e) {
                      Log.e(TAG, "Error adding trip card: " + e.getMessage(), e);
                  }
              }

              // MANUAL TRIP METHODS (same as before but with updated UI feedback)
              private void startManualTrip() {
                  try {
                      if (manualTripInProgress) {
                          Toast.makeText(this, "Manual trip already in progress", Toast.LENGTH_SHORT).show();
                          return;
                      }

                      Intent serviceIntent = new Intent(this, ManualTripService.class);
                      serviceIntent.setAction("START_MANUAL_TRIP");
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                          startForegroundService(serviceIntent);
                      } else {
                          startService(serviceIntent);
                      }

                      manualTripInProgress = true;
                      manualStartButton.setEnabled(false);
                      manualStopButton.setEnabled(true);
                      statusText.setText("Manual trip recording...");
                      
                      String apiStatus = tripStorage.isApiSyncEnabled() ? " with API sync" : " (local only)";
                      Toast.makeText(this, "Manual trip started" + apiStatus, Toast.LENGTH_SHORT).show();
                  } catch (Exception e) {
                      Log.e(TAG, "Error starting manual trip: " + e.getMessage(), e);
                      Toast.makeText(this, "Error starting manual trip: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void stopManualTrip() {
                  try {
                      if (!manualTripInProgress) {
                          Toast.makeText(this, "No manual trip in progress", Toast.LENGTH_SHORT).show();
                          return;
                      }

                      Intent serviceIntent = new Intent(this, ManualTripService.class);
                      serviceIntent.setAction("STOP_MANUAL_TRIP");
                      startService(serviceIntent);

                      manualTripInProgress = false;
                      manualStartButton.setEnabled(true);
                      manualStopButton.setEnabled(false);
                      statusText.setText("Manual trip completed");
                      
                      String apiStatus = tripStorage.isApiSyncEnabled() ? " and synced!" : " (saved locally)!";
                      Toast.makeText(this, "Trip saved" + apiStatus, Toast.LENGTH_SHORT).show();
                  } catch (Exception e) {
                      Log.e(TAG, "Error stopping manual trip: " + e.getMessage(), e);
                      Toast.makeText(this, "Error stopping manual trip: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void showAddTripDialog() {
                  try {
                      AlertDialog.Builder builder = new AlertDialog.Builder(this);
                      builder.setTitle("Add Trip Manually");

                      LinearLayout layout = new LinearLayout(this);
                      layout.setOrientation(LinearLayout.VERTICAL);
                      layout.setPadding(40, 15, 40, 15);

                      EditText startLocationInput = new EditText(this);
                      startLocationInput.setHint("Start location (e.g., Home)");
                      layout.addView(startLocationInput);

                      EditText endLocationInput = new EditText(this);
                      endLocationInput.setHint("End location (e.g., Hospital)");
                      layout.addView(endLocationInput);

                      EditText distanceInput = new EditText(this);
                      distanceInput.setHint("Distance in miles (e.g., 12.5)");
                      distanceInput.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL);
                      layout.addView(distanceInput);

                      Spinner categorySpinner = new Spinner(this);
                      String[] categories = {"Personal", "Business", "Medical", "Charity"};
                      ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                      adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                      categorySpinner.setAdapter(adapter);
                      layout.addView(categorySpinner);

                      builder.setView(layout);

                      builder.setPositiveButton("Save Trip", (dialog, which) -> {
                          String startLocation = startLocationInput.getText().toString().trim();
                          String endLocation = endLocationInput.getText().toString().trim();
                          String distanceStr = distanceInput.getText().toString().trim();
                          String category = categorySpinner.getSelectedItem().toString();

                          if (startLocation.isEmpty() || endLocation.isEmpty() || distanceStr.isEmpty()) {
                              Toast.makeText(this, "Please fill all fields", Toast.LENGTH_SHORT).show();
                              return;
                          }

                          try {
                              double distance = Double.parseDouble(distanceStr);
                              saveManualTrip(startLocation, endLocation, distance, category);
                          } catch (NumberFormatException e) {
                              Toast.makeText(this, "Invalid distance format", Toast.LENGTH_SHORT).show();
                          }
                      });

                      builder.setNegativeButton("Cancel", null);
                      builder.show();
                  } catch (Exception e) {
                      Log.e(TAG, "Error showing add trip dialog: " + e.getMessage(), e);
                      Toast.makeText(this, "Error showing dialog: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void saveManualTrip(String startLocation, String endLocation, double distance, String category) {
                  try {
                      Trip trip = new Trip();
                      trip.setStartAddress(startLocation);
                      trip.setEndAddress(endLocation);
                      trip.setDistance(distance);
                      trip.setCategory(category);
                      trip.setAutoDetected(false);
                      
                      // Set approximate coordinates
                      trip.setStartLatitude(40.7128);
                      trip.setStartLongitude(-74.0060);
                      trip.setEndLatitude(40.7589);
                      trip.setEndLongitude(-73.9851);
                      
                      // Calculate estimated duration (assuming average 30 mph)
                      long estimatedDuration = (long)(distance / 30.0 * 60 * 60 * 1000);
                      long currentTime = System.currentTimeMillis();
                      trip.setStartTime(currentTime - estimatedDuration);
                      trip.setEndTime(currentTime);
                      trip.setDuration(estimatedDuration);

                      // Save locally
                      tripStorage.saveTrip(trip);

                      // Save to API if enabled
                      if (tripStorage.isApiSyncEnabled()) {
                          CloudBackupService cloudBackup = new CloudBackupService(this);
                          cloudBackup.backupTrip(trip);
                          Toast.makeText(this, "Trip saved and synced to API!", Toast.LENGTH_SHORT).show();
                      } else {
                          Toast.makeText(this, "Trip saved locally!", Toast.LENGTH_SHORT).show();
                      }

                      updateStats();
                      
                      // Refresh current view
                      if ("home".equals(currentTab)) {
                          updateRecentTrips();
                      } else {
                          updateAllTrips();
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error saving manual trip: " + e.getMessage(), e);
                      Toast.makeText(this, "Error saving trip: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private BroadcastReceiver manualTripReceiver = new BroadcastReceiver() {
                  @Override
                  public void onReceive(Context context, Intent intent) {
                      try {
                          String status = intent.getStringExtra("status");
                          
                          if ("started".equals(status)) {
                              statusText.setText("Manual trip recording...");
                          } else if ("recording".equals(status)) {
                              double currentDistance = intent.getDoubleExtra("current_distance", 0.0);
                              statusText.setText(String.format("Recording: %.2f miles", currentDistance));
                          } else if ("completed".equals(status)) {
                              double distance = intent.getDoubleExtra("distance", 0.0);
                              long duration = intent.getLongExtra("duration", 0);
                              String apiStatus = tripStorage.isApiSyncEnabled() ? " + API" : " (local)";
                              statusText.setText(String.format("Trip saved: %.2f miles%s", distance, apiStatus));
                              updateStats();
                              
                              // Refresh current view
                              if ("home".equals(currentTab)) {
                                  updateRecentTrips();
                              } else {
                                  updateAllTrips();
                              }
                          }
                      } catch (Exception e) {
                          Log.e(TAG, "Error in broadcast receiver: " + e.getMessage(), e);
                      }
                  }
              };

              private void registerBroadcastReceiver() {
                  try {
                      IntentFilter filter = new IntentFilter("MANUAL_TRIP_UPDATE");
                      registerReceiver(manualTripReceiver, filter);
                  } catch (Exception e) {
                      Log.e(TAG, "Error registering broadcast receiver: " + e.getMessage(), e);
                  }
              }

              @Override
              protected void onDestroy() {
                  try {
                      super.onDestroy();
                      if (manualTripReceiver != null) {
                          unregisterReceiver(manualTripReceiver);
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error in onDestroy: " + e.getMessage(), e);
                  }
              }

              // AUTO DETECTION METHODS (PRESERVED BUT WITH CLEANER UI)
              private void toggleAutoDetection() {
                  try {
                      autoDetectionEnabled = !autoDetectionEnabled;

                      if (autoDetectionEnabled) {
                          startAutoDetectionService();
                          statusText.setText("Auto detection ON");
                      } else {
                          stopAutoDetectionService();
                          statusText.setText("Auto detection OFF");
                      }

                      updateAutoToggleUI();
                  } catch (Exception e) {
                      Log.e(TAG, "Error toggling auto detection: " + e.getMessage(), e);
                      Toast.makeText(this, "Error toggling auto detection: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void updateAutoToggleUI() {
                  try {
                      if (autoDetectionEnabled) {
                          autoToggle.setText("🔄 Auto ON");
                          autoToggle.setBackgroundColor(0xFF4caf50);
                      } else {
                          autoToggle.setText("🔄 Auto OFF");
                          autoToggle.setBackgroundColor(0xFF9e9e9e);
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating auto toggle UI: " + e.getMessage(), e);
                  }
              }

              private void startAutoDetectionService() {
                  try {
                      Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                      serviceIntent.setAction("START_AUTO_DETECTION");
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                          startForegroundService(serviceIntent);
                      } else {
                          startService(serviceIntent);
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error starting auto detection service: " + e.getMessage(), e);
                      Toast.makeText(this, "Error starting auto detection: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void stopAutoDetectionService() {
                  try {
                      Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                      serviceIntent.setAction("STOP_AUTO_DETECTION");
                      startService(serviceIntent);
                  } catch (Exception e) {
                      Log.e(TAG, "Error stopping auto detection service: " + e.getMessage(), e);
                      Toast.makeText(this, "Error stopping auto detection: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              private void restoreAutoDetectionState() {
                  try {
                      boolean serviceRunning = isServiceRunning(AutoDetectionService.class);
                      boolean savedState = tripStorage.isAutoDetectionEnabled();

                      autoDetectionEnabled = serviceRunning || savedState;
                      updateAutoToggleUI();

                      if (autoDetectionEnabled && !serviceRunning) {
                          startAutoDetectionService();
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error restoring auto detection state: " + e.getMessage(), e);
                  }
              }

              private boolean isServiceRunning(Class<?> serviceClass) {
                  try {
                      ActivityManager manager = (ActivityManager) getSystemService(Context.ACTIVITY_SERVICE);
                      for (ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {
                          if (serviceClass.getName().equals(service.service.getClassName())) {
                              return true;
                          }
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error checking if service is running: " + e.getMessage(), e);
                  }
                  return false;
              }

              // PERMISSION AND GPS METHODS (PRESERVED)
              private void requestPermissions() {
                  try {
                      if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                          ActivityCompat.requestPermissions(this, new String[]{
                              Manifest.permission.ACCESS_FINE_LOCATION,
                              Manifest.permission.ACCESS_COARSE_LOCATION
                          }, LOCATION_PERMISSION_REQUEST);
                      } else {
                          checkBackgroundLocationPermission();
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error requesting permissions: " + e.getMessage(), e);
                  }
              }

              private void checkBackgroundLocationPermission() {
                  try {
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                          if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                              ActivityCompat.requestPermissions(this, new String[]{
                                  Manifest.permission.ACCESS_BACKGROUND_LOCATION
                              }, BACKGROUND_LOCATION_PERMISSION_REQUEST);
                          } else {
                              statusText.setText("Ready - Clean UI with API Test");
                          }
                      } else {
                          statusText.setText("Ready - Clean UI with API Test");
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error checking background location permission: " + e.getMessage(), e);
                  }
              }

              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  try {
                      super.onRequestPermissionsResult(requestCode, permissions, grantResults);

                      if (requestCode == LOCATION_PERMISSION_REQUEST) {
                          if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                              Toast.makeText(this, "Location permission granted!", Toast.LENGTH_SHORT).show();
                              checkBackgroundLocationPermission();
                          } else {
                              Toast.makeText(this, "Location permission required for trip tracking", Toast.LENGTH_LONG).show();
                          }
                      } else if (requestCode == BACKGROUND_LOCATION_PERMISSION_REQUEST) {
                          if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                              Toast.makeText(this, "Background location permission granted!", Toast.LENGTH_SHORT).show();
                              statusText.setText("Ready - Clean UI with API Test");
                          } else {
                              Toast.makeText(this, "Background location helps auto-detect trips", Toast.LENGTH_LONG).show();
                          }
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error in permission result: " + e.getMessage(), e);
                  }
              }

              private void setupSpeedMonitoring() {
                  try {
                      speedRunnable = new Runnable() {
                          @Override
                          public void run() {
                              try {
                                  if (ActivityCompat.checkSelfPermission(MainActivity.this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                                      Location lastKnownLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                                      if (lastKnownLocation != null) {
                                          float speed = lastKnownLocation.getSpeed() * 2.237f; // Convert m/s to mph
                                          speedText.setText(String.format("Speed: %.1f mph", speed));
                                      }
                                  }
                                  speedHandler.postDelayed(this, 3000);
                              } catch (Exception e) {
                                  Log.e(TAG, "Error in speed monitoring: " + e.getMessage(), e);
                              }
                          }
                      };
                      speedHandler.post(speedRunnable);
                  } catch (Exception e) {
                      Log.e(TAG, "Error setting up speed monitoring: " + e.getMessage(), e);
                  }
              }

              private void initializeGPS() {
                  try {
                      locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                  } catch (Exception e) {
                      Log.e(TAG, "Error initializing GPS: " + e.getMessage(), e);
                  }
              }

              private void updateStats() {
                  try {
                      List<Trip> trips = tripStorage.getAllTrips();
                      String apiStatus = tripStorage.isApiSyncEnabled() ? "ON" : "OFF";

                      if (trips.isEmpty()) {
                          statsText.setText("Trips: 0 • Miles: 0.0 • API: " + apiStatus);
                      } else {
                          double totalMiles = 0;
                          int autoTrips = 0;
                          int manualTrips = 0;
                          
                          for (Trip trip : trips) {
                              totalMiles += trip.getDistance();
                              if (trip.isAutoDetected()) {
                                  autoTrips++;
                              } else {
                                  manualTrips++;
                              }
                          }

                          statsText.setText(String.format(
                              "Trips: %d • Miles: %.1f • Auto: %d • Manual: %d • API: %s",
                              trips.size(),
                              totalMiles,
                              autoTrips,
                              manualTrips,
                              apiStatus
                          ));
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating stats: " + e.getMessage(), e);
                  }
              }

              // Location listener methods
              @Override
              public void onLocationChanged(Location location) {}

              @Override
              public void onStatusChanged(String provider, int status, android.os.Bundle extras) {}

              @Override
              public void onProviderEnabled(String provider) {}

              @Override
              public void onProviderDisabled(String provider) {}
          }
          EOF

      - name: Build APK
        run: |
          cd android
          chmod +x gradlew
          ./gradlew assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MileTracker-Pro-CLEAN-UI-v4.7
          path: android/app/build/outputs/apk/release/app-release.apk
