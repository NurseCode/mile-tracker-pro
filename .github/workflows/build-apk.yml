name: Build Android APK
on: 
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version Code'
        required: true
        default: '49136'
        type: string
  schedule:
    - cron: '30 */6 * * *'

jobs:
  build:
    runs-on: ubuntu-latest
    
    env:
      ANDROID_COMPILE_SDK: '35'
      ANDROID_BUILD_TOOLS: '35.0.0'
      ANDROID_SDK_TOOLS: '11076708'
      ANDROID_CMAKE: '3.22.1'
      ANDROID_NDK: '26.3.11579264'
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        
      - name: Install dependencies
        run: |
          echo "y" | sdkmanager --install "platform-tools"
          echo "y" | sdkmanager --install "platforms;android-$ANDROID_COMPILE_SDK"
          echo "y" | sdkmanager --install "build-tools;$ANDROID_BUILD_TOOLS"
          echo "y" | sdkmanager --install "ndk;$ANDROID_NDK"
          echo "y" | sdkmanager --install "cmake;$ANDROID_CMAKE"
          
      - name: Create project structure
        run: |
          # Create required directories
          mkdir -p android/app/src/main/java/com/miletrackerpro/app
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/auth
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/models
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
          mkdir -p android/app/src/main/res/drawable
          mkdir -p android/app/src/main/res/values
          mkdir -p android/app/src/main/res/xml
          
      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          include ':app'
          project(':app').projectDir = new File(rootDir, 'app')
          EOF
          
      - name: Create project build.gradle
        run: |
          cat > android/build.gradle << 'EOF'
          allprojects {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          
          task clean(type: Delete) {
              delete rootProject.buildDir
          }
          EOF
          
      - name: Create gradle.properties
        run: |
          cat > android/gradle.properties << 'EOF'
          org.gradle.jvmargs=-Xmx4g -Dfile.encoding=UTF-8
          android.useAndroidX=true
          android.enableJetifier=true
          android.compileSdkVersion=35
          android.buildToolsVersion=35.0.0
          android.targetSdkVersion=35
          android.minSdkVersion=21
          EOF
          
      - name: Create gradle wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.7-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create app build.gradle
        run: |
          cat > android/app/build.gradle << 'EOF'
          apply plugin: 'com.android.application'
          
          android {
              compileSdkVersion 35
              buildToolsVersion "35.0.0"
          
              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdkVersion 21
                  targetSdkVersion 35
                  versionCode ${{ github.event.inputs.version_code || '49136' }}
                  versionName "4.9.136"
              }
              
              signingConfigs {
                  release {
                      storeFile file('miletracker-keystore.jks')
                      storePassword 'miletracker123'
                      keyAlias 'miletracker'
                      keyPassword 'miletracker123'
                  }
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      debuggable false
                      signingConfig signingConfigs.release
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              packagingOptions {
                  pickFirst '**/kotlin-stdlib-*.jar'
                  pickFirst '**/kotlin-stdlib-jdk*.jar'
                  exclude 'META-INF/kotlin-stdlib.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk7.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk8.kotlin_module'
              }
          }

          configurations.all {
              resolutionStrategy {
                  force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.android.gms:play-services-location:21.0.1'
              implementation 'com.squareup.okhttp3:okhttp:4.12.0'
              implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
              implementation 'org.json:json:20231013'
              implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
              implementation 'com.itextpdf:itextg:5.5.10'
          }
          EOF

      - name: Create AndroidManifest.xml
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">

              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.READ_PHONE_STATE" />

              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="MileTracker Pro"
                  android:theme="@style/AppTheme"
                  android:networkSecurityConfig="@xml/network_security_config"
                  android:usesCleartextTraffic="true">

                  <activity
                      android:name=".auth.AuthActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:screenOrientation="portrait">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <activity
                      android:name=".MainActivity"
                      android:exported="false"
                      android:screenOrientation="portrait" />

                  <service
                      android:name=".services.LocationService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />
                      
                  <provider
                      android:name="androidx.core.content.FileProvider"
                      android:authorities="com.miletrackerpro.app.fileprovider"
                      android:exported="false"
                      android:grantUriPermissions="true">
                      <meta-data
                          android:name="android.support.FILE_PROVIDER_PATHS"
                          android:resource="@xml/file_paths" />
                  </provider>
              </application>
          </manifest>
          EOF

      - name: Create file_paths.xml
        run: |
          cat > android/app/src/main/res/xml/file_paths.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <paths xmlns:android="http://schemas.android.com/apk/res/android">
              <external-cache-path name="shared_files" path="." />
          </paths>
          EOF

      - name: Create network_security_config.xml
        run: |
          cat > android/app/src/main/res/xml/network_security_config.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <network-security-config>
              <domain-config cleartextTrafficPermitted="true">
                  <domain includeSubdomains="true">mileage-tracker-codenurse.replit.app</domain>
                  <domain includeSubdomains="true">10.0.2.2</domain>
                  <domain includeSubdomains="true">localhost</domain>
              </domain-config>
          </network-security-config>
          EOF

      - name: Create styles.xml
        run: |
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667eea</item>
                  <item name="colorPrimaryDark">#5a67d8</item>
                  <item name="colorAccent">#ed8936</item>
                  <item name="windowActionBar">true</item>
                  <item name="windowNoTitle">false</item>
              </style>
          </resources>
          EOF

      - name: Create strings.xml
        run: |
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
          </resources>
          EOF

      - name: Create colors.xml
        run: |
          cat > android/app/src/main/res/values/colors.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <color name="primary">#667eea</color>
              <color name="primary_dark">#5a67d8</color>
              <color name="accent">#ed8936</color>
              <color name="white">#FFFFFF</color>
              <color name="black">#000000</color>
              <color name="gray">#9CA3AF</color>
              <color name="light_gray">#F3F4F6</color>
              <color name="dark_gray">#374151</color>
              <color name="success">#10B981</color>
              <color name="error">#EF4444</color>
              <color name="warning">#F59E0B</color>
          </resources>
          EOF

      - name: Create MainActivity.java
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;

          import android.app.AlertDialog;
          import android.app.DatePickerDialog;
          import android.content.Context;
          import android.content.Intent;
          import android.content.SharedPreferences;
          import android.graphics.Color;
          import android.net.Uri;
          import android.os.Bundle;
          import android.os.Handler;
          import android.util.Log;
          import android.view.View;
          import android.widget.ArrayAdapter;
          import android.widget.Button;
          import android.widget.EditText;
          import android.widget.LinearLayout;
          import android.widget.ScrollView;
          import android.widget.Spinner;
          import android.widget.TextView;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.content.FileProvider;
          import com.miletrackerpro.app.models.Trip;
          import com.miletrackerpro.app.models.TripStorage;
          import com.miletrackerpro.app.services.LocationService;
          import java.io.File;
          import java.io.FileWriter;
          import java.io.IOException;
          import java.text.SimpleDateFormat;
          import java.util.ArrayList;
          import java.util.Calendar;
          import java.util.Date;
          import java.util.List;
          import java.util.Locale;

          public class MainActivity extends AppCompatActivity {
              private static final String TAG = "MainActivity";
              private static final String PREFS_NAME = "MileTrackerPrefs";
              private static final String PREF_BUSINESS_RATE = "business_rate";
              private static final String PREF_MEDICAL_RATE = "medical_rate";
              private static final String PREF_CHARITY_RATE = "charity_rate";
              
              private TripStorage tripStorage;
              private Button startButton, stopButton, exportButton;
              private TextView statusText, statsText;
              private Handler animationHandler;
              private Runnable animationRunnable;
              private boolean isBlinking = false;
              private int currentTab = 0;
              private ScrollView homeContent, classifyContent, categorizedContent;
              private LinearLayout tripsLayout, categorizedLayout;
              private Button homeTab, classifyTab, categorizedTab;
              private Button allFilter, businessFilter, personalFilter, medicalFilter, charityFilter;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  // Initialize trip storage
                  tripStorage = new TripStorage(this);
                  
                  // Set up UI
                  setupUI();
                  
                  // Load current status
                  updateUI();
                  
                  // Start location service
                  startLocationService();
                  
                  // Set up periodic refresh
                  startPeriodicRefresh();
              }

              private void setupUI() {
                  // Create main layout
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(20, 20, 20, 20);
                  
                  // Create tab navigation
                  setupTabNavigation(mainLayout);
                  
                  // Create content areas
                  setupContentAreas(mainLayout);
                  
                  setContentView(mainLayout);
                  
                  // Show home tab by default
                  showTab(0);
              }

              private void setupTabNavigation(LinearLayout parent) {
                  // Tab navigation layout
                  LinearLayout tabLayout = new LinearLayout(this);
                  tabLayout.setOrientation(LinearLayout.HORIZONTAL);
                  tabLayout.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  ));
                  
                  // Home tab
                  homeTab = new Button(this);
                  homeTab.setText("🏠Home\nDashboard");
                  homeTab.setTextSize(12);
                  homeTab.setLayoutParams(new LinearLayout.LayoutParams(0, 120, 1));
                  homeTab.setOnClickListener(v -> showTab(0));
                  
                  // Classify tab
                  classifyTab = new Button(this);
                  classifyTab.setText("Sort Trips\nClassify");
                  classifyTab.setTextSize(12);
                  classifyTab.setLayoutParams(new LinearLayout.LayoutParams(0, 120, 1));
                  classifyTab.setOnClickListener(v -> showTab(1));
                  
                  // Categorized tab
                  categorizedTab = new Button(this);
                  categorizedTab.setText("Sorted Trips\nReview");
                  categorizedTab.setTextSize(12);
                  categorizedTab.setLayoutParams(new LinearLayout.LayoutParams(0, 120, 1));
                  categorizedTab.setOnClickListener(v -> showTab(2));
                  
                  tabLayout.addView(homeTab);
                  tabLayout.addView(classifyTab);
                  tabLayout.addView(categorizedTab);
                  
                  parent.addView(tabLayout);
              }

              private void setupContentAreas(LinearLayout parent) {
                  // Home content
                  homeContent = new ScrollView(this);
                  setupHomeContent();
                  
                  // Classify content
                  classifyContent = new ScrollView(this);
                  setupClassifyContent();
                  
                  // Categorized content
                  categorizedContent = new ScrollView(this);
                  setupCategorizedContent();
                  
                  parent.addView(homeContent);
                  parent.addView(classifyContent);
                  parent.addView(categorizedContent);
              }

              private void setupHomeContent() {
                  LinearLayout layout = new LinearLayout(this);
                  layout.setOrientation(LinearLayout.VERTICAL);
                  layout.setPadding(0, 20, 0, 0);
                  
                  // Status display
                  statusText = new TextView(this);
                  statusText.setText("Auto Detection: OFF");
                  statusText.setTextSize(16);
                  statusText.setTextColor(Color.parseColor("#374151"));
                  statusText.setPadding(0, 0, 0, 20);
                  layout.addView(statusText);
                  
                  // Manual controls section
                  TextView manualLabel = new TextView(this);
                  manualLabel.setText("Manual Trip Controls");
                  manualLabel.setTextSize(14);
                  manualLabel.setTextColor(Color.parseColor("#374151"));
                  manualLabel.setPadding(0, 0, 0, 10);
                  layout.addView(manualLabel);
                  
                  // Control buttons
                  LinearLayout buttonLayout = new LinearLayout(this);
                  buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
                  buttonLayout.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  ));
                  
                  startButton = new Button(this);
                  startButton.setText("START");
                  startButton.setBackgroundColor(Color.parseColor("#10B981"));
                  startButton.setTextColor(Color.WHITE);
                  startButton.setLayoutParams(new LinearLayout.LayoutParams(0, 50, 1));
                  startButton.setOnClickListener(v -> startTrip());
                  
                  stopButton = new Button(this);
                  stopButton.setText("STOP");
                  stopButton.setBackgroundColor(Color.parseColor("#EF4444"));
                  stopButton.setTextColor(Color.WHITE);
                  stopButton.setLayoutParams(new LinearLayout.LayoutParams(0, 50, 1));
                  stopButton.setOnClickListener(v -> stopTrip());
                  
                  exportButton = new Button(this);
                  exportButton.setText("EXPORT");
                  exportButton.setBackgroundColor(Color.parseColor("#667eea"));
                  exportButton.setTextColor(Color.WHITE);
                  exportButton.setLayoutParams(new LinearLayout.LayoutParams(0, 50, 1));
                  exportButton.setOnClickListener(v -> showExportDialog());
                  
                  buttonLayout.addView(startButton);
                  buttonLayout.addView(stopButton);
                  buttonLayout.addView(exportButton);
                  
                  layout.addView(buttonLayout);
                  
                  // Statistics
                  statsText = new TextView(this);
                  statsText.setText("Loading statistics...");
                  statsText.setTextSize(14);
                  statsText.setTextColor(Color.parseColor("#374151"));
                  statsText.setPadding(0, 20, 0, 20);
                  layout.addView(statsText);
                  
                  homeContent.addView(layout);
              }

              private void setupClassifyContent() {
                  LinearLayout layout = new LinearLayout(this);
                  layout.setOrientation(LinearLayout.VERTICAL);
                  layout.setPadding(0, 20, 0, 0);
                  
                  TextView title = new TextView(this);
                  title.setText("Classify Your Trips");
                  title.setTextSize(18);
                  title.setTextColor(Color.parseColor("#374151"));
                  title.setPadding(0, 0, 0, 20);
                  layout.addView(title);
                  
                  TextView instructions = new TextView(this);
                  instructions.setText("Swipe left for Business, right for Personal");
                  instructions.setTextSize(14);
                  instructions.setTextColor(Color.parseColor("#9CA3AF"));
                  instructions.setPadding(0, 0, 0, 20);
                  layout.addView(instructions);
                  
                  tripsLayout = new LinearLayout(this);
                  tripsLayout.setOrientation(LinearLayout.VERTICAL);
                  layout.addView(tripsLayout);
                  
                  classifyContent.addView(layout);
              }

              private void setupCategorizedContent() {
                  LinearLayout layout = new LinearLayout(this);
                  layout.setOrientation(LinearLayout.VERTICAL);
                  layout.setPadding(0, 20, 0, 0);
                  
                  TextView title = new TextView(this);
                  title.setText("Categorized Trips");
                  title.setTextSize(18);
                  title.setTextColor(Color.parseColor("#374151"));
                  title.setPadding(0, 0, 0, 20);
                  layout.addView(title);
                  
                  // Filter buttons
                  LinearLayout filterLayout = new LinearLayout(this);
                  filterLayout.setOrientation(LinearLayout.HORIZONTAL);
                  filterLayout.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  ));
                  
                  allFilter = createFilterButton("All");
                  businessFilter = createFilterButton("Business");
                  personalFilter = createFilterButton("Personal");
                  medicalFilter = createFilterButton("Medical");
                  charityFilter = createFilterButton("Charity");
                  
                  filterLayout.addView(allFilter);
                  filterLayout.addView(businessFilter);
                  filterLayout.addView(personalFilter);
                  filterLayout.addView(medicalFilter);
                  filterLayout.addView(charityFilter);
                  
                  layout.addView(filterLayout);
                  
                  categorizedLayout = new LinearLayout(this);
                  categorizedLayout.setOrientation(LinearLayout.VERTICAL);
                  layout.addView(categorizedLayout);
                  
                  categorizedContent.addView(layout);
              }

              private Button createFilterButton(String text) {
                  Button button = new Button(this);
                  button.setText(text);
                  button.setTextSize(10);
                  button.setLayoutParams(new LinearLayout.LayoutParams(0, 40, 1));
                  button.setOnClickListener(v -> filterTrips(text));
                  return button;
              }

              private void showTab(int tabIndex) {
                  currentTab = tabIndex;
                  
                  // Update tab colors
                  homeTab.setBackgroundColor(tabIndex == 0 ? Color.parseColor("#667eea") : Color.parseColor("#9CA3AF"));
                  homeTab.setTextColor(tabIndex == 0 ? Color.WHITE : Color.parseColor("#374151"));
                  
                  classifyTab.setBackgroundColor(tabIndex == 1 ? Color.parseColor("#667eea") : Color.parseColor("#9CA3AF"));
                  classifyTab.setTextColor(tabIndex == 1 ? Color.WHITE : Color.parseColor("#374151"));
                  
                  categorizedTab.setBackgroundColor(tabIndex == 2 ? Color.parseColor("#667eea") : Color.parseColor("#9CA3AF"));
                  categorizedTab.setTextColor(tabIndex == 2 ? Color.WHITE : Color.parseColor("#374151"));
                  
                  // Show/hide content
                  homeContent.setVisibility(tabIndex == 0 ? View.VISIBLE : View.GONE);
                  classifyContent.setVisibility(tabIndex == 1 ? View.VISIBLE : View.GONE);
                  categorizedContent.setVisibility(tabIndex == 2 ? View.VISIBLE : View.GONE);
                  
                  // Update content
                  if (tabIndex == 0) {
                      updateUI();
                  } else if (tabIndex == 1) {
                      loadUnclassifiedTrips();
                  } else if (tabIndex == 2) {
                      loadCategorizedTrips();
                  }
              }

              private void loadUnclassifiedTrips() {
                  tripsLayout.removeAllViews();
                  
                  List<Trip> trips = tripStorage.getAllTrips();
                  List<Trip> unclassifiedTrips = new ArrayList<>();
                  
                  for (Trip trip : trips) {
                      if ("Unclassified".equals(trip.getCategory())) {
                          unclassifiedTrips.add(trip);
                      }
                  }
                  
                  if (unclassifiedTrips.isEmpty()) {
                      TextView emptyText = new TextView(this);
                      emptyText.setText("No unclassified trips found. All trips have been categorized!");
                      emptyText.setTextSize(14);
                      emptyText.setTextColor(Color.parseColor("#9CA3AF"));
                      emptyText.setPadding(0, 40, 0, 0);
                      tripsLayout.addView(emptyText);
                      return;
                  }
                  
                  for (Trip trip : unclassifiedTrips) {
                      addTripCard(trip, tripsLayout);
                  }
              }

              private void loadCategorizedTrips() {
                  filterTrips("All");
              }

              private void filterTrips(String category) {
                  categorizedLayout.removeAllViews();
                  
                  List<Trip> trips = tripStorage.getAllTrips();
                  List<Trip> filteredTrips = new ArrayList<>();
                  
                  for (Trip trip : trips) {
                      if (!"Unclassified".equals(trip.getCategory())) {
                          if ("All".equals(category) || category.equals(trip.getCategory())) {
                              filteredTrips.add(trip);
                          }
                      }
                  }
                  
                  if (filteredTrips.isEmpty()) {
                      TextView emptyText = new TextView(this);
                      emptyText.setText("No " + (category.equals("All") ? "categorized" : category) + " trips found.");
                      emptyText.setTextSize(14);
                      emptyText.setTextColor(Color.parseColor("#9CA3AF"));
                      emptyText.setPadding(0, 40, 0, 0);
                      categorizedLayout.addView(emptyText);
                      return;
                  }
                  
                  for (Trip trip : filteredTrips) {
                      addTripCard(trip, categorizedLayout);
                  }
              }

              private void addTripCard(Trip trip, LinearLayout parent) {
                  LinearLayout card = new LinearLayout(this);
                  card.setOrientation(LinearLayout.VERTICAL);
                  card.setPadding(15, 15, 15, 15);
                  card.setBackgroundColor(Color.parseColor("#F3F4F6"));
                  
                  LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  cardParams.setMargins(0, 0, 0, 15);
                  card.setLayoutParams(cardParams);
                  
                  // Trip info
                  TextView tripInfo = new TextView(this);
                  SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm", Locale.getDefault());
                  tripInfo.setText(String.format("%.2f miles • %s • %s\n%s to %s",
                      trip.getDistance(),
                      trip.getCategory(),
                      dateFormat.format(new Date(trip.getStartTime())),
                      trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown",
                      trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown"
                  ));
                  tripInfo.setTextSize(12);
                  tripInfo.setTextColor(Color.parseColor("#374151"));
                  card.addView(tripInfo);
                  
                  parent.addView(card);
              }

              private void showExportDialog() {
                  AlertDialog.Builder builder = new AlertDialog.Builder(this);
                  builder.setTitle("Export Trips");
                  
                  View dialogView = getLayoutInflater().inflate(android.R.layout.simple_list_item_1, null);
                  LinearLayout layout = new LinearLayout(this);
                  layout.setOrientation(LinearLayout.VERTICAL);
                  layout.setPadding(50, 20, 50, 20);
                  
                  // Date range selection
                  TextView dateLabel = new TextView(this);
                  dateLabel.setText("Select Date Range:");
                  dateLabel.setTextSize(14);
                  dateLabel.setTextColor(Color.parseColor("#374151"));
                  layout.addView(dateLabel);
                  
                  Calendar startCal = Calendar.getInstance();
                  startCal.set(Calendar.DAY_OF_MONTH, 1);
                  Calendar endCal = Calendar.getInstance();
                  
                  final boolean[] startDateSet = {false};
                  final boolean[] endDateSet = {false};
                  
                  Button startDateButton = new Button(this);
                  startDateButton.setText("Start Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startCal.getTime()));
                  startDateButton.setOnClickListener(v -> {
                      DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                          (view, year, month, dayOfMonth) -> {
                              startCal.set(year, month, dayOfMonth);
                              startDateButton.setText("Start Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startCal.getTime()));
                              startDateSet[0] = true;
                          }, startCal.get(Calendar.YEAR), startCal.get(Calendar.MONTH), startCal.get(Calendar.DAY_OF_MONTH));
                      datePickerDialog.show();
                  });
                  layout.addView(startDateButton);
                  
                  Button endDateButton = new Button(this);
                  endDateButton.setText("End Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endCal.getTime()));
                  endDateButton.setOnClickListener(v -> {
                      DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                          (view, year, month, dayOfMonth) -> {
                              endCal.set(year, month, dayOfMonth);
                              endDateButton.setText("End Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endCal.getTime()));
                              endDateSet[0] = true;
                          }, endCal.get(Calendar.YEAR), endCal.get(Calendar.MONTH), endCal.get(Calendar.DAY_OF_MONTH));
                      datePickerDialog.show();
                  });
                  layout.addView(endDateButton);
                  
                  // Category selection
                  TextView categoryLabel = new TextView(this);
                  categoryLabel.setText("Select Category:");
                  categoryLabel.setTextSize(14);
                  categoryLabel.setTextColor(Color.parseColor("#374151"));
                  categoryLabel.setPadding(0, 20, 0, 0);
                  layout.addView(categoryLabel);
                  
                  Spinner categorySpinner = new Spinner(this);
                  ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item,
                      new String[]{"All Categories", "Business", "Personal", "Medical", "Charity"});
                  categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  categorySpinner.setAdapter(categoryAdapter);
                  layout.addView(categorySpinner);
                  
                  // Format selection
                  TextView formatLabel = new TextView(this);
                  formatLabel.setText("Select Format:");
                  formatLabel.setTextSize(14);
                  formatLabel.setTextColor(Color.parseColor("#374151"));
                  formatLabel.setPadding(0, 20, 0, 0);
                  layout.addView(formatLabel);
                  
                  Spinner formatSpinner = new Spinner(this);
                  ArrayAdapter<String> formatAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item,
                      new String[]{"CSV", "TXT", "PDF"});
                  formatAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  formatSpinner.setAdapter(formatAdapter);
                  layout.addView(formatSpinner);
                  
                  // Export buttons
                  LinearLayout buttonLayout = new LinearLayout(this);
                  buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
                  buttonLayout.setPadding(0, 20, 0, 0);
                  
                  Button emailButton = new Button(this);
                  emailButton.setText("📧 Email");
                  emailButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));
                  emailButton.setOnClickListener(v -> {
                      if (!startDateSet[0] || !endDateSet[0]) {
                          Toast.makeText(this, "❌ Please select both start and end dates", Toast.LENGTH_SHORT).show();
                          return;
                      }
                      String selectedCategory = categorySpinner.getSelectedItem().toString();
                      int formatSelection = formatSpinner.getSelectedItemPosition();
                      String exportFormat = formatSelection == 0 ? "CSV" : formatSelection == 1 ? "TXT" : "PDF";
                      exportAndEmail(startCal.getTime(), endCal.getTime(), selectedCategory, exportFormat);
                  });
                  
                  Button cloudButton = new Button(this);
                  cloudButton.setText("☁️ Cloud");
                  cloudButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));
                  cloudButton.setOnClickListener(v -> {
                      if (!startDateSet[0] || !endDateSet[0]) {
                          Toast.makeText(this, "❌ Please select both start and end dates", Toast.LENGTH_SHORT).show();
                          return;
                      }
                      String selectedCategory = categorySpinner.getSelectedItem().toString();
                      int formatSelection = formatSpinner.getSelectedItemPosition();
                      String exportFormat = formatSelection == 0 ? "CSV" : formatSelection == 1 ? "TXT" : "PDF";
                      exportToCloud(startCal.getTime(), endCal.getTime(), selectedCategory, exportFormat);
                  });
                  
                  buttonLayout.addView(emailButton);
                  buttonLayout.addView(cloudButton);
                  layout.addView(buttonLayout);
                  
                  builder.setView(layout);
                  builder.setNegativeButton("Cancel", null);
                  builder.create().show();
              }
              
              private void exportAndEmail(Date startDate, Date endDate, String category, String exportFormat) {
                  try {
                      List<Trip> tripsInRange = getTripsInDateRange(startDate, endDate, category);
                      if (tripsInRange.isEmpty()) {
                          String categoryText = category.equals("All Categories") ? "selected date range" : category + " trips in selected date range";
                          Toast.makeText(this, "❌ No " + categoryText + " found", Toast.LENGTH_SHORT).show();
                          return;
                      }
                      
                      File exportFile;
                      String fileName;
                      String mimeType;
                      String fileDescription;
                      
                      if ("CSV".equals(exportFormat)) {
                          String exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                          mimeType = "text/csv";
                          fileDescription = "CSV Spreadsheet";
                          
                          SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                          fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                          if (!category.equals("All Categories")) {
                              fileName += "_" + category.replace(" ", "_");
                          }
                          fileName += ".csv";
                          
                          exportFile = new File(getExternalCacheDir(), fileName);
                          FileWriter writer = new FileWriter(exportFile);
                          writer.write(exportContent);
                          writer.close();
                      } else if ("TXT".equals(exportFormat)) {
                          String exportContent = generateTXT(tripsInRange, startDate, endDate, category);
                          mimeType = "text/plain";
                          fileDescription = "Text Document";
                          
                          SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                          fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                          if (!category.equals("All Categories")) {
                              fileName += "_" + category.replace(" ", "_");
                          }
                          fileName += ".txt";
                          
                          exportFile = new File(getExternalCacheDir(), fileName);
                          FileWriter writer = new FileWriter(exportFile);
                          writer.write(exportContent);
                          writer.close();
                      } else { // PDF
                          String pdfFilePath = generatePDF(tripsInRange, startDate, endDate, category);
                          exportFile = new File(pdfFilePath);
                          fileName = exportFile.getName();
                          mimeType = "application/pdf";
                          fileDescription = "PDF Document";
                      }
                      
                      // Create URI for the file
                      Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                      
                      String categoryFilter = category.equals("All Categories") ? "" : " (" + category + ")";
                      
                      Intent emailIntent = new Intent(Intent.ACTION_SEND);
                      emailIntent.setType("message/rfc822");
                      emailIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export" + categoryFilter + " " + 
                          new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " +
                          new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate));
                      emailIntent.putExtra(Intent.EXTRA_TEXT, "Please find your MileTracker Pro trip data attached as " + fileName + ".\n\n" +
                          "Export Summary:\n" +
                          "Date Range: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate) + "\n" +
                          "Category: " + category + "\n" +
                          "Total Trips: " + tripsInRange.size() + "\n" +
                          "File Format: " + fileDescription + "\n\n" +
                          "This file can be opened in Excel, Google Sheets, or your preferred application.\n\n" +
                          "Generated by MileTracker Pro");
                      emailIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                      emailIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                      
                      if (emailIntent.resolveActivity(getPackageManager()) != null) {
                          startActivity(Intent.createChooser(emailIntent, "Send email..."));
                          Toast.makeText(this, "✅ Email " + tripsInRange.size() + " trips (" + exportFormat + ")", Toast.LENGTH_SHORT).show();
                      } else {
                          Toast.makeText(this, "❌ No email app available", Toast.LENGTH_SHORT).show();
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error exporting and emailing: " + e.getMessage(), e);
                      Toast.makeText(this, "❌ Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }
              
              private void exportToCloud(Date startDate, Date endDate, String category, String exportFormat) {
                  try {
                      List<Trip> tripsInRange = getTripsInDateRange(startDate, endDate, category);
                      if (tripsInRange.isEmpty()) {
                          String categoryText = category.equals("All Categories") ? "selected date range" : category + " trips in selected date range";
                          Toast.makeText(this, "❌ No " + categoryText + " found", Toast.LENGTH_SHORT).show();
                          return;
                      }
                      
                      File exportFile;
                      String fileName;
                      String mimeType;
                      
                      if ("CSV".equals(exportFormat)) {
                          String exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                          mimeType = "text/csv";
                          
                          SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                          fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                          if (!category.equals("All Categories")) {
                              fileName += "_" + category.replace(" ", "_");
                          }
                          fileName += ".csv";
                          
                          exportFile = new File(getExternalCacheDir(), fileName);
                          FileWriter writer = new FileWriter(exportFile);
                          writer.write(exportContent);
                          writer.close();
                      } else if ("TXT".equals(exportFormat)) {
                          String exportContent = generateTXT(tripsInRange, startDate, endDate, category);
                          mimeType = "text/plain";
                          
                          SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                          fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                          if (!category.equals("All Categories")) {
                              fileName += "_" + category.replace(" ", "_");
                          }
                          fileName += ".txt";
                          
                          exportFile = new File(getExternalCacheDir(), fileName);
                          FileWriter writer = new FileWriter(exportFile);
                          writer.write(exportContent);
                          writer.close();
                      } else { // PDF
                          String pdfFilePath = generatePDF(tripsInRange, startDate, endDate, category);
                          exportFile = new File(pdfFilePath);
                          fileName = exportFile.getName();
                          mimeType = "application/pdf";
                      }
                      
                      // Create URI for the file
                      Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                      
                      String categoryFilter = category.equals("All Categories") ? "" : " (" + category + ")";
                      
                      Intent shareIntent = new Intent(Intent.ACTION_SEND);
                      shareIntent.setType(mimeType);
                      shareIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export" + categoryFilter);
                      shareIntent.putExtra(Intent.EXTRA_TEXT, "MileTracker Pro trip data export file attached.\n\n" +
                          "File: " + fileName + "\n" +
                          "Date Range: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate) + "\n" +
                          "Category: " + category + "\n" +
                          "Total Trips: " + tripsInRange.size());
                      shareIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                      shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                      
                      if (shareIntent.resolveActivity(getPackageManager()) != null) {
                          startActivity(Intent.createChooser(shareIntent, "Share to cloud storage..."));
                          Toast.makeText(this, "✅ Sharing " + tripsInRange.size() + " trips (" + exportFormat + ") to cloud", Toast.LENGTH_SHORT).show();
                      } else {
                          Toast.makeText(this, "❌ No sharing apps available", Toast.LENGTH_SHORT).show();
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error exporting to cloud: " + e.getMessage(), e);
                      Toast.makeText(this, "❌ Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }
              
              private List<Trip> getTripsInDateRange(Date startDate, Date endDate, String category) {
                  List<Trip> allTrips = tripStorage.getAllTrips();
                  List<Trip> filteredTrips = new ArrayList<>();
                  
                  for (Trip trip : allTrips) {
                      Date tripDate = new Date(trip.getStartTime());
                      if (!tripDate.before(startDate) && !tripDate.after(endDate)) {
                          if (category.equals("All Categories") || trip.getCategory().equals(category)) {
                              filteredTrips.add(trip);
                          }
                      }
                  }
                  
                  return filteredTrips;
              }
              
              private String generateCSV(List<Trip> trips, Date startDate, Date endDate, String category) {
                  StringBuilder csv = new StringBuilder();
                  SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                  SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                  
                  // Header
                  csv.append("MileTracker Pro - Trip Export\n");
                  csv.append("Export Date Range: ").append(dateFormat.format(startDate))
                     .append(" to ").append(dateFormat.format(endDate)).append("\n");
                  csv.append("Category Filter: ").append(category).append("\n");
                  csv.append("Generated: ").append(dateFormat.format(new Date())).append("\n\n");
                  
                  // CSV Headers
                  csv.append("Date,Start Time,End Time,Start Location,End Location,Distance (mi),Duration,Category,Client,Notes,Type\n");
                  
                  // Data rows
                  double totalMiles = 0;
                  for (Trip trip : trips) {
                      Date tripDate = new Date(trip.getStartTime());
                      Date endTime = new Date(trip.getEndTime());
                      
                      csv.append("\"").append(dateFormat.format(tripDate)).append("\",");
                      csv.append("\"").append(timeFormat.format(tripDate)).append("\",");
                      csv.append("\"").append(timeFormat.format(endTime)).append("\",");
                      csv.append("\"").append(trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown").append("\",");
                      csv.append("\"").append(trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown").append("\",");
                      csv.append(String.format("%.2f", trip.getDistance())).append(",");
                      csv.append("\"").append(trip.getFormattedDuration()).append("\",");
                      csv.append("\"").append(trip.getCategory()).append("\",");
                      csv.append("\"").append(trip.getClientName() != null ? trip.getClientName() : "").append("\",");
                      csv.append("\"").append(trip.getNotes() != null ? trip.getNotes() : "").append("\",");
                      csv.append("\"").append(trip.isAutoDetected() ? "Auto" : "Manual").append("\"\n");
                      
                      totalMiles += trip.getDistance();
                  }
                  
                  // Summary
                  csv.append("\nSUMMARY\n");
                  csv.append("Total Trips,").append(trips.size()).append("\n");
                  csv.append("Total Miles,").append(String.format("%.2f", totalMiles)).append("\n");
                  csv.append("Business Deduction (IRS $").append(String.format("%.2f", getIrsBusinessRate())).append("/mi),\"$").append(String.format("%.2f", totalMiles * getIrsBusinessRate())).append("\"\n");
                  
                  return csv.toString();
              }
              
              private String generateTXT(List<Trip> trips, Date startDate, Date endDate, String category) {
                  StringBuilder txt = new StringBuilder();
                  SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                  SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                  
                  // Header
                  txt.append("MileTracker Pro - Trip Export\n");
                  txt.append("================================\n\n");
                  txt.append("Export Date Range: ").append(dateFormat.format(startDate))
                     .append(" to ").append(dateFormat.format(endDate)).append("\n");
                  txt.append("Category Filter: ").append(category).append("\n");
                  txt.append("Generated: ").append(dateFormat.format(new Date())).append("\n\n");
                  
                  // Trip details
                  double totalMiles = 0;
                  int tripNumber = 1;
                  
                  for (Trip trip : trips) {
                      Date tripDate = new Date(trip.getStartTime());
                      Date endTime = new Date(trip.getEndTime());
                      
                      txt.append("TRIP #").append(tripNumber++).append("\n");
                      txt.append("--------\n");
                      txt.append("Date: ").append(dateFormat.format(tripDate)).append("\n");
                      txt.append("Time: ").append(timeFormat.format(tripDate))
                         .append(" - ").append(timeFormat.format(endTime)).append("\n");
                      txt.append("From: ").append(trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown").append("\n");
                      txt.append("To: ").append(trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown").append("\n");
                      txt.append("Distance: ").append(String.format("%.2f", trip.getDistance())).append(" miles\n");
                      txt.append("Duration: ").append(trip.getFormattedDuration()).append("\n");
                      txt.append("Category: ").append(trip.getCategory()).append("\n");
                      if (trip.getClientName() != null && !trip.getClientName().isEmpty()) {
                          txt.append("Client: ").append(trip.getClientName()).append("\n");
                      }
                      if (trip.getNotes() != null && !trip.getNotes().isEmpty()) {
                          txt.append("Notes: ").append(trip.getNotes()).append("\n");
                      }
                      txt.append("Type: ").append(trip.isAutoDetected() ? "Auto-detected" : "Manual entry").append("\n\n");
                      
                      totalMiles += trip.getDistance();
                  }
                  
                  // Summary
                  txt.append("SUMMARY\n");
                  txt.append("=======\n");
                  txt.append("Total Trips: ").append(trips.size()).append("\n");
                  txt.append("Total Miles: ").append(String.format("%.2f", totalMiles)).append("\n");
                  txt.append("Business Deduction (IRS $").append(String.format("%.2f", getIrsBusinessRate())).append("/mi): $").append(String.format("%.2f", totalMiles * getIrsBusinessRate())).append("\n");
                  
                  return txt.toString();
              }
              
              private String generatePDF(List<Trip> trips, Date startDate, Date endDate, String category) {
                  try {
                      // Create PDF in memory and save to file
                      SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                      String fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                      if (!category.equals("All Categories")) {
                          fileName += "_" + category.replace(" ", "_");
                      }
                      fileName += ".pdf";
                      
                      File pdfFile = new File(getExternalCacheDir(), fileName);
                      
                      // Create PDF document
                      com.itextpdf.text.Document document = new com.itextpdf.text.Document();
                      com.itextpdf.text.pdf.PdfWriter.getInstance(document, new java.io.FileOutputStream(pdfFile));
                      document.open();
                      
                      // Add title
                      com.itextpdf.text.Font titleFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 18, com.itextpdf.text.Font.BOLD);
                      document.add(new com.itextpdf.text.Paragraph("MileTracker Pro - Trip Export", titleFont));
                      document.add(new com.itextpdf.text.Paragraph(" "));
                      
                      // Add export details
                      SimpleDateFormat displayFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                      document.add(new com.itextpdf.text.Paragraph("Export Date Range: " + displayFormat.format(startDate) + " to " + displayFormat.format(endDate)));
                      document.add(new com.itextpdf.text.Paragraph("Category Filter: " + category));
                      document.add(new com.itextpdf.text.Paragraph("Generated: " + displayFormat.format(new Date())));
                      document.add(new com.itextpdf.text.Paragraph(" "));
                      
                      // Create table
                      com.itextpdf.text.pdf.PdfPTable table = new com.itextpdf.text.pdf.PdfPTable(6);
                      table.setWidthPercentage(100);
                      table.setSpacingBefore(10f);
                      table.setSpacingAfter(10f);
                      
                      // Add headers
                      com.itextpdf.text.Font headerFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 10, com.itextpdf.text.Font.BOLD);
                      table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase("Date", headerFont)));
                      table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase("Start", headerFont)));
                      table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase("End", headerFont)));
                      table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase("Distance", headerFont)));
                      table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase("Category", headerFont)));
                      table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase("Type", headerFont)));
                      
                      // Add data rows
                      com.itextpdf.text.Font dataFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 9);
                      SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                      double totalMiles = 0;
                      
                      for (Trip trip : trips) {
                          Date tripDate = new Date(trip.getStartTime());
                          Date endTime = new Date(trip.getEndTime());
                          
                          table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase(displayFormat.format(tripDate), dataFont)));
                          table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase(timeFormat.format(tripDate), dataFont)));
                          table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase(timeFormat.format(endTime), dataFont)));
                          table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase(String.format("%.2f mi", trip.getDistance()), dataFont)));
                          table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase(trip.getCategory(), dataFont)));
                          table.addCell(new com.itextpdf.text.pdf.PdfPCell(new com.itextpdf.text.Phrase(trip.isAutoDetected() ? "Auto" : "Manual", dataFont)));
                          
                          totalMiles += trip.getDistance();
                      }
                      
                      document.add(table);
                      
                      // Add summary
                      document.add(new com.itextpdf.text.Paragraph(" "));
                      com.itextpdf.text.Font summaryFont = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA, 12, com.itextpdf.text.Font.BOLD);
                      document.add(new com.itextpdf.text.Paragraph("SUMMARY", summaryFont));
                      document.add(new com.itextpdf.text.Paragraph("Total Trips: " + trips.size()));
                      document.add(new com.itextpdf.text.Paragraph("Total Miles: " + String.format("%.2f", totalMiles)));
                      document.add(new com.itextpdf.text.Paragraph("Business Deduction (IRS $" + String.format("%.2f", getIrsBusinessRate()) + "/mi): $" + String.format("%.2f", totalMiles * getIrsBusinessRate())));
                      
                      document.close();
                      
                      return pdfFile.getAbsolutePath();
                  } catch (Exception e) {
                      Log.e(TAG, "Error generating PDF: " + e.getMessage(), e);
                      throw new RuntimeException("PDF generation failed: " + e.getMessage());
                  }
              }
              
              private void startTrip() {
                  // Start trip functionality
                  Toast.makeText(this, "Trip started manually", Toast.LENGTH_SHORT).show();
              }
              
              private void stopTrip() {
                  // Stop trip functionality
                  Toast.makeText(this, "Trip stopped manually", Toast.LENGTH_SHORT).show();
              }
              
              private void updateUI() {
                  // Update status and stats
                  statusText.setText("Auto Detection: ON");
                  
                  List<Trip> trips = tripStorage.getAllTrips();
                  double totalMiles = 0;
                  for (Trip trip : trips) {
                      totalMiles += trip.getDistance();
                  }
                  
                  statsText.setText(String.format("• Total Trips: %d\n• Total Miles: %.2f\n• Business Deduction: $%.2f", 
                      trips.size(), totalMiles, totalMiles * getIrsBusinessRate()));
              }
              
              private void startLocationService() {
                  Intent serviceIntent = new Intent(this, LocationService.class);
                  startService(serviceIntent);
              }
              
              private void startPeriodicRefresh() {
                  Handler handler = new Handler();
                  handler.postDelayed(new Runnable() {
                      @Override
                      public void run() {
                          updateUI();
                          handler.postDelayed(this, 5000); // Update every 5 seconds
                      }
                  }, 5000);
              }
              
              private double getIrsBusinessRate() {
                  SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  return (double) prefs.getFloat(PREF_BUSINESS_RATE, 0.70f);
              }
              
              private double getIrsMedicalRate() {
                  SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  return (double) prefs.getFloat(PREF_MEDICAL_RATE, 0.21f);
              }
              
              private double getIrsCharityRate() {
                  SharedPreferences prefs = getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  return (double) prefs.getFloat(PREF_CHARITY_RATE, 0.14f);
              }
          }
          EOF

      - name: Create models and other classes
        run: |
          # Create placeholder model classes
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/models
          
          # Create Trip.java
          cat > android/app/src/main/java/com/miletrackerpro/app/models/Trip.java << 'EOF'
          package com.miletrackerpro.app.models;
          
          public class Trip {
              private long id;
              private long startTime;
              private long endTime;
              private double distance;
              private String startAddress;
              private String endAddress;
              private String category;
              private String clientName;
              private String notes;
              private boolean autoDetected;
              
              public Trip() {}
              
              public Trip(long startTime, long endTime, double distance, String startAddress, String endAddress) {
                  this.startTime = startTime;
                  this.endTime = endTime;
                  this.distance = distance;
                  this.startAddress = startAddress;
                  this.endAddress = endAddress;
                  this.category = "Unclassified";
                  this.autoDetected = false;
              }
              
              // Getters and setters
              public long getId() { return id; }
              public void setId(long id) { this.id = id; }
              
              public long getStartTime() { return startTime; }
              public void setStartTime(long startTime) { this.startTime = startTime; }
              
              public long getEndTime() { return endTime; }
              public void setEndTime(long endTime) { this.endTime = endTime; }
              
              public double getDistance() { return distance; }
              public void setDistance(double distance) { this.distance = distance; }
              
              public String getStartAddress() { return startAddress; }
              public void setStartAddress(String startAddress) { this.startAddress = startAddress; }
              
              public String getEndAddress() { return endAddress; }
              public void setEndAddress(String endAddress) { this.endAddress = endAddress; }
              
              public String getCategory() { return category; }
              public void setCategory(String category) { this.category = category; }
              
              public String getClientName() { return clientName; }
              public void setClientName(String clientName) { this.clientName = clientName; }
              
              public String getNotes() { return notes; }
              public void setNotes(String notes) { this.notes = notes; }
              
              public boolean isAutoDetected() { return autoDetected; }
              public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }
              
              public String getFormattedDuration() {
                  long duration = endTime - startTime;
                  long minutes = duration / (1000 * 60);
                  long hours = minutes / 60;
                  minutes = minutes % 60;
                  
                  if (hours > 0) {
                      return String.format("%dh %dm", hours, minutes);
                  } else {
                      return String.format("%dm", minutes);
                  }
              }
          }
          EOF
          
          # Create TripStorage.java
          cat > android/app/src/main/java/com/miletrackerpro/app/models/TripStorage.java << 'EOF'
          package com.miletrackerpro.app.models;
          
          import android.content.Context;
          import android.content.SharedPreferences;
          import java.util.ArrayList;
          import java.util.List;
          
          public class TripStorage {
              private Context context;
              private SharedPreferences prefs;
              private List<Trip> trips;
              
              public TripStorage(Context context) {
                  this.context = context;
                  this.prefs = context.getSharedPreferences("trips", Context.MODE_PRIVATE);
                  this.trips = new ArrayList<>();
                  loadTrips();
              }
              
              public void saveTrip(Trip trip) {
                  trips.add(trip);
                  saveTrips();
              }
              
              public List<Trip> getAllTrips() {
                  return new ArrayList<>(trips);
              }
              
              public void deleteTrip(Trip trip) {
                  trips.remove(trip);
                  saveTrips();
              }
              
              private void loadTrips() {
                  // Load trips from SharedPreferences
                  // For now, create some sample data
                  trips.add(new Trip(System.currentTimeMillis() - 3600000, System.currentTimeMillis() - 3000000, 12.5, "Home", "Office"));
                  trips.add(new Trip(System.currentTimeMillis() - 7200000, System.currentTimeMillis() - 6600000, 8.3, "Office", "Client Meeting"));
              }
              
              private void saveTrips() {
                  // Save trips to SharedPreferences
                  SharedPreferences.Editor editor = prefs.edit();
                  editor.putInt("trip_count", trips.size());
                  editor.apply();
              }
          }
          EOF
          
          # Create LocationService.java
          cat > android/app/src/main/java/com/miletrackerpro/app/services/LocationService.java << 'EOF'
          package com.miletrackerpro.app.services;
          
          import android.app.Service;
          import android.content.Intent;
          import android.os.IBinder;
          
          public class LocationService extends Service {
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  return START_STICKY;
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
          }
          EOF
          
          # Create AuthActivity.java
          cat > android/app/src/main/java/com/miletrackerpro/app/auth/AuthActivity.java << 'EOF'
          package com.miletrackerpro.app.auth;
          
          import android.content.Intent;
          import android.os.Bundle;
          import android.widget.Button;
          import android.widget.EditText;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import com.miletrackerpro.app.MainActivity;
          
          public class AuthActivity extends AppCompatActivity {
              private EditText emailField, passwordField;
              private Button loginButton;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  // Simple login layout
                  android.widget.LinearLayout layout = new android.widget.LinearLayout(this);
                  layout.setOrientation(android.widget.LinearLayout.VERTICAL);
                  layout.setPadding(50, 100, 50, 100);
                  
                  android.widget.TextView title = new android.widget.TextView(this);
                  title.setText("MileTracker Pro");
                  title.setTextSize(24);
                  title.setGravity(android.view.Gravity.CENTER);
                  layout.addView(title);
                  
                  emailField = new EditText(this);
                  emailField.setHint("Email");
                  emailField.setInputType(android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
                  layout.addView(emailField);
                  
                  passwordField = new EditText(this);
                  passwordField.setHint("Password");
                  passwordField.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
                  layout.addView(passwordField);
                  
                  loginButton = new Button(this);
                  loginButton.setText("Login");
                  loginButton.setOnClickListener(v -> handleLogin());
                  layout.addView(loginButton);
                  
                  setContentView(layout);
              }
              
              private void handleLogin() {
                  String email = emailField.getText().toString();
                  String password = passwordField.getText().toString();
                  
                  if (email.isEmpty() || password.isEmpty()) {
                      Toast.makeText(this, "Please enter email and password", Toast.LENGTH_SHORT).show();
                      return;
                  }
                  
                  // Simple authentication check
                  if (email.contains("@") && password.length() >= 6) {
                      Intent intent = new Intent(this, MainActivity.class);
                      startActivity(intent);
                      finish();
                  } else {
                      Toast.makeText(this, "Invalid credentials", Toast.LENGTH_SHORT).show();
                  }
              }
          }
          EOF

      - name: Create app icon
        run: |
          # Create a simple app icon (placeholder)
          cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
          <vector android:height="24dp" android:tint="#667eea"
              android:viewportHeight="24" android:viewportWidth="24"
              android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
              <path android:fillColor="@android:color/white" android:pathData="M13.5,0.67s0.74,2.65 0.74,4.8c0,2.06 -1.35,3.73 -3.41,3.73 -2.07,0 -3.63,-1.67 -3.63,-3.73l0.03,-0.36C5.21,7.51 4,10.62 4,14c0,4.42 3.58,8 8,8s8,-3.58 8,-8C20,8.61 17.41,3.8 13.5,0.67zM11.71,19c-1.78,0 -3.22,-1.4 -3.22,-3.14 0,-1.62 1.05,-2.76 2.81,-3.12 1.77,-0.36 3.6,-0.93 3.6,-2.98 0,-0.6 -0.18,-1.16 -0.5,-1.66C16.34,10.97 17,12.4 17,14c0,2.21 -1.79,4 -4,4L11.71,19z"/>
          </vector>
          EOF

      - name: Create keystore
        run: |
          keytool -genkey -v -keystore android/app/miletracker-keystore.jks -keyalg RSA -keysize 2048 -validity 10000 -alias miletracker -storepass miletracker123 -keypass miletracker123 -dname "CN=MileTracker Pro, OU=Mobile, O=MileTracker, L=City, S=State, C=US"

      - name: Make gradlew executable
        run: chmod +x android/gradlew || true

      - name: Build APK
        run: |
          cd android
          ./gradlew assembleRelease --stacktrace --info || gradle assembleRelease --stacktrace --info

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MileTracker-Pro-v${{ github.event.inputs.version_code || '49136' }}
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 30
