name: Build MileTracker Pro APK
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  JAVA_VERSION: 17
  GRADLE_VERSION: 8.3
  ANDROID_SDK_TOOLS: "9477386"
  ANDROID_COMPILE_SDK: 35
  ANDROID_BUILD_TOOLS: "35.0.0"
  ANDROID_SDK_VERSION: 35

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: ${{ env.ANDROID_SDK_VERSION }}
        build-tools: ${{ env.ANDROID_BUILD_TOOLS }}
        
    - name: Create Android project structure
      run: |
        echo "📁 Creating Android project structure..."
        mkdir -p android/app/src/main/java/com/miletrackerpro/app
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/drawable
        mkdir -p android/gradle/wrapper
        echo "✅ Android project structure created"
        
    - name: Create Android manifest
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
            <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
            <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
            <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />

            <application
                android:label="MileTracker Pro"
                android:theme="@style/AppTheme"
                android:requestLegacyExternalStorage="true">
                
                <activity
                    android:name=".MainActivity"
                    android:theme="@style/AppTheme"
                    android:launchMode="singleTop"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <activity
                    android:name=".AuthActivity"
                    android:theme="@style/AppTheme"
                    android:exported="false" />
                
                <service
                    android:name=".services.AutoDetectionService"
                    android:exported="false"
                    android:foregroundServiceType="location" />
                    
                <service
                    android:name=".services.ManualTripService"
                    android:exported="false"
                    android:foregroundServiceType="location" />
                    
                <receiver
                    android:name=".services.BootReceiver"
                    android:exported="true">
                    <intent-filter android:priority="1000">
                        <action android:name="android.intent.action.BOOT_COMPLETED" />
                        <action android:name="android.intent.action.MY_PACKAGE_REPLACED" />
                        <action android:name="android.intent.action.PACKAGE_REPLACED" />
                        <data android:scheme="package" />
                    </intent-filter>
                </receiver>
            </application>
        </manifest>
        EOF
        
    - name: Create Android resources
      run: |
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">#667eea</item>
                <item name="colorPrimaryDark">#764ba2</item>
                <item name="colorAccent">#667eea</item>
                <item name="android:statusBarColor">#667eea</item>
                <item name="android:windowTranslucentStatus">false</item>
                <item name="android:fitsSystemWindows">true</item>
            </style>
        </resources>
        EOF
        
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">MileTracker Pro</string>
        </resources>
        EOF
        
        # Create colors.xml
        cat > android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="colorPrimary">#667eea</color>
            <color name="colorPrimaryDark">#764ba2</color>
            <color name="colorAccent">#667eea</color>
        </resources>
        EOF
        
    - name: Create AuthActivity
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/AuthActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.os.Bundle;
        import android.text.InputType;
        import android.util.Log;
        import android.view.Gravity;
        import android.widget.Button;
        import android.widget.EditText;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.TextView;
        import android.widget.Toast;
        import androidx.appcompat.app.AppCompatActivity;
        import com.miletrackerpro.app.MainActivity;

        public class AuthActivity extends AppCompatActivity {
            private static final String TAG = "AuthActivity";
            private EditText emailInput;
            private EditText passwordInput;
            private Button loginButton;
            private Button registerButton;
            private TextView switchModeText;
            private boolean isLoginMode = true;

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                Log.d(TAG, "AuthActivity onCreate");

                // Check if already authenticated
                SharedPreferences prefs = getSharedPreferences("MileTrackerAuth", MODE_PRIVATE);
                boolean isAuthenticated = prefs.getBoolean("isAuthenticated", false);
                
                if (isAuthenticated) {
                    Log.d(TAG, "User already authenticated, redirecting to MainActivity");
                    startActivity(new Intent(this, MainActivity.class));
                    finish();
                    return;
                }

                setupUI();
            }

            private void setupUI() {
                // Main container
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setPadding(40, 60, 40, 40);
                mainLayout.setBackgroundColor(0xFFf8f9fa);

                // Header
                TextView headerText = new TextView(this);
                headerText.setText("🚗 MileTracker Pro");
                headerText.setTextSize(28);
                headerText.setTextColor(0xFF667eea);
                headerText.setGravity(Gravity.CENTER);
                headerText.setPadding(0, 0, 0, 40);
                mainLayout.addView(headerText);

                // Auth mode title
                TextView authTitle = new TextView(this);
                authTitle.setText("Login to Your Account");
                authTitle.setTextSize(18);
                authTitle.setTextColor(0xFF495057);
                authTitle.setGravity(Gravity.CENTER);
                authTitle.setPadding(0, 0, 0, 30);
                mainLayout.addView(authTitle);

                // Email input
                TextView emailLabel = new TextView(this);
                emailLabel.setText("Email:");
                emailLabel.setTextSize(14);
                emailLabel.setTextColor(0xFF495057);
                emailLabel.setPadding(0, 0, 0, 8);
                mainLayout.addView(emailLabel);

                emailInput = new EditText(this);
                emailInput.setHint("Enter your email");
                emailInput.setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
                emailInput.setPadding(15, 15, 15, 15);
                emailInput.setBackgroundColor(0xFFffffff);
                mainLayout.addView(emailInput);

                // Password input
                TextView passwordLabel = new TextView(this);
                passwordLabel.setText("Password:");
                passwordLabel.setTextSize(14);
                passwordLabel.setTextColor(0xFF495057);
                passwordLabel.setPadding(0, 20, 0, 8);
                mainLayout.addView(passwordLabel);

                passwordInput = new EditText(this);
                passwordInput.setHint("Enter your password");
                passwordInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
                passwordInput.setPadding(15, 15, 15, 15);
                passwordInput.setBackgroundColor(0xFFffffff);
                mainLayout.addView(passwordInput);

                // Login button
                loginButton = new Button(this);
                loginButton.setText("Login");
                loginButton.setTextColor(0xFFffffff);
                loginButton.setBackgroundColor(0xFF667eea);
                loginButton.setPadding(0, 15, 0, 15);
                LinearLayout.LayoutParams loginParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                loginParams.setMargins(0, 30, 0, 15);
                loginButton.setLayoutParams(loginParams);
                loginButton.setOnClickListener(v -> handleLogin());
                mainLayout.addView(loginButton);

                // Register button
                registerButton = new Button(this);
                registerButton.setText("Create Account");
                registerButton.setTextColor(0xFF667eea);
                registerButton.setBackgroundColor(0xFFffffff);
                registerButton.setPadding(0, 15, 0, 15);
                LinearLayout.LayoutParams registerParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                registerParams.setMargins(0, 0, 0, 15);
                registerButton.setLayoutParams(registerParams);
                registerButton.setOnClickListener(v -> handleRegister());
                mainLayout.addView(registerButton);

                // Switch mode text
                switchModeText = new TextView(this);
                switchModeText.setText("Need an account? Register here");
                switchModeText.setTextSize(14);
                switchModeText.setTextColor(0xFF667eea);
                switchModeText.setGravity(Gravity.CENTER);
                switchModeText.setPadding(0, 20, 0, 0);
                switchModeText.setClickable(true);
                switchModeText.setOnClickListener(v -> switchMode());
                mainLayout.addView(switchModeText);

                // Scroll view for smaller screens
                ScrollView scrollView = new ScrollView(this);
                scrollView.addView(mainLayout);
                setContentView(scrollView);
            }

            private void handleLogin() {
                String email = emailInput.getText().toString().trim();
                String password = passwordInput.getText().toString().trim();

                if (email.isEmpty() || password.isEmpty()) {
                    Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
                    return;
                }

                Log.d(TAG, "Login attempt for email: " + email);

                // Simulate login process
                if (isValidEmail(email) && password.length() >= 6) {
                    // Save authentication state
                    SharedPreferences prefs = getSharedPreferences("MileTrackerAuth", MODE_PRIVATE);
                    SharedPreferences.Editor editor = prefs.edit();
                    editor.putBoolean("isAuthenticated", true);
                    editor.putString("userEmail", email);
                    editor.putLong("loginTime", System.currentTimeMillis());
                    editor.apply();

                    Toast.makeText(this, "Welcome back!", Toast.LENGTH_SHORT).show();
                    
                    // Navigate to main activity
                    Intent intent = new Intent(this, MainActivity.class);
                    startActivity(intent);
                    finish();
                } else {
                    Toast.makeText(this, "Invalid email or password (min 6 characters)", Toast.LENGTH_SHORT).show();
                }
            }

            private void handleRegister() {
                String email = emailInput.getText().toString().trim();
                String password = passwordInput.getText().toString().trim();

                if (email.isEmpty() || password.isEmpty()) {
                    Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
                    return;
                }

                Log.d(TAG, "Registration attempt for email: " + email);

                if (isValidEmail(email) && password.length() >= 6) {
                    // Save authentication state
                    SharedPreferences prefs = getSharedPreferences("MileTrackerAuth", MODE_PRIVATE);
                    SharedPreferences.Editor editor = prefs.edit();
                    editor.putBoolean("isAuthenticated", true);
                    editor.putString("userEmail", email);
                    editor.putLong("registrationTime", System.currentTimeMillis());
                    editor.apply();

                    Toast.makeText(this, "Account created successfully!", Toast.LENGTH_SHORT).show();
                    
                    // Navigate to main activity
                    Intent intent = new Intent(this, MainActivity.class);
                    startActivity(intent);
                    finish();
                } else {
                    Toast.makeText(this, "Invalid email or password too short (min 6 characters)", Toast.LENGTH_SHORT).show();
                }
            }

            private void switchMode() {
                isLoginMode = !isLoginMode;
                
                if (isLoginMode) {
                    loginButton.setText("Login");
                    registerButton.setText("Create Account");
                    switchModeText.setText("Need an account? Register here");
                } else {
                    loginButton.setText("Create Account");
                    registerButton.setText("Login");
                    switchModeText.setText("Already have an account? Login here");
                }
            }

            private boolean isValidEmail(String email) {
                return email.contains("@") && email.contains(".");
            }
        }
        EOF
        
    - name: Create Trip storage class
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/Trip.java << 'EOF'
        package com.miletrackerpro.app.storage;

        import java.text.SimpleDateFormat;
        import java.util.Date;
        import java.util.Locale;

        public class Trip {
            private long id;
            private String startAddress;
            private String endAddress;
            private double startLatitude;
            private double startLongitude;
            private double endLatitude;
            private double endLongitude;
            private double distance;
            private long startTime;
            private long endTime;
            private String category;
            private boolean isAutoDetected;
            private String clientName;
            private String notes;
            private String deviceId;
            private long userId;

            public Trip() {
                this.id = System.currentTimeMillis();
                this.startTime = System.currentTimeMillis();
                this.endTime = System.currentTimeMillis();
                this.category = "Personal";
                this.isAutoDetected = false;
            }

            public Trip(String startAddress, String endAddress, double distance, String category) {
                this();
                this.startAddress = startAddress;
                this.endAddress = endAddress;
                this.distance = distance;
                this.category = category;
            }

            // Getters and setters
            public long getId() { return id; }
            public void setId(long id) { this.id = id; }

            public String getStartAddress() { return startAddress; }
            public void setStartAddress(String startAddress) { this.startAddress = startAddress; }

            public String getEndAddress() { return endAddress; }
            public void setEndAddress(String endAddress) { this.endAddress = endAddress; }

            public double getStartLatitude() { return startLatitude; }
            public void setStartLatitude(double startLatitude) { this.startLatitude = startLatitude; }

            public double getStartLongitude() { return startLongitude; }
            public void setStartLongitude(double startLongitude) { this.startLongitude = startLongitude; }

            public double getEndLatitude() { return endLatitude; }
            public void setEndLatitude(double endLatitude) { this.endLatitude = endLatitude; }

            public double getEndLongitude() { return endLongitude; }
            public void setEndLongitude(double endLongitude) { this.endLongitude = endLongitude; }

            public double getDistance() { return distance; }
            public void setDistance(double distance) { this.distance = distance; }

            public long getStartTime() { return startTime; }
            public void setStartTime(long startTime) { this.startTime = startTime; }

            public long getEndTime() { return endTime; }
            public void setEndTime(long endTime) { this.endTime = endTime; }

            public String getCategory() { return category; }
            public void setCategory(String category) { this.category = category; }

            public boolean isAutoDetected() { return isAutoDetected; }
            public void setAutoDetected(boolean autoDetected) { isAutoDetected = autoDetected; }

            public String getClientName() { return clientName; }
            public void setClientName(String clientName) { this.clientName = clientName; }

            public String getNotes() { return notes; }
            public void setNotes(String notes) { this.notes = notes; }

            public String getDeviceId() { return deviceId; }
            public void setDeviceId(String deviceId) { this.deviceId = deviceId; }

            public long getUserId() { return userId; }
            public void setUserId(long userId) { this.userId = userId; }

            // Utility methods
            public String getFormattedDate() {
                SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                return sdf.format(new Date(startTime));
            }

            public String getFormattedDuration() {
                long durationMs = endTime - startTime;
                long minutes = durationMs / (1000 * 60);
                long hours = minutes / 60;
                minutes = minutes % 60;
                
                if (hours > 0) {
                    return String.format("%dh %dm", hours, minutes);
                } else {
                    return String.format("%dm", minutes);
                }
            }

            public String getFormattedTime() {
                SimpleDateFormat sdf = new SimpleDateFormat("h:mm a", Locale.getDefault());
                return sdf.format(new Date(startTime));
            }

            @Override
            public String toString() {
                return String.format(
                    "Trip: %s to %s (%.2f mi, %s)",
                    startAddress != null ? startAddress : "Unknown",
                    endAddress != null ? endAddress : "Unknown",
                    distance,
                    category
                );
            }
        }
        EOF
        
    - name: Create TripStorage class
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
        package com.miletrackerpro.app.storage;

        import android.content.Context;
        import android.content.SharedPreferences;
        import android.util.Log;
        import org.json.JSONArray;
        import org.json.JSONException;
        import org.json.JSONObject;
        import java.util.ArrayList;
        import java.util.List;

        public class TripStorage {
            private static final String TAG = "TripStorage";
            private static final String PREFS_NAME = "MileTrackerTrips";
            private static final String TRIPS_KEY = "trips";
            private static final String API_SYNC_KEY = "apiSyncEnabled";
            
            private SharedPreferences prefs;
            private Context context;

            public TripStorage(Context context) {
                this.context = context;
                this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
            }

            public void saveTrip(Trip trip) {
                try {
                    List<Trip> trips = getAllTrips();
                    trips.add(trip);
                    saveAllTrips(trips);
                    Log.d(TAG, "Trip saved: " + trip.toString());
                } catch (Exception e) {
                    Log.e(TAG, "Error saving trip: " + e.getMessage(), e);
                }
            }

            public List<Trip> getAllTrips() {
                List<Trip> trips = new ArrayList<>();
                try {
                    String tripsJson = prefs.getString(TRIPS_KEY, "[]");
                    JSONArray jsonArray = new JSONArray(tripsJson);
                    
                    for (int i = 0; i < jsonArray.length(); i++) {
                        JSONObject tripJson = jsonArray.getJSONObject(i);
                        Trip trip = jsonToTrip(tripJson);
                        trips.add(trip);
                    }
                    
                    Log.d(TAG, "Loaded " + trips.size() + " trips from storage");
                } catch (JSONException e) {
                    Log.e(TAG, "Error loading trips: " + e.getMessage(), e);
                }
                return trips;
            }

            private void saveAllTrips(List<Trip> trips) {
                try {
                    JSONArray jsonArray = new JSONArray();
                    for (Trip trip : trips) {
                        JSONObject tripJson = tripToJson(trip);
                        jsonArray.put(tripJson);
                    }
                    
                    SharedPreferences.Editor editor = prefs.edit();
                    editor.putString(TRIPS_KEY, jsonArray.toString());
                    editor.apply();
                    
                    Log.d(TAG, "Saved " + trips.size() + " trips to storage");
                } catch (JSONException e) {
                    Log.e(TAG, "Error saving trips: " + e.getMessage(), e);
                }
            }

            public void deleteTrip(long tripId) {
                try {
                    List<Trip> trips = getAllTrips();
                    trips.removeIf(trip -> trip.getId() == tripId);
                    saveAllTrips(trips);
                    Log.d(TAG, "Trip deleted: " + tripId);
                } catch (Exception e) {
                    Log.e(TAG, "Error deleting trip: " + e.getMessage(), e);
                }
            }

            public void updateTrip(Trip updatedTrip) {
                try {
                    List<Trip> trips = getAllTrips();
                    for (int i = 0; i < trips.size(); i++) {
                        if (trips.get(i).getId() == updatedTrip.getId()) {
                            trips.set(i, updatedTrip);
                            break;
                        }
                    }
                    saveAllTrips(trips);
                    Log.d(TAG, "Trip updated: " + updatedTrip.getId());
                } catch (Exception e) {
                    Log.e(TAG, "Error updating trip: " + e.getMessage(), e);
                }
            }

            public void mergeUserTrips(List<String> tripIds) {
                try {
                    List<Trip> allTrips = getAllTrips();
                    List<Trip> tripsToMerge = new ArrayList<>();
                    
                    // Find trips to merge
                    for (String tripId : tripIds) {
                        for (Trip trip : allTrips) {
                            if (String.valueOf(trip.getId()).equals(tripId)) {
                                tripsToMerge.add(trip);
                                break;
                            }
                        }
                    }
                    
                    if (tripsToMerge.size() < 2) {
                        Log.w(TAG, "Need at least 2 trips to merge");
                        return;
                    }
                    
                    // Create merged trip
                    Trip mergedTrip = createMergedTrip(tripsToMerge);
                    
                    // Remove original trips
                    for (Trip trip : tripsToMerge) {
                        allTrips.removeIf(t -> t.getId() == trip.getId());
                    }
                    
                    // Add merged trip
                    allTrips.add(mergedTrip);
                    saveAllTrips(allTrips);
                    
                    Log.d(TAG, "Merged " + tripsToMerge.size() + " trips into one");
                } catch (Exception e) {
                    Log.e(TAG, "Error merging trips: " + e.getMessage(), e);
                }
            }

            private Trip createMergedTrip(List<Trip> trips) {
                Trip merged = new Trip();
                merged.setId(System.currentTimeMillis());
                
                // Use first trip's start info
                Trip firstTrip = trips.get(0);
                merged.setStartAddress(firstTrip.getStartAddress());
                merged.setStartLatitude(firstTrip.getStartLatitude());
                merged.setStartLongitude(firstTrip.getStartLongitude());
                merged.setStartTime(firstTrip.getStartTime());
                
                // Use last trip's end info
                Trip lastTrip = trips.get(trips.size() - 1);
                merged.setEndAddress(lastTrip.getEndAddress());
                merged.setEndLatitude(lastTrip.getEndLatitude());
                merged.setEndLongitude(lastTrip.getEndLongitude());
                merged.setEndTime(lastTrip.getEndTime());
                
                // Sum distances
                double totalDistance = 0;
                for (Trip trip : trips) {
                    totalDistance += trip.getDistance();
                }
                merged.setDistance(totalDistance);
                
                // Use most common category
                String category = "Business"; // Default
                merged.setCategory(category);
                
                // Mark as auto-detected if any trip was
                boolean isAuto = trips.stream().anyMatch(Trip::isAutoDetected);
                merged.setAutoDetected(isAuto);
                
                return merged;
            }

            public boolean isApiSyncEnabled() {
                return prefs.getBoolean(API_SYNC_KEY, false);
            }

            public void setApiSyncEnabled(boolean enabled) {
                SharedPreferences.Editor editor = prefs.edit();
                editor.putBoolean(API_SYNC_KEY, enabled);
                editor.apply();
                Log.d(TAG, "API sync " + (enabled ? "enabled" : "disabled"));
            }

            private JSONObject tripToJson(Trip trip) throws JSONException {
                JSONObject json = new JSONObject();
                json.put("id", trip.getId());
                json.put("startAddress", trip.getStartAddress());
                json.put("endAddress", trip.getEndAddress());
                json.put("startLatitude", trip.getStartLatitude());
                json.put("startLongitude", trip.getStartLongitude());
                json.put("endLatitude", trip.getEndLatitude());
                json.put("endLongitude", trip.getEndLongitude());
                json.put("distance", trip.getDistance());
                json.put("startTime", trip.getStartTime());
                json.put("endTime", trip.getEndTime());
                json.put("category", trip.getCategory());
                json.put("isAutoDetected", trip.isAutoDetected());
                json.put("clientName", trip.getClientName());
                json.put("notes", trip.getNotes());
                json.put("deviceId", trip.getDeviceId());
                json.put("userId", trip.getUserId());
                return json;
            }

            private Trip jsonToTrip(JSONObject json) throws JSONException {
                Trip trip = new Trip();
                trip.setId(json.getLong("id"));
                trip.setStartAddress(json.optString("startAddress"));
                trip.setEndAddress(json.optString("endAddress"));
                trip.setStartLatitude(json.optDouble("startLatitude", 0.0));
                trip.setStartLongitude(json.optDouble("startLongitude", 0.0));
                trip.setEndLatitude(json.optDouble("endLatitude", 0.0));
                trip.setEndLongitude(json.optDouble("endLongitude", 0.0));
                trip.setDistance(json.optDouble("distance", 0.0));
                trip.setStartTime(json.optLong("startTime", System.currentTimeMillis()));
                trip.setEndTime(json.optLong("endTime", System.currentTimeMillis()));
                trip.setCategory(json.optString("category", "Personal"));
                trip.setAutoDetected(json.optBoolean("isAutoDetected", false));
                trip.setClientName(json.optString("clientName"));
                trip.setNotes(json.optString("notes"));
                trip.setDeviceId(json.optString("deviceId"));
                trip.setUserId(json.optLong("userId", 0));
                return trip;
            }
        }
        EOF
        
    - name: Create MainActivity with FIXED trip display
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.Manifest;
        import android.app.AlertDialog;
        import android.content.Context;
        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.content.pm.PackageManager;
        import android.graphics.Color;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.os.Build;
        import android.os.Bundle;
        import android.os.Handler;
        import android.text.Editable;
        import android.text.InputType;
        import android.text.TextWatcher;
        import android.util.Log;
        import android.view.Gravity;
        import android.view.View;
        import android.widget.AdapterView;
        import android.widget.ArrayAdapter;
        import android.widget.Button;
        import android.widget.CheckBox;
        import android.widget.EditText;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.SeekBar;
        import android.widget.Spinner;
        import android.widget.Switch;
        import android.widget.TextView;
        import android.widget.Toast;
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import com.miletrackerpro.app.services.AutoDetectionService;
        import com.miletrackerpro.app.services.ManualTripService;
        import com.miletrackerpro.app.storage.Trip;
        import com.miletrackerpro.app.storage.TripStorage;
        import java.text.SimpleDateFormat;
        import java.util.ArrayList;
        import java.util.Calendar;
        import java.util.Date;
        import java.util.List;
        import java.util.Locale;

        public class MainActivity extends AppCompatActivity implements LocationListener {
            private static final String TAG = "MainActivity";
            private static final int LOCATION_PERMISSION_REQUEST = 1001;
            private static final int BACKGROUND_LOCATION_PERMISSION_REQUEST = 1002;

            // Main layout
            private LinearLayout mainContentLayout;
            private LinearLayout bottomTabLayout;

            // Tab content
            private LinearLayout dashboardContent;
            private LinearLayout tripsContent;
            private Button homeTabButton;
            private Button tripsTabButton;
            private String currentTab = "home";

            // Dashboard components
            private TextView statusText;
            private TextView locationText;
            private TextView speedText;
            private Button startTripButton;
            private Button stopTripButton;
            private Switch autoDetectionSwitch;
            private TextView monthlyStatsText;
            private LinearLayout recentTripsLayout;

            // Trips components
            private ScrollView allTripsScroll;
            private LinearLayout allTripsLayout;
            private EditText searchInput;
            private Spinner sortSpinner;
            private Spinner categoryFilterSpinner;
            private boolean mergeMode = false;
            private List<String> selectedTripIds = new ArrayList<>();

            // Services and storage
            private TripStorage tripStorage;
            private LocationManager locationManager;
            private Handler uiHandler;

            // Trip tracking
            private boolean isTrackingTrip = false;
            private Trip currentTrip;
            private List<Location> tripLocations = new ArrayList<>();
            private long lastLocationTime = 0;

            // Auto detection
            private boolean isAutoDetectionEnabled = false;
            private List<Double> recentSpeeds = new ArrayList<>();
            private boolean isInTrip = false;
            private int stationaryCount = 0;
            private int movingCount = 0;

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                Log.d(TAG, "MainActivity onCreate");

                // Check authentication
                SharedPreferences prefs = getSharedPreferences("MileTrackerAuth", MODE_PRIVATE);
                if (!prefs.getBoolean("isAuthenticated", false)) {
                    startActivity(new Intent(this, AuthActivity.class));
                    finish();
                    return;
                }

                // Initialize components
                tripStorage = new TripStorage(this);
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                uiHandler = new Handler();

                // Add sample trips if none exist
                addSampleTripsIfNeeded();

                setupUI();
                requestLocationPermissions();
                
                // Load saved auto-detection preference
                loadAutoDetectionPreference();
            }

            private void addSampleTripsIfNeeded() {
                List<Trip> existingTrips = tripStorage.getAllTrips();
                if (existingTrips.isEmpty()) {
                    Log.d(TAG, "Adding sample trips");
                    
                    // Sample trips for testing
                    Trip trip1 = new Trip("Home - 123 Main St", "Office - 456 Business Ave", 12.5, "Business");
                    trip1.setClientName("ABC Corp");
                    trip1.setNotes("Morning commute to client meeting");
                    trip1.setStartTime(System.currentTimeMillis() - 86400000); // Yesterday
                    trip1.setEndTime(trip1.getStartTime() + 1800000); // 30 minutes
                    
                    Trip trip2 = new Trip("Office - 456 Business Ave", "Church - 789 Faith Rd", 8.3, "Charity");
                    trip2.setNotes("Volunteer work at community center");
                    trip2.setStartTime(System.currentTimeMillis() - 172800000); // 2 days ago
                    trip2.setEndTime(trip2.getStartTime() + 1200000); // 20 minutes
                    
                    Trip trip3 = new Trip("Home - 123 Main St", "Doctor - 321 Health St", 15.2, "Medical");
                    trip3.setNotes("Annual checkup appointment");
                    trip3.setStartTime(System.currentTimeMillis() - 259200000); // 3 days ago
                    trip3.setEndTime(trip3.getStartTime() + 2400000); // 40 minutes
                    
                    Trip trip4 = new Trip("Home - 123 Main St", "Grocery Store - 654 Shop Blvd", 4.1, "Personal");
                    trip4.setNotes("Weekly grocery shopping");
                    trip4.setStartTime(System.currentTimeMillis() - 345600000); // 4 days ago
                    trip4.setEndTime(trip4.getStartTime() + 900000); // 15 minutes
                    
                    Trip trip5 = new Trip("Office - 456 Business Ave", "Client Site - 987 Enterprise Way", 22.7, "Business");
                    trip5.setClientName("XYZ Industries");
                    trip5.setNotes("On-site consulting for system upgrade");
                    trip5.setStartTime(System.currentTimeMillis() - 432000000); // 5 days ago
                    trip5.setEndTime(trip5.getStartTime() + 3600000); // 1 hour
                    
                    tripStorage.saveTrip(trip1);
                    tripStorage.saveTrip(trip2);
                    tripStorage.saveTrip(trip3);
                    tripStorage.saveTrip(trip4);
                    tripStorage.saveTrip(trip5);
                }
            }

            private void setupUI() {
                // Main container
                mainContentLayout = new LinearLayout(this);
                mainContentLayout.setOrientation(LinearLayout.VERTICAL);
                mainContentLayout.setBackgroundColor(0xFFf8f9fa);

                // Header
                LinearLayout headerLayout = new LinearLayout(this);
                headerLayout.setOrientation(LinearLayout.HORIZONTAL);
                headerLayout.setPadding(20, 40, 20, 20);
                headerLayout.setBackgroundColor(0xFF667eea);
                headerLayout.setGravity(Gravity.CENTER_VERTICAL);

                TextView headerTitle = new TextView(this);
                headerTitle.setText("MileTracker Pro");
                headerTitle.setTextSize(22);
                headerTitle.setTextColor(0xFFffffff);
                headerTitle.setGravity(Gravity.CENTER_VERTICAL);
                
                LinearLayout.LayoutParams titleParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                headerTitle.setLayoutParams(titleParams);
                headerLayout.addView(headerTitle);

                mainContentLayout.addView(headerLayout);

                // Create content areas
                createDashboardContent();
                createTripsContent();

                // Create bottom tabs
                createBottomTabs();

                // Set initial tab
                showTab("home");

                setContentView(mainContentLayout);
            }

            private void createDashboardContent() {
                dashboardContent = new LinearLayout(this);
                dashboardContent.setOrientation(LinearLayout.VERTICAL);
                dashboardContent.setPadding(20, 20, 20, 20);

                // Status section
                LinearLayout statusSection = new LinearLayout(this);
                statusSection.setOrientation(LinearLayout.VERTICAL);
                statusSection.setPadding(15, 15, 15, 15);
                statusSection.setBackgroundColor(0xFFffffff);

                TextView statusTitle = new TextView(this);
                statusTitle.setText("🚗 Trip Status");
                statusTitle.setTextSize(18);
                statusTitle.setTextColor(0xFF495057);
                statusTitle.setPadding(0, 0, 0, 10);
                statusSection.addView(statusTitle);

                statusText = new TextView(this);
                statusText.setText("Ready to track");
                statusText.setTextSize(14);
                statusText.setTextColor(0xFF6c757d);
                statusSection.addView(statusText);

                locationText = new TextView(this);
                locationText.setText("Location: Not available");
                locationText.setTextSize(12);
                locationText.setTextColor(0xFF6c757d);
                statusSection.addView(locationText);

                speedText = new TextView(this);
                speedText.setText("Speed: 0.0 mph");
                speedText.setTextSize(12);
                speedText.setTextColor(0xFF6c757d);
                statusSection.addView(speedText);

                dashboardContent.addView(statusSection);

                // Control buttons
                LinearLayout buttonLayout = new LinearLayout(this);
                buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
                buttonLayout.setPadding(0, 20, 0, 20);

                startTripButton = new Button(this);
                startTripButton.setText("🚗 START TRIP");
                startTripButton.setTextColor(0xFFffffff);
                startTripButton.setBackgroundColor(0xFF28a745);
                startTripButton.setOnClickListener(v -> startManualTrip());
                
                LinearLayout.LayoutParams startParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                startParams.setMargins(0, 0, 10, 0);
                startTripButton.setLayoutParams(startParams);
                buttonLayout.addView(startTripButton);

                stopTripButton = new Button(this);
                stopTripButton.setText("🛑 STOP TRIP");
                stopTripButton.setTextColor(0xFFffffff);
                stopTripButton.setBackgroundColor(0xFFdc3545);
                stopTripButton.setEnabled(false);
                stopTripButton.setOnClickListener(v -> stopManualTrip());
                
                LinearLayout.LayoutParams stopParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                stopParams.setMargins(10, 0, 0, 0);
                stopTripButton.setLayoutParams(stopParams);
                buttonLayout.addView(stopTripButton);

                dashboardContent.addView(buttonLayout);

                // Auto detection section
                LinearLayout autoSection = new LinearLayout(this);
                autoSection.setOrientation(LinearLayout.VERTICAL);
                autoSection.setPadding(15, 15, 15, 15);
                autoSection.setBackgroundColor(0xFFffffff);

                LinearLayout autoHeader = new LinearLayout(this);
                autoHeader.setOrientation(LinearLayout.HORIZONTAL);
                autoHeader.setGravity(Gravity.CENTER_VERTICAL);

                TextView autoTitle = new TextView(this);
                autoTitle.setText("🤖 Auto Detection");
                autoTitle.setTextSize(16);
                autoTitle.setTextColor(0xFF495057);
                
                LinearLayout.LayoutParams autoTitleParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                autoTitle.setLayoutParams(autoTitleParams);
                autoHeader.addView(autoTitle);

                autoDetectionSwitch = new Switch(this);
                autoDetectionSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> toggleAutoDetection(isChecked));
                autoHeader.addView(autoDetectionSwitch);

                autoSection.addView(autoHeader);

                TextView autoDescription = new TextView(this);
                autoDescription.setText("Automatically detect trips when driving");
                autoDescription.setTextSize(12);
                autoDescription.setTextColor(0xFF6c757d);
                autoDescription.setPadding(0, 5, 0, 0);
                autoSection.addView(autoDescription);

                dashboardContent.addView(autoSection);

                // Monthly stats section
                LinearLayout statsSection = new LinearLayout(this);
                statsSection.setOrientation(LinearLayout.VERTICAL);
                statsSection.setPadding(15, 15, 15, 15);
                statsSection.setBackgroundColor(0xFFffffff);

                TextView statsTitle = new TextView(this);
                statsTitle.setText("📊 This Month");
                statsTitle.setTextSize(16);
                statsTitle.setTextColor(0xFF495057);
                statsTitle.setPadding(0, 0, 0, 10);
                statsSection.addView(statsTitle);

                monthlyStatsText = new TextView(this);
                updateMonthlyStats();
                monthlyStatsText.setTextSize(14);
                monthlyStatsText.setTextColor(0xFF6c757d);
                statsSection.addView(monthlyStatsText);

                dashboardContent.addView(statsSection);

                // Recent trips section
                LinearLayout recentSection = new LinearLayout(this);
                recentSection.setOrientation(LinearLayout.VERTICAL);
                recentSection.setPadding(15, 15, 15, 15);
                recentSection.setBackgroundColor(0xFFffffff);

                TextView recentTitle = new TextView(this);
                recentTitle.setText("🕐 Recent Trips");
                recentTitle.setTextSize(16);
                recentTitle.setTextColor(0xFF495057);
                recentTitle.setPadding(0, 0, 0, 10);
                recentSection.addView(recentTitle);

                recentTripsLayout = new LinearLayout(this);
                recentTripsLayout.setOrientation(LinearLayout.VERTICAL);
                recentSection.addView(recentTripsLayout);

                dashboardContent.addView(recentSection);

                // Add trip button
                Button addTripButton = new Button(this);
                addTripButton.setText("➕ Add Manual Trip");
                addTripButton.setTextColor(0xFF667eea);
                addTripButton.setBackgroundColor(0xFFffffff);
                addTripButton.setOnClickListener(v -> showAddTripDialog());
                
                LinearLayout.LayoutParams addTripParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                addTripParams.setMargins(0, 20, 0, 0);
                addTripButton.setLayoutParams(addTripParams);
                dashboardContent.addView(addTripButton);

                updateRecentTrips();
            }

            private void createTripsContent() {
                tripsContent = new LinearLayout(this);
                tripsContent.setOrientation(LinearLayout.VERTICAL);
                tripsContent.setPadding(20, 20, 20, 20);

                // Header with merge button
                LinearLayout headerRow = new LinearLayout(this);
                headerRow.setOrientation(LinearLayout.HORIZONTAL);
                headerRow.setGravity(Gravity.CENTER_VERTICAL);
                headerRow.setPadding(0, 0, 0, 15);

                TextView allTripsTitle = new TextView(this);
                allTripsTitle.setText("📋 All Trips");
                allTripsTitle.setTextSize(18);
                allTripsTitle.setTextColor(0xFF495057);
                
                LinearLayout.LayoutParams titleParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                allTripsTitle.setLayoutParams(titleParams);
                headerRow.addView(allTripsTitle);

                Button mergeButton = new Button(this);
                mergeButton.setText("🔄 MERGE");
                mergeButton.setTextColor(0xFFffffff);
                mergeButton.setBackgroundColor(0xFF667eea);
                mergeButton.setOnClickListener(v -> toggleMergeMode());
                headerRow.addView(mergeButton);

                tripsContent.addView(headerRow);

                // Search and filter section
                LinearLayout searchSection = new LinearLayout(this);
                searchSection.setOrientation(LinearLayout.VERTICAL);
                searchSection.setPadding(10, 10, 10, 15);
                searchSection.setBackgroundColor(0xFFffffff);

                // Search input
                searchInput = new EditText(this);
                searchInput.setHint("🔍 Search trips...");
                searchInput.setPadding(15, 10, 15, 10);
                searchInput.setBackgroundColor(0xFFf8f9fa);
                searchSection.addView(searchInput);

                // Filter row
                LinearLayout filterRow = new LinearLayout(this);
                filterRow.setOrientation(LinearLayout.HORIZONTAL);
                filterRow.setPadding(0, 10, 0, 0);

                // Sort dropdown
                TextView sortLabel = new TextView(this);
                sortLabel.setText("Sort:");
                sortLabel.setTextSize(14);
                sortLabel.setTextColor(0xFF495057);
                sortLabel.setPadding(0, 0, 10, 0);
                sortLabel.setGravity(Gravity.CENTER_VERTICAL);
                filterRow.addView(sortLabel);

                sortSpinner = new Spinner(this);
                String[] sortOptions = {"Newest First", "Oldest First", "Distance High-Low", "Distance Low-High"};
                ArrayAdapter<String> sortAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, sortOptions);
                sortAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                sortSpinner.setAdapter(sortAdapter);
                
                LinearLayout.LayoutParams sortParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                sortParams.setMargins(0, 0, 20, 0);
                sortSpinner.setLayoutParams(sortParams);
                filterRow.addView(sortSpinner);

                // Category filter
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category:");
                categoryLabel.setTextSize(14);
                categoryLabel.setTextColor(0xFF495057);
                categoryLabel.setPadding(0, 0, 10, 0);
                categoryLabel.setGravity(Gravity.CENTER_VERTICAL);
                filterRow.addView(categoryLabel);

                categoryFilterSpinner = new Spinner(this);
                String[] categoryOptions = {"All Categories", "Business", "Personal", "Medical", "Charity"};
                ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categoryOptions);
                categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categoryFilterSpinner.setAdapter(categoryAdapter);
                
                LinearLayout.LayoutParams categoryParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                categoryFilterSpinner.setLayoutParams(categoryParams);
                filterRow.addView(categoryFilterSpinner);

                searchSection.addView(filterRow);
                tripsContent.addView(searchSection);

                // CRITICAL FIX: Add the missing event listeners
                searchInput.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
                    
                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {}
                    
                    @Override
                    public void afterTextChanged(Editable s) {
                        String searchQuery = s.toString();
                        String sortOption = sortSpinner.getSelectedItem().toString();
                        String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                        updateAllTripsWithFilters(searchQuery, sortOption, categoryFilter);
                    }
                });
                
                sortSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                        String searchQuery = searchInput.getText().toString();
                        String sortOption = sortSpinner.getSelectedItem().toString();
                        String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                        updateAllTripsWithFilters(searchQuery, sortOption, categoryFilter);
                    }
                    
                    @Override
                    public void onNothingSelected(AdapterView<?> parent) {}
                });
                
                categoryFilterSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                        String searchQuery = searchInput.getText().toString();
                        String sortOption = sortSpinner.getSelectedItem().toString();
                        String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                        updateAllTripsWithFilters(searchQuery, sortOption, categoryFilter);
                    }
                    
                    @Override
                    public void onNothingSelected(AdapterView<?> parent) {}
                });

                allTripsScroll = new ScrollView(this);
                allTripsLayout = new LinearLayout(this);
                allTripsLayout.setOrientation(LinearLayout.VERTICAL);
                allTripsScroll.addView(allTripsLayout);

                LinearLayout.LayoutParams allTripsParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    0,
                    1.0f
                );
                allTripsScroll.setLayoutParams(allTripsParams);
                tripsContent.addView(allTripsScroll);

                // Initialize with default filters
                updateAllTripsWithFilters("", "Newest First", "All Categories");
            }

            private void updateAllTripsWithFilters(String searchQuery, String sortOption, String categoryFilter) {
                try {
                    allTripsLayout.removeAllViews();
                    selectedTripIds.clear(); // Clear selection when refreshing
                    List<Trip> trips = tripStorage.getAllTrips();
                    
                    Log.d(TAG, "updateAllTripsWithFilters() called - found " + trips.size() + " trips, search: '" + searchQuery + "', sort: '" + sortOption + "', category: '" + categoryFilter + "'");

                    // Apply search filter
                    if (!searchQuery.isEmpty()) {
                        List<Trip> filteredTrips = new ArrayList<>();
                        for (Trip trip : trips) {
                            String query = searchQuery.toLowerCase();
                            if (trip.getStartAddress().toLowerCase().contains(query) ||
                                trip.getEndAddress().toLowerCase().contains(query) ||
                                (trip.getClientName() != null && trip.getClientName().toLowerCase().contains(query)) ||
                                (trip.getNotes() != null && trip.getNotes().toLowerCase().contains(query))) {
                                filteredTrips.add(trip);
                            }
                        }
                        trips = filteredTrips;
                    }
                    
                    // Apply category filter
                    if (!"All Categories".equals(categoryFilter)) {
                        List<Trip> filteredTrips = new ArrayList<>();
                        for (Trip trip : trips) {
                            if (categoryFilter.equals(trip.getCategory())) {
                                filteredTrips.add(trip);
                            }
                        }
                        trips = filteredTrips;
                    }
                    
                    // Apply sorting
                    switch (sortOption) {
                        case "Newest First":
                            trips.sort((a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
                            break;
                        case "Oldest First":
                            trips.sort((a, b) -> Long.compare(a.getStartTime(), b.getStartTime()));
                            break;
                        case "Distance High-Low":
                            trips.sort((a, b) -> Double.compare(b.getDistance(), a.getDistance()));
                            break;
                        case "Distance Low-High":
                            trips.sort((a, b) -> Double.compare(a.getDistance(), b.getDistance()));
                            break;
                    }

                    if (trips.isEmpty()) {
                        TextView noTripsText = new TextView(this);
                        if (searchQuery.isEmpty() && "All Categories".equals(categoryFilter)) {
                            noTripsText.setText("No trips recorded yet.\n\n✅ NEW FEATURE v4.9.68:\n• USER MERGE FUNCTIONALITY\n• STABLE DEVICE IDENTIFICATION\n• USER-BASED TRIP LINKING\n• Downloads ALL your trips (not device-specific)\n\nTurn ON API sync to see ALL your historic trips!");
                        } else {
                            noTripsText.setText("🔍 No trips match your search\n\nTry different keywords or change the category filter");
                        }
                        noTripsText.setTextSize(14);
                        noTripsText.setTextColor(0xFF6C757D);
                        noTripsText.setPadding(15, 30, 15, 15);
                        allTripsLayout.addView(noTripsText);
                    } else {
                        // Add result count header
                        TextView tripCount = new TextView(this);
                        tripCount.setText(String.format("📊 Showing %d trip%s", trips.size(), trips.size() == 1 ? "" : "s"));
                        tripCount.setTextSize(12);
                        tripCount.setTextColor(0xFF6C757D);
                        tripCount.setPadding(15, 5, 15, 10);
                        allTripsLayout.addView(tripCount);
                        
                        // CRITICAL FIX: Add debug logging and force UI refresh
                        Log.d(TAG, "About to add " + trips.size() + " trip cards to layout");
                        
                        for (Trip trip : trips) {
                            Log.d(TAG, "Adding trip card: " + trip.getStartAddress() + " to " + trip.getEndAddress());
                            addTripCard(allTripsLayout, trip, false);
                        }
                        
                        // Force UI refresh
                        allTripsLayout.invalidate();
                        allTripsScroll.invalidate();
                        
                        Log.d(TAG, "Trip cards added successfully. Layout child count: " + allTripsLayout.getChildCount());
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error updating all trips: " + e.getMessage(), e);
                    Toast.makeText(this, "Error loading trips: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                }
            }

            private void addTripCard(LinearLayout parentLayout, Trip trip, boolean compact) {
                try {
                    Log.d(TAG, "Creating trip card for: " + trip.getStartAddress() + " to " + trip.getEndAddress());
                    
                    // Create container for checkbox + trip info
                    LinearLayout cardContainer = new LinearLayout(this);
                    cardContainer.setOrientation(LinearLayout.HORIZONTAL);
                    cardContainer.setPadding(5, 5, 5, 5);
                    cardContainer.setBackgroundColor(0xFFffffff);
                    
                    // Add checkbox in merge mode
                    if (mergeMode && !compact) {
                        CheckBox checkbox = new CheckBox(this);
                        checkbox.setChecked(selectedTripIds.contains(String.valueOf(trip.getId())));
                        checkbox.setOnCheckedChangeListener((buttonView, isChecked) -> {
                            String tripId = String.valueOf(trip.getId());
                            if (isChecked) {
                                if (!selectedTripIds.contains(tripId)) {
                                    selectedTripIds.add(tripId);
                                }
                            } else {
                                selectedTripIds.remove(tripId);
                            }
                            
                            // Update merge button text
                            Button mergeButton = (Button) ((LinearLayout) tripsContent.getChildAt(0)).getChildAt(1);
                            mergeButton.setText("✅ Execute Merge (" + selectedTripIds.size() + ")");
                        });
                        
                        LinearLayout.LayoutParams checkboxParams = new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.WRAP_CONTENT, 
                            LinearLayout.LayoutParams.WRAP_CONTENT
                        );
                        checkbox.setLayoutParams(checkboxParams);
                        cardContainer.addView(checkbox);
                    }
                    
                    TextView tripView = new TextView(this);
                    String tripType = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                    String apiStatus = tripStorage.isApiSyncEnabled() ? "📤 API" : "💾 Local";

                    if (compact) {
                        String clientInfo = trip.getClientName() != null ? " • " + trip.getClientName() : "";
                        tripView.setText(String.format(
                            "%s %s • %.1f mi • %s%s",
                            tripType,
                            apiStatus,
                            trip.getDistance(),
                            trip.getCategory(),
                            clientInfo
                        ));
                        tripView.setTextSize(11);
                    } else {
                        StringBuilder tripDetails = new StringBuilder();
                        tripDetails.append(String.format(
                            "%s %s • %s\n%.2f miles • %s • %s\nFrom: %s\nTo: %s",
                            tripType,
                            apiStatus,
                            trip.getFormattedDate(),
                            trip.getDistance(),
                            trip.getFormattedDuration(),
                            trip.getCategory(),
                            trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown",
                            trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown"
                        ));

                        // ADD CLIENT AND NOTES TO TRIP DISPLAY
                        if (trip.getClientName() != null && !trip.getClientName().trim().isEmpty()) {
                            tripDetails.append("\nClient: ").append(trip.getClientName());
                        }
                        if (trip.getNotes() != null && !trip.getNotes().trim().isEmpty()) {
                            tripDetails.append("\nNotes: ").append(trip.getNotes());
                        }

                        tripView.setText(tripDetails.toString());
                        tripView.setTextSize(12);
                    }

                    tripView.setTextColor(0xFF495057);
                    tripView.setPadding(10, 10, 10, 10);
                    tripView.setBackgroundColor(0xFFffffff);

                    // Set layout params for trip view within container
                    LinearLayout.LayoutParams tripParams = new LinearLayout.LayoutParams(
                        0, 
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        1.0f
                    );
                    tripView.setLayoutParams(tripParams);
                    cardContainer.addView(tripView);

                    // Set layout params for the container
                    LinearLayout.LayoutParams containerParams = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                    );
                    containerParams.setMargins(0, 0, 0, 5);
                    cardContainer.setLayoutParams(containerParams);

                    // Add the card container to parent layout
                    parentLayout.addView(cardContainer);
                    
                    Log.d(TAG, "Trip card added successfully. Parent layout child count: " + parentLayout.getChildCount());

                    // ENHANCED: Add Edit Button for each trip (non-compact view only)
                    if (!compact) {
                        // Icon-only action row positioned within the card
                        LinearLayout iconRow = new LinearLayout(this);
                        iconRow.setOrientation(LinearLayout.HORIZONTAL);
                        iconRow.setGravity(Gravity.END); // Right-align icons
                        
                        LinearLayout.LayoutParams iconRowParams = new LinearLayout.LayoutParams(
                            LinearLayout.LayoutParams.MATCH_PARENT, 
                            LinearLayout.LayoutParams.WRAP_CONTENT
                        );
                        iconRowParams.setMargins(0, 8, 10, 8);
                        iconRow.setLayoutParams(iconRowParams);
                        
                        // Edit icon (TextView for true icon-only look)
                        TextView editIcon = new TextView(this);
                        editIcon.setText("✏️");
                        editIcon.setTextSize(20);
                        editIcon.setPadding(12, 8, 12, 8);
                        editIcon.setBackgroundResource(android.R.drawable.btn_default);
                        editIcon.setBackgroundColor(0xFF10B981); // Green
                        editIcon.setTextColor(0xFFFFFFFF);
                        editIcon.setGravity(Gravity.CENTER);
                        editIcon.setClickable(true);
                        editIcon.setOnClickListener(v -> showEditTripDialog(trip));
                        
                        LinearLayout.LayoutParams editParams = new LinearLayout.LayoutParams(
                            48, 48
                        );
                        editParams.setMargins(4, 0, 4, 0);
                        iconRow.addView(editIcon, editParams);
                        
                        // Split icon (TextView for true icon-only look)
                        TextView splitIcon = new TextView(this);
                        splitIcon.setText("✂️");
                        splitIcon.setTextSize(20);
                        splitIcon.setPadding(12, 8, 12, 8);
                        splitIcon.setBackgroundResource(android.R.drawable.btn_default);
                        splitIcon.setBackgroundColor(0xFF8B5CF6); // Purple
                        splitIcon.setTextColor(0xFFFFFFFF);
                        splitIcon.setGravity(Gravity.CENTER);
                        splitIcon.setClickable(true);
                        splitIcon.setOnClickListener(v -> showSplitTripDialog(trip));
                        
                        LinearLayout.LayoutParams splitParams = new LinearLayout.LayoutParams(
                            48, 48
                        );
                        splitParams.setMargins(4, 0, 4, 0);
                        iconRow.addView(splitIcon, splitParams);
                        
                        // Delete icon (TextView for true icon-only look)
                        TextView deleteIcon = new TextView(this);
                        deleteIcon.setText("🗑️");
                        deleteIcon.setTextSize(20);
                        deleteIcon.setPadding(12, 8, 12, 8);
                        deleteIcon.setBackgroundResource(android.R.drawable.btn_default);
                        deleteIcon.setBackgroundColor(0xFFDC2626); // Red
                        deleteIcon.setTextColor(0xFFFFFFFF);
                        deleteIcon.setGravity(Gravity.CENTER);
                        deleteIcon.setClickable(true);
                        deleteIcon.setOnClickListener(v -> showDeleteTripDialog(trip));
                        
                        LinearLayout.LayoutParams deleteParams = new LinearLayout.LayoutParams(
                            48, 48
                        );
                        deleteParams.setMargins(4, 0, 4, 0);
                        iconRow.addView(deleteIcon, deleteParams);
                        
                        parentLayout.addView(iconRow);
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error adding trip card: " + e.getMessage(), e);
                    Toast.makeText(this, "Error displaying trip: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                }
            }

            private void showEditTripDialog(Trip trip) {
                // Implementation for editing trips
                Toast.makeText(this, "Edit trip: " + trip.getStartAddress(), Toast.LENGTH_SHORT).show();
            }

            private void showSplitTripDialog(Trip trip) {
                // Implementation for splitting trips
                Toast.makeText(this, "Split trip: " + trip.getStartAddress(), Toast.LENGTH_SHORT).show();
            }

            private void showDeleteTripDialog(Trip trip) {
                new AlertDialog.Builder(this)
                    .setTitle("Delete Trip")
                    .setMessage("Are you sure you want to delete this trip?")
                    .setPositiveButton("Delete", (dialog, which) -> {
                        tripStorage.deleteTrip(trip.getId());
                        updateAllTripsWithFilters(
                            searchInput.getText().toString(),
                            sortSpinner.getSelectedItem().toString(),
                            categoryFilterSpinner.getSelectedItem().toString()
                        );
                        updateRecentTrips();
                        updateMonthlyStats();
                    })
                    .setNegativeButton("Cancel", null)
                    .show();
            }

            private void createBottomTabs() {
                bottomTabLayout = new LinearLayout(this);
                bottomTabLayout.setOrientation(LinearLayout.HORIZONTAL);
                bottomTabLayout.setBackgroundColor(0xFFffffff);
                bottomTabLayout.setPadding(0, 10, 0, 10);

                homeTabButton = new Button(this);
                homeTabButton.setText("🏠 HOME");
                homeTabButton.setTextColor(0xFF667eea);
                homeTabButton.setBackgroundColor(0xFFe3f2fd);
                homeTabButton.setOnClickListener(v -> showTab("home"));
                
                LinearLayout.LayoutParams homeParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                homeParams.setMargins(10, 0, 5, 0);
                homeTabButton.setLayoutParams(homeParams);
                bottomTabLayout.addView(homeTabButton);

                tripsTabButton = new Button(this);
                tripsTabButton.setText("📋 TRIPS");
                tripsTabButton.setTextColor(0xFF6c757d);
                tripsTabButton.setBackgroundColor(0xFFf8f9fa);
                tripsTabButton.setOnClickListener(v -> showTab("trips"));
                
                LinearLayout.LayoutParams tripsParams = new LinearLayout.LayoutParams(
                    0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                );
                tripsParams.setMargins(5, 0, 10, 0);
                tripsTabButton.setLayoutParams(tripsParams);
                bottomTabLayout.addView(tripsTabButton);

                mainContentLayout.addView(bottomTabLayout);
            }

            private void showTab(String tabName) {
                currentTab = tabName;
                
                // Remove current content
                if (dashboardContent.getParent() != null) {
                    mainContentLayout.removeView(dashboardContent);
                }
                if (tripsContent.getParent() != null) {
                    mainContentLayout.removeView(tripsContent);
                }
                
                // Add new content
                LinearLayout.LayoutParams contentParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    0,
                    1.0f
                );
                
                if ("home".equals(tabName)) {
                    dashboardContent.setLayoutParams(contentParams);
                    mainContentLayout.addView(dashboardContent, 1);
                    homeTabButton.setTextColor(0xFF667eea);
                    homeTabButton.setBackgroundColor(0xFFe3f2fd);
                    tripsTabButton.setTextColor(0xFF6c757d);
                    tripsTabButton.setBackgroundColor(0xFFf8f9fa);
                } else if ("trips".equals(tabName)) {
                    tripsContent.setLayoutParams(contentParams);
                    mainContentLayout.addView(tripsContent, 1);
                    tripsTabButton.setTextColor(0xFF667eea);
                    tripsTabButton.setBackgroundColor(0xFFe3f2fd);
                    homeTabButton.setTextColor(0xFF6c757d);
                    homeTabButton.setBackgroundColor(0xFFf8f9fa);
                    
                    // Refresh trips when switching to trips tab
                    updateAllTripsWithFilters(
                        searchInput.getText().toString(),
                        sortSpinner.getSelectedItem().toString(),
                        categoryFilterSpinner.getSelectedItem().toString()
                    );
                }
            }

            private void toggleMergeMode() {
                mergeMode = !mergeMode;
                selectedTripIds.clear();
                
                Button mergeButton = (Button) ((LinearLayout) tripsContent.getChildAt(0)).getChildAt(1);
                if (mergeMode) {
                    mergeButton.setText("✅ Execute Merge (0)");
                    mergeButton.setBackgroundColor(0xFF28a745);
                    mergeButton.setOnClickListener(v -> executeTripseMerge());
                } else {
                    mergeButton.setText("🔄 MERGE");
                    mergeButton.setBackgroundColor(0xFF667eea);
                    mergeButton.setOnClickListener(v -> toggleMergeMode());
                }
                
                // Refresh trips display
                updateAllTripsWithFilters(
                    searchInput.getText().toString(),
                    sortSpinner.getSelectedItem().toString(),
                    categoryFilterSpinner.getSelectedItem().toString()
                );
            }

            private void executeTripseMerge() {
                if (selectedTripIds.size() < 2) {
                    Toast.makeText(this, "Select at least 2 trips to merge", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                tripStorage.mergeUserTrips(selectedTripIds);
                Toast.makeText(this, "Trips merged successfully", Toast.LENGTH_SHORT).show();
                
                // Exit merge mode and refresh
                toggleMergeMode();
                updateRecentTrips();
                updateMonthlyStats();
            }

            private void showAddTripDialog() {
                Toast.makeText(this, "Add trip dialog would open here", Toast.LENGTH_SHORT).show();
            }

            private void updateRecentTrips() {
                recentTripsLayout.removeAllViews();
                List<Trip> trips = tripStorage.getAllTrips();
                
                // Sort by date and take first 3
                trips.sort((a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
                
                int count = Math.min(3, trips.size());
                for (int i = 0; i < count; i++) {
                    addTripCard(recentTripsLayout, trips.get(i), true);
                }
                
                if (trips.isEmpty()) {
                    TextView noTripsText = new TextView(this);
                    noTripsText.setText("No recent trips");
                    noTripsText.setTextSize(12);
                    noTripsText.setTextColor(0xFF6c757d);
                    recentTripsLayout.addView(noTripsText);
                }
            }

            private void updateMonthlyStats() {
                List<Trip> trips = tripStorage.getAllTrips();
                Calendar calendar = Calendar.getInstance();
                int currentMonth = calendar.get(Calendar.MONTH);
                int currentYear = calendar.get(Calendar.YEAR);
                
                int tripCount = 0;
                double totalMiles = 0.0;
                double businessMiles = 0.0;
                double medicalMiles = 0.0;
                double charityMiles = 0.0;
                
                for (Trip trip : trips) {
                    calendar.setTimeInMillis(trip.getStartTime());
                    if (calendar.get(Calendar.MONTH) == currentMonth && 
                        calendar.get(Calendar.YEAR) == currentYear) {
                        tripCount++;
                        totalMiles += trip.getDistance();
                        
                        switch (trip.getCategory()) {
                            case "Business":
                                businessMiles += trip.getDistance();
                                break;
                            case "Medical":
                                medicalMiles += trip.getDistance();
                                break;
                            case "Charity":
                                charityMiles += trip.getDistance();
                                break;
                        }
                    }
                }
                
                // Calculate IRS deductions (2025 rates)
                double businessDeduction = businessMiles * 0.70;
                double medicalDeduction = medicalMiles * 0.21;
                double charityDeduction = charityMiles * 0.14;
                double totalDeduction = businessDeduction + medicalDeduction + charityDeduction;
                
                String monthName = new SimpleDateFormat("MMMM", Locale.getDefault()).format(new Date());
                monthlyStatsText.setText(String.format(
                    "%s 2025\n%d trips • %.1f miles\n💰 Tax Deduction: $%.2f\n(Business: $%.2f • Medical: $%.2f • Charity: $%.2f)",
                    monthName, tripCount, totalMiles, totalDeduction,
                    businessDeduction, medicalDeduction, charityDeduction
                ));
            }

            private void requestLocationPermissions() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                    != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, 
                        new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 
                        LOCATION_PERMISSION_REQUEST);
                } else {
                    startLocationUpdates();
                }
            }

            private void startLocationUpdates() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                    == PackageManager.PERMISSION_GRANTED) {
                    try {
                        locationManager.requestLocationUpdates(
                            LocationManager.GPS_PROVIDER, 
                            5000, 
                            5, 
                            this
                        );
                        Log.d(TAG, "Location updates started");
                    } catch (SecurityException e) {
                        Log.e(TAG, "Security exception starting location updates: " + e.getMessage());
                    }
                }
            }

            private void loadAutoDetectionPreference() {
                SharedPreferences prefs = getSharedPreferences("MileTrackerPrefs", MODE_PRIVATE);
                boolean savedAutoDetection = prefs.getBoolean("autoDetectionEnabled", false);
                autoDetectionSwitch.setChecked(savedAutoDetection);
                if (savedAutoDetection) {
                    toggleAutoDetection(true);
                }
            }

            private void toggleAutoDetection(boolean enabled) {
                isAutoDetectionEnabled = enabled;
                
                // Save preference
                SharedPreferences prefs = getSharedPreferences("MileTrackerPrefs", MODE_PRIVATE);
                SharedPreferences.Editor editor = prefs.edit();
                editor.putBoolean("autoDetectionEnabled", enabled);
                editor.apply();
                
                if (enabled) {
                    statusText.setText("🤖 Auto detection enabled - Monitoring for movement");
                    Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                    startService(serviceIntent);
                } else {
                    statusText.setText("⏸️ Auto detection disabled");
                    Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                    stopService(serviceIntent);
                }
                
                Log.d(TAG, "Auto detection " + (enabled ? "enabled" : "disabled"));
            }

            private void startManualTrip() {
                if (isTrackingTrip) {
                    Toast.makeText(this, "Trip already in progress", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                isTrackingTrip = true;
                currentTrip = new Trip();
                currentTrip.setStartTime(System.currentTimeMillis());
                currentTrip.setAutoDetected(false);
                tripLocations.clear();
                
                startTripButton.setEnabled(false);
                stopTripButton.setEnabled(true);
                statusText.setText("🚗 Recording trip...");
                
                // Start manual trip service
                Intent serviceIntent = new Intent(this, ManualTripService.class);
                startService(serviceIntent);
                
                Toast.makeText(this, "Trip started", Toast.LENGTH_SHORT).show();
                Log.d(TAG, "Manual trip started");
            }

            private void stopManualTrip() {
                if (!isTrackingTrip) {
                    Toast.makeText(this, "No trip in progress", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                isTrackingTrip = false;
                currentTrip.setEndTime(System.currentTimeMillis());
                
                // Calculate distance from locations
                double distance = calculateTripDistance();
                currentTrip.setDistance(distance);
                
                // Set addresses
                if (!tripLocations.isEmpty()) {
                    Location start = tripLocations.get(0);
                    Location end = tripLocations.get(tripLocations.size() - 1);
                    currentTrip.setStartAddress(String.format("%.4f, %.4f", start.getLatitude(), start.getLongitude()));
                    currentTrip.setEndAddress(String.format("%.4f, %.4f", end.getLatitude(), end.getLongitude()));
                }
                
                // Save trip
                tripStorage.saveTrip(currentTrip);
                
                startTripButton.setEnabled(true);
                stopTripButton.setEnabled(false);
                statusText.setText("✅ Trip saved: " + String.format("%.2f miles", distance));
                
                // Stop manual trip service
                Intent serviceIntent = new Intent(this, ManualTripService.class);
                stopService(serviceIntent);
                
                updateRecentTrips();
                updateMonthlyStats();
                
                Toast.makeText(this, "Trip saved: " + String.format("%.2f miles", distance), Toast.LENGTH_SHORT).show();
                Log.d(TAG, "Manual trip stopped and saved");
            }

            private double calculateTripDistance() {
                if (tripLocations.size() < 2) {
                    return 0.0;
                }
                
                double totalDistance = 0.0;
                for (int i = 1; i < tripLocations.size(); i++) {
                    Location prev = tripLocations.get(i - 1);
                    Location curr = tripLocations.get(i);
                    totalDistance += prev.distanceTo(curr) * 0.000621371; // Convert meters to miles
                }
                
                return totalDistance;
            }

            @Override
            public void onLocationChanged(Location location) {
                if (location != null) {
                    locationText.setText(String.format("Location: %.4f, %.4f", 
                        location.getLatitude(), location.getLongitude()));
                    
                    // Calculate speed
                    float speed = location.getSpeed() * 2.237f; // Convert m/s to mph
                    speedText.setText(String.format("Speed: %.1f mph", speed));
                    
                    // Add to trip if tracking
                    if (isTrackingTrip) {
                        tripLocations.add(location);
                        Log.d(TAG, "Added location to trip: " + location.getLatitude() + ", " + location.getLongitude());
                    }
                    
                    // Auto detection logic
                    if (isAutoDetectionEnabled) {
                        processAutoDetection(speed, location);
                    }
                    
                    lastLocationTime = System.currentTimeMillis();
                }
            }

            private void processAutoDetection(float speed, Location location) {
                // Add current speed to recent speeds
                recentSpeeds.add((double) speed);
                if (recentSpeeds.size() > 5) {
                    recentSpeeds.remove(0);
                }
                
                // Calculate average speed
                double avgSpeed = recentSpeeds.stream().mapToDouble(Double::doubleValue).average().orElse(0.0);
                
                if (!isInTrip && avgSpeed > 8.0 && recentSpeeds.size() >= 3) {
                    // Start trip
                    movingCount++;
                    stationaryCount = 0;
                    
                    if (movingCount >= 3) {
                        startAutoTrip(location);
                    }
                } else if (isInTrip && avgSpeed < 3.0) {
                    // Potentially end trip
                    stationaryCount++;
                    movingCount = 0;
                    
                    if (stationaryCount >= 4) {
                        endAutoTrip(location);
                    }
                }
            }

            private void startAutoTrip(Location location) {
                isInTrip = true;
                currentTrip = new Trip();
                currentTrip.setStartTime(System.currentTimeMillis());
                currentTrip.setAutoDetected(true);
                currentTrip.setStartLatitude(location.getLatitude());
                currentTrip.setStartLongitude(location.getLongitude());
                currentTrip.setStartAddress(String.format("%.4f, %.4f", location.getLatitude(), location.getLongitude()));
                tripLocations.clear();
                tripLocations.add(location);
                
                statusText.setText("🤖 Auto trip started");
                Log.d(TAG, "Auto trip started at " + location.getLatitude() + ", " + location.getLongitude());
            }

            private void endAutoTrip(Location location) {
                if (currentTrip == null) return;
                
                isInTrip = false;
                currentTrip.setEndTime(System.currentTimeMillis());
                currentTrip.setEndLatitude(location.getLatitude());
                currentTrip.setEndLongitude(location.getLongitude());
                currentTrip.setEndAddress(String.format("%.4f, %.4f", location.getLatitude(), location.getLongitude()));
                
                // Calculate distance
                double distance = calculateTripDistance();
                currentTrip.setDistance(distance);
                
                // Only save trips over 0.5 miles
                if (distance > 0.5) {
                    tripStorage.saveTrip(currentTrip);
                    statusText.setText("✅ Auto trip saved: " + String.format("%.2f miles", distance));
                    
                    updateRecentTrips();
                    updateMonthlyStats();
                    
                    Log.d(TAG, "Auto trip saved: " + distance + " miles");
                } else {
                    statusText.setText("🤖 Auto detection - Monitoring for movement");
                    Log.d(TAG, "Auto trip discarded (too short): " + distance + " miles");
                }
                
                // Reset counters
                movingCount = 0;
                stationaryCount = 0;
                recentSpeeds.clear();
            }

            @Override
            public void onProviderEnabled(String provider) {
                Log.d(TAG, "Location provider enabled: " + provider);
            }

            @Override
            public void onProviderDisabled(String provider) {
                Log.d(TAG, "Location provider disabled: " + provider);
            }

            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {
                Log.d(TAG, "Location provider status changed: " + provider + " status: " + status);
            }

            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                
                if (requestCode == LOCATION_PERMISSION_REQUEST) {
                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                        startLocationUpdates();
                        
                        // Request background location permission for Android 10+
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                            if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) 
                                != PackageManager.PERMISSION_GRANTED) {
                                ActivityCompat.requestPermissions(this, 
                                    new String[]{Manifest.permission.ACCESS_BACKGROUND_LOCATION}, 
                                    BACKGROUND_LOCATION_PERMISSION_REQUEST);
                            }
                        }
                    } else {
                        Toast.makeText(this, "Location permission is required for trip tracking", Toast.LENGTH_LONG).show();
                    }
                }
            }
        }
        EOF
        
    - name: Create AutoDetectionService stub
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
        cat > android/app/src/main/java/com/miletrackerpro/app/services/AutoDetectionService.java << 'EOF'
        package com.miletrackerpro.app.services;

        import android.app.Service;
        import android.content.Intent;
        import android.os.IBinder;
        import android.util.Log;

        public class AutoDetectionService extends Service {
            private static final String TAG = "AutoDetectionService";

            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }

            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                Log.d(TAG, "AutoDetectionService started");
                return START_STICKY;
            }

            @Override
            public void onDestroy() {
                Log.d(TAG, "AutoDetectionService destroyed");
                super.onDestroy();
            }
        }
        EOF
        
    - name: Create ManualTripService stub
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/services/ManualTripService.java << 'EOF'
        package com.miletrackerpro.app.services;

        import android.app.Service;
        import android.content.Intent;
        import android.os.IBinder;
        import android.util.Log;

        public class ManualTripService extends Service {
            private static final String TAG = "ManualTripService";

            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }

            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                Log.d(TAG, "ManualTripService started");
                return START_STICKY;
            }

            @Override
            public void onDestroy() {
                Log.d(TAG, "ManualTripService destroyed");
                super.onDestroy();
            }
        }
        EOF
        
    - name: Create BootReceiver stub  
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/services/BootReceiver.java << 'EOF'
        package com.miletrackerpro.app.services;

        import android.content.BroadcastReceiver;
        import android.content.Context;
        import android.content.Intent;
        import android.util.Log;

        public class BootReceiver extends BroadcastReceiver {
            private static final String TAG = "BootReceiver";

            @Override
            public void onReceive(Context context, Intent intent) {
                Log.d(TAG, "Boot completed, starting services");
                // Start auto detection service if needed
            }
        }
        EOF
        
    - name: Create Gradle wrapper
      run: |
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.3-bin.zip
        networkTimeout=10000
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
    - name: Create root build.gradle
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            ext {
                compileSdkVersion = 35
                targetSdkVersion = 35
                minSdkVersion = 21
                buildToolsVersion = "35.0.0"
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.3.1'
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url "https://jitpack.io" }
            }
        }

        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
    - name: Create app-level build.gradle
      run: |
        cat > android/app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'

        android {
            namespace 'com.miletrackerpro.app'
            compileSdk 35
            buildToolsVersion "35.0.0"

            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdkVersion 21
                targetSdkVersion 35
                versionCode 1
                versionName "1.0"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libjsc.so'
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.core:core:1.12.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'com.google.android.material:material:1.11.0'
            implementation 'com.google.android.gms:play-services-location:21.0.1'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF
        
    - name: Create settings.gradle
      run: |
        cat > android/settings.gradle << 'EOF'
        rootProject.name = 'MileTrackerPro'
        include ':app'
        EOF
        
    - name: Create gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx4096m -XX:MaxMetaspaceSize=512m
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.parallel=true
        org.gradle.configureondemand=true
        org.gradle.caching=true
        EOF
        
    - name: Create proguard rules
      run: |
        cat > android/app/proguard-rules.pro << 'EOF'
        # Add project specific ProGuard rules here.
        -keep class com.miletrackerpro.app.** { *; }
        -dontwarn com.miletrackerpro.app.**
        EOF
        
    - name: Make gradlew executable
      run: |
        # Create gradlew script
        cat > android/gradlew << 'EOF'
        #!/bin/sh
        ##############################################################################
        # Gradle start up script for UN*X
        ##############################################################################

        # Resolve links: $0 may be a link
        PRG="$0"
        # Need this for relative symlinks.
        while [ -h "$PRG" ] ; do
            ls=`ls -ld "$PRG"`
            link=`expr "$ls" : '.*-> \(.*\)$'`
            if expr "$link" : '/.*' > /dev/null; then
                PRG="$link"
            else
                PRG=`dirname "$PRG"`"/$link"
            fi
        done
        SAVED="`pwd`"
        cd "`dirname \"$PRG\"`/" >/dev/null
        APP_HOME="`pwd -P`"
        cd "$SAVED" >/dev/null

        APP_NAME="Gradle"
        APP_BASE_NAME=`basename "$0"`

        # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

        # Use the maximum available, or set MAX_FD != -1 to use that value.
        MAX_FD="maximum"

        warn () {
            echo "$*"
        }

        die () {
            echo
            echo "$*"
            echo
            exit 1
        }

        # OS specific support (must be 'true' or 'false').
        cygwin=false
        msys=false
        darwin=false
        nonstop=false
        case "`uname`" in
          CYGWIN* )
            cygwin=true
            ;;
          Darwin* )
            darwin=true
            ;;
          MINGW* )
            msys=true
            ;;
          NONSTOP* )
            nonstop=true
            ;;
        esac

        CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

        # Determine the Java command to use to start the JVM.
        if [ -n "$JAVA_HOME" ] ; then
            if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                # IBM's JDK on AIX uses strange locations for the executables
                JAVACMD="$JAVA_HOME/jre/sh/java"
            else
                JAVACMD="$JAVA_HOME/bin/java"
            fi
            if [ ! -x "$JAVACMD" ] ; then
                die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
            fi
        else
            JAVACMD="java"
            which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

        Please set the JAVA_HOME variable in your environment to match the
        location of your Java installation."
        fi

        # Increase the maximum file descriptors if we can.
        if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
            MAX_FD_LIMIT=`ulimit -H -n`
            if [ $? -eq 0 ] ; then
                if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                    MAX_FD="$MAX_FD_LIMIT"
                fi
                ulimit -n $MAX_FD
                if [ $? -ne 0 ] ; then
                    warn "Could not set maximum file descriptor limit: $MAX_FD"
                fi
            else
                warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
            fi
        fi

        # For Darwin, add options to specify how the application appears in the dock
        if [ "$darwin" = "true" ]; then
            GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
        fi

        # For Cygwin or MSYS, switch paths to Windows format before running java
        if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
            APP_HOME=`cygpath --path --mixed "$APP_HOME"`
            CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
            
            JAVACMD=`cygpath --unix "$JAVACMD"`

            # We build the pattern for arguments to be converted via cygpath
            ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
            SEP=""
            for dir in $ROOTDIRSRAW ; do
                ROOTDIRS="$ROOTDIRS$SEP$dir"
                SEP="|"
            done
            OURCYGPATTERN="(^($ROOTDIRS))"
            # Add a user-defined pattern to the cygpath arguments
            if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
            fi
            # Now convert the arguments - kludge to limit ourselves to /bin/sh
            i=0
            for arg in "$@" ; do
                CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

                if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                    eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                else
                    eval `echo args$i`="\"$arg\""
                fi
                i=`expr $i + 1`
            done
            case $i in
                0) set -- ;;
                1) set -- "$args0" ;;
                2) set -- "$args0" "$args1" ;;
                3) set -- "$args0" "$args1" "$args2" ;;
                4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
            esac
        fi

        # Escape application args
        save () {
            for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
            echo " "
        }
        APP_ARGS=`save "$@"`

        # Collect all arguments for the java command
        eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

        exec "$JAVACMD" "$@"
        EOF
        
        chmod +x android/gradlew
        
    - name: Download Gradle Wrapper JAR
      run: |
        cd android
        mkdir -p gradle/wrapper
        curl -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.3.0/gradle/wrapper/gradle-wrapper.jar
        
    - name: Build Android APK
      run: |
        cd android
        echo "🔥 Starting Android build process..."
        echo "📱 Building MileTracker Pro APK with FIXED trip display..."
        
        # Clean and build
        ./gradlew clean
        ./gradlew assembleRelease --no-daemon --stacktrace
        
        echo "✅ Build completed successfully!"
        
    - name: Sign APK
      run: |
        cd android
        echo "🔐 Signing APK..."
        
        # Create keystore
        keytool -genkey -v -keystore release-key.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 \
          -dname "CN=MileTracker Pro, OU=Development, O=MileTracker, L=City, S=State, C=US" \
          -storepass android -keypass android
        
        # Sign APK
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore \
          -storepass android -keypass android \
          app/build/outputs/apk/release/app-release-unsigned.apk miletracker
        
        # Align APK
        zipalign -v 4 app/build/outputs/apk/release/app-release-unsigned.apk \
          app/build/outputs/apk/release/MileTracker-Pro-Fixed-Display.apk
        
        echo "✅ APK signed and aligned successfully!"
        
    - name: Verify APK
      run: |
        cd android
        echo "🔍 Verifying APK..."
        
        # Check if APK exists and get size
        if [ -f "app/build/outputs/apk/release/MileTracker-Pro-Fixed-Display.apk" ]; then
          APK_SIZE=$(stat -c%s "app/build/outputs/apk/release/MileTracker-Pro-Fixed-Display.apk")
          echo "✅ APK created successfully: ${APK_SIZE} bytes"
          
          # Verify signature
          jarsigner -verify -verbose -certs app/build/outputs/apk/release/MileTracker-Pro-Fixed-Display.apk
          
          # Show APK info
          aapt dump badging app/build/outputs/apk/release/MileTracker-Pro-Fixed-Display.apk | head -3
        else
          echo "❌ APK not found!"
          exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: MileTracker-Pro-Fixed-Display-APK
        path: android/app/build/outputs/apk/release/MileTracker-Pro-Fixed-Display.apk
        retention-days: 30
        
    - name: Upload build logs
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: build-logs
        path: |
          android/app/build/outputs/logs/
          android/build/outputs/logs/
        retention-days: 7
