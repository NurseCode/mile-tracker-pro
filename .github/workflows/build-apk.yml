name: Build Simple Login Test APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code (integer)'
        required: true
        default: '105'
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Create Android project structure
        run: |
          mkdir -p android-app/src/main/java/com/miletrackerpro/app
          mkdir -p android-app/src/main/res/layout
          mkdir -p android-app/src/main/res/values

      - name: Create AndroidManifest.xml
        run: |
          cat > android-app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.miletrackerpro.app">
              
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              
              <application
                  android:allowBackup="true"
                  android:icon="@android:drawable/ic_menu_mylocation"
                  android:label="Login Test"
                  android:theme="@android:style/Theme.Material.Light">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

      - name: Create build.gradle (Module)
        run: |
          cat > android-app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 35

              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 35
                  versionCode ${{ github.event.inputs.version_code }}
                  versionName "1.0.0"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.android.material:material:1.10.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.code.gson:gson:2.10.1'
          }
          EOF

      - name: Create settings.gradle
        run: |
          cat > android-app/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerLoginTest'
          EOF

      - name: Create build.gradle (Project)
        run: |
          cat > android-app/build.gradle.root << 'EOF'
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:8.1.0'
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF
          mv android-app/build.gradle.root android-app/build.gradle.project

      - name: Create gradle.properties
        run: |
          cat > android-app/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048M
          EOF

      - name: Create Simple Login Test MainActivity.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;

          import android.app.Activity;
          import android.os.Bundle;
          import android.os.AsyncTask;
          import android.util.Log;
          import android.widget.*;
          import android.view.View;
          import android.graphics.Color;
          import java.net.HttpURLConnection;
          import java.net.URL;
          import java.io.OutputStream;
          import java.io.InputStream;
          import java.io.BufferedReader;
          import java.io.InputStreamReader;
          import java.nio.charset.StandardCharsets;
          import com.google.gson.Gson;
          import com.google.gson.JsonObject;

          public class MainActivity extends Activity {
              private static final String TAG = "LoginTest";
              private static final String API_BASE_URL = "https://mileage-tracker-codenurse.replit.app";
              
              private EditText emailInput;
              private EditText passwordInput;
              private Button loginButton;
              private TextView statusText;
              private TextView resultText;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(40, 40, 40, 40);
                  mainLayout.setBackgroundColor(Color.parseColor("#F5F5F5"));

                  // Header
                  TextView headerText = new TextView(this);
                  headerText.setText("Login Test");
                  headerText.setTextSize(28);
                  headerText.setTextColor(Color.parseColor("#2E7D32"));
                  headerText.setPadding(0, 0, 0, 40);
                  mainLayout.addView(headerText);

                  // Email Input
                  TextView emailLabel = new TextView(this);
                  emailLabel.setText("Email:");
                  emailLabel.setTextSize(16);
                  emailLabel.setTextColor(Color.parseColor("#333333"));
                  mainLayout.addView(emailLabel);

                  emailInput = new EditText(this);
                  emailInput.setInputType(android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
                  emailInput.setHint("Enter email");
                  emailInput.setText("pcates@catesconsultinggroup.com");
                  emailInput.setPadding(20, 20, 20, 20);
                  emailInput.setBackgroundColor(Color.WHITE);
                  LinearLayout.LayoutParams emailParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  emailParams.setMargins(0, 10, 0, 20);
                  emailInput.setLayoutParams(emailParams);
                  mainLayout.addView(emailInput);

                  // Password Input
                  TextView passwordLabel = new TextView(this);
                  passwordLabel.setText("Password:");
                  passwordLabel.setTextSize(16);
                  passwordLabel.setTextColor(Color.parseColor("#333333"));
                  mainLayout.addView(passwordLabel);

                  passwordInput = new EditText(this);
                  passwordInput.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
                  passwordInput.setHint("Enter password");
                  passwordInput.setText("password123");
                  passwordInput.setPadding(20, 20, 20, 20);
                  passwordInput.setBackgroundColor(Color.WHITE);
                  LinearLayout.LayoutParams passwordParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  passwordParams.setMargins(0, 10, 0, 30);
                  passwordInput.setLayoutParams(passwordParams);
                  mainLayout.addView(passwordInput);

                  // Login Button
                  loginButton = new Button(this);
                  loginButton.setText("Test Login");
                  loginButton.setTextSize(18);
                  loginButton.setBackgroundColor(Color.parseColor("#4CAF50"));
                  loginButton.setTextColor(Color.WHITE);
                  loginButton.setPadding(20, 20, 20, 20);
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  buttonParams.setMargins(0, 0, 0, 20);
                  loginButton.setLayoutParams(buttonParams);
                  loginButton.setOnClickListener(new View.OnClickListener() {
                      @Override
                      public void onClick(View v) {
                          performLogin();
                      }
                  });
                  mainLayout.addView(loginButton);

                  // Status Text
                  statusText = new TextView(this);
                  statusText.setText("Ready to test login");
                  statusText.setTextSize(16);
                  statusText.setTextColor(Color.parseColor("#666666"));
                  statusText.setPadding(20, 20, 20, 20);
                  statusText.setBackgroundColor(Color.parseColor("#E8F5E8"));
                  mainLayout.addView(statusText);

                  // Result Text
                  resultText = new TextView(this);
                  resultText.setText("");
                  resultText.setTextSize(14);
                  resultText.setTextColor(Color.parseColor("#333333"));
                  resultText.setPadding(20, 20, 20, 20);
                  resultText.setBackgroundColor(Color.WHITE);
                  LinearLayout.LayoutParams resultParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  resultParams.setMargins(0, 20, 0, 0);
                  resultText.setLayoutParams(resultParams);
                  mainLayout.addView(resultText);

                  setContentView(mainLayout);
              }

              private void performLogin() {
                  String email = emailInput.getText().toString().trim();
                  String password = passwordInput.getText().toString().trim();

                  if (email.isEmpty() || password.isEmpty()) {
                      statusText.setText("Please enter both email and password");
                      statusText.setTextColor(Color.parseColor("#D32F2F"));
                      return;
                  }

                  statusText.setText("Testing login...");
                  statusText.setTextColor(Color.parseColor("#FF9800"));
                  resultText.setText("");
                  loginButton.setEnabled(false);

                  new LoginTask().execute(email, password);
              }

              private class LoginTask extends AsyncTask<String, Void, String> {
                  @Override
                  protected String doInBackground(String... params) {
                      String email = params[0];
                      String password = params[1];
                      
                      Log.d(TAG, "Starting login test...");
                      
                      try {
                          JsonObject jsonBody = new JsonObject();
                          jsonBody.addProperty("email", email);
                          jsonBody.addProperty("password", password);
                          
                          String response = makeApiCall("/api/auth/login", jsonBody.toString());
                          Log.d(TAG, "Login response: " + response);
                          
                          return response;
                      } catch (Exception e) {
                          Log.e(TAG, "Login error: " + e.getMessage());
                          return "ERROR: " + e.getMessage();
                      }
                  }

                  @Override
                  protected void onPostExecute(String result) {
                      loginButton.setEnabled(true);
                      
                      if (result.startsWith("ERROR:")) {
                          statusText.setText("Login failed");
                          statusText.setTextColor(Color.parseColor("#D32F2F"));
                          resultText.setText("Error: " + result.substring(7));
                          resultText.setTextColor(Color.parseColor("#D32F2F"));
                          return;
                      }

                      try {
                          Gson gson = new Gson();
                          JsonObject responseObj = gson.fromJson(result, JsonObject.class);
                          
                          if (responseObj.has("success") && responseObj.get("success").getAsBoolean()) {
                              statusText.setText("LOGIN SUCCESS!");
                              statusText.setTextColor(Color.parseColor("#4CAF50"));
                              
                              String userInfo = "";
                              if (responseObj.has("user")) {
                                  JsonObject user = responseObj.getAsJsonObject("user");
                                  userInfo += "User: " + user.get("email").getAsString() + "\n";
                                  if (user.has("tier")) {
                                      userInfo += "Tier: " + user.get("tier").getAsString() + "\n";
                                  }
                                  if (user.has("access_level")) {
                                      userInfo += "Access: " + user.get("access_level").getAsString() + "\n";
                                  }
                              }
                              if (responseObj.has("token")) {
                                  userInfo += "Token: " + responseObj.get("token").getAsString() + "\n";
                              }
                              if (responseObj.has("admin_access")) {
                                  userInfo += "Admin: " + responseObj.get("admin_access").getAsBoolean() + "\n";
                              }
                              
                              resultText.setText("Success Details:\n" + userInfo);
                              resultText.setTextColor(Color.parseColor("#4CAF50"));
                              
                          } else {
                              statusText.setText("Login failed");
                              statusText.setTextColor(Color.parseColor("#D32F2F"));
                              
                              String error = responseObj.has("error") ? responseObj.get("error").getAsString() : "Unknown error";
                              resultText.setText("API Error: " + error);
                              resultText.setTextColor(Color.parseColor("#D32F2F"));
                          }
                      } catch (Exception e) {
                          Log.e(TAG, "Error parsing response: " + e.getMessage());
                          statusText.setText("Response parsing failed");
                          statusText.setTextColor(Color.parseColor("#D32F2F"));
                          resultText.setText("Parse error: " + e.getMessage() + "\n\nRaw response:\n" + result);
                          resultText.setTextColor(Color.parseColor("#D32F2F"));
                      }
                  }
              }

              // Make API call with debugging
              private String makeApiCall(String endpoint, String jsonPayload) {
                  Log.d(TAG, "Connecting to: " + API_BASE_URL + endpoint);
                  
                  try {
                      URL url = new URL(API_BASE_URL + endpoint);
                      HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                      connection.setRequestMethod("POST");
                      connection.setRequestProperty("Content-Type", "application/json");
                      connection.setRequestProperty("Accept", "application/json");
                      connection.setDoOutput(true);
                      connection.setConnectTimeout(15000);
                      connection.setReadTimeout(15000);
                      
                      Log.d(TAG, "Sending request...");
                      
                      // Send request
                      try (OutputStream os = connection.getOutputStream()) {
                          byte[] input = jsonPayload.getBytes(StandardCharsets.UTF_8);
                          os.write(input, 0, input.length);
                          os.flush();
                      }
                      
                      Log.d(TAG, "Getting response...");
                      int responseCode = connection.getResponseCode();
                      Log.d(TAG, "Response code: " + responseCode);
                      
                      // Read response
                      InputStream inputStream = (responseCode >= 200 && responseCode < 300) ? 
                          connection.getInputStream() : connection.getErrorStream();
                      
                      StringBuilder response = new StringBuilder();
                      try (BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream))) {
                          String line;
                          while ((line = reader.readLine()) != null) {
                              response.append(line);
                          }
                      }
                      
                      String responseText = response.toString();
                      Log.d(TAG, "Raw response: " + responseText);
                      
                      return responseText;
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Connection error: " + e.getMessage());
                      throw new RuntimeException("Network error: " + e.getMessage());
                  }
              }
          }
          EOF

      - name: Create proguard-rules.pro
        run: |
          cat > android-app/proguard-rules.pro << 'EOF'
          # Add project specific ProGuard rules here
          -keep class com.google.gson.** { *; }
          -keepattributes Signature
          -keepattributes *Annotation*
          EOF

      - name: Set up Gradle wrapper
        working-directory: android-app
        run: |
          # Install gradle first
          wget -q https://services.gradle.org/distributions/gradle-8.1.1-bin.zip
          unzip -q gradle-8.1.1-bin.zip
          export PATH=$PWD/gradle-8.1.1/bin:$PATH
          
          # Create wrapper
          gradle wrapper --gradle-version 8.1.1
          chmod +x gradlew
          
          # Verify wrapper works
          ./gradlew --version

      - name: Build APK
        working-directory: android-app
        run: |
          ./gradlew assembleRelease --no-daemon --stacktrace

      - name: Sign APK
        working-directory: android-app
        run: |
          # Generate keystore
          keytool -genkey -v -keystore release-key.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias release-key -storepass android -keypass android -dname "CN=Login Test, OU=Development, O=MileTracker, L=City, S=State, C=US"
          
          # Sign APK
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore -storepass android -keypass android build/outputs/apk/release/app-release-unsigned.apk release-key
          
          # Align APK
          zipalign -v 4 build/outputs/apk/release/app-release-unsigned.apk build/outputs/apk/release/app-release-signed.apk

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: Login-Test-APK
          path: android-app/build/outputs/apk/release/app-release-signed.apk
