name: Build Android APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code for the APK'
        required: true
        default: '49135'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Create Android directory structure
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/drawable
        mkdir -p android/app/src/main/res/mipmap-hdpi
        mkdir -p android/app/src/main/res/mipmap-mdpi
        mkdir -p android/app/src/main/res/mipmap-xhdpi
        mkdir -p android/app/src/main/res/mipmap-xxhdpi
        mkdir -p android/app/src/main/res/mipmap-xxxhdpi
        mkdir -p android/gradle/wrapper
        
    - name: Create settings.gradle
      run: |
        cat > android/settings.gradle << 'EOF'
        rootProject.name = 'MileTrackerPro'
        include ':app'
        EOF
        
    - name: Create gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        EOF
        
    - name: Create gradle-wrapper.properties
      run: |
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        distributionUrl=https://services.gradle.org/distributions/gradle-8.5-bin.zip
        EOF
        
    - name: Create main build.gradle
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            ext {
                buildToolsVersion = "34.0.0"
                minSdkVersion = 24
                compileSdkVersion = 34
                targetSdkVersion = 34
                kotlinVersion = "1.9.24"
            }
            dependencies {
                classpath("com.android.tools.build:gradle:8.1.4")
                classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url "https://www.jitpack.io" }
            }
        }
        EOF
        
    - name: Create app build.gradle
      run: |
        cat > android/app/build.gradle << 'EOF'
        plugins {
            id("com.android.application")
        }
        
        android {
            namespace "com.miletrackerpro.app"
            compileSdk 34
            
            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdk 24
                targetSdk 34
                versionCode 49135
                versionName "4.9.117"
            }

            signingConfigs {
                release {
                    storeFile file('release.keystore')
                    storePassword 'miletracker123'
                    keyAlias 'miletracker'
                    keyPassword 'miletracker123'
                }
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    signingConfig signingConfigs.release
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }
        
        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.10.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'com.squareup.okhttp3:okhttp:4.12.0'
            implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
            implementation 'androidx.work:work-runtime:2.8.1'
            implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
            implementation 'androidx.core:core:1.12.0'
            implementation 'androidx.lifecycle:lifecycle-runtime:2.7.0'
            implementation 'androidx.lifecycle:lifecycle-common:2.7.0'
            implementation 'androidx.activity:activity:1.8.2'
            implementation 'androidx.fragment:fragment:1.6.2'
            implementation 'androidx.recyclerview:recyclerview:1.3.2'
            implementation 'androidx.cardview:cardview:1.0.0'
            implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
            implementation 'androidx.preference:preference:1.2.1'
            implementation 'androidx.navigation:navigation-fragment:2.7.5'
            implementation 'androidx.navigation:navigation-ui:2.7.5'
            implementation 'androidx.room:room-runtime:2.6.1'
            implementation 'androidx.room:room-ktx:2.6.1'
            implementation 'androidx.sqlite:sqlite:2.4.0'
            implementation 'androidx.sqlite:sqlite-framework:2.4.0'
            implementation 'com.google.code.gson:gson:2.10.1'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.7.3'
            implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
            implementation 'com.google.android.gms:play-services-location:21.0.1'
            implementation 'com.google.android.gms:play-services-maps:18.2.0'
            implementation 'androidx.biometric:biometric:1.1.0'
            implementation 'androidx.security:security-crypto:1.1.0-alpha06'
            implementation 'androidx.core:core-ktx:1.12.0'
            implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.7.0'
            implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.7.0'
            implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
            implementation 'androidx.activity:activity-ktx:1.8.2'
            implementation 'androidx.fragment:fragment-ktx:1.6.2'
            implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.9.24'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF
        
    - name: Create Android Manifest
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">
            
            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
            <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="MileTracker Pro"
                android:theme="@style/AppTheme"
                android:usesCleartextTraffic="true">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <service
                    android:name=".LocationService"
                    android:enabled="true"
                    android:exported="false" />
                    
                <receiver
                    android:name=".BootReceiver"
                    android:enabled="true"
                    android:exported="false">
                    <intent-filter>
                        <action android:name="android.intent.action.BOOT_COMPLETED" />
                    </intent-filter>
                </receiver>
                
                <provider
                    android:name="androidx.core.content.FileProvider"
                    android:authorities="com.miletrackerpro.app.fileprovider"
                    android:exported="false"
                    android:grantUriPermissions="true">
                    <meta-data
                        android:name="android.support.FILE_PROVIDER_PATHS"
                        android:resource="@xml/file_paths" />
                </provider>
                
            </application>
            
        </manifest>
        EOF
        
    - name: Create MainActivity.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.app.AlertDialog;
        import android.content.Context;
        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.graphics.Color;
        import android.graphics.Typeface;
        import android.net.Uri;
        import android.os.Bundle;
        import android.os.Handler;
        import android.os.Looper;
        import android.util.Log;
        import android.view.Gravity;
        import android.view.View;
        import android.widget.AdapterView;
        import android.widget.ArrayAdapter;
        import android.widget.Button;
        import android.widget.CheckBox;
        import android.widget.EditText;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.SearchView;
        import android.widget.Spinner;
        import android.widget.TextView;
        import android.widget.Toast;

        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.content.FileProvider;

        import java.io.File;
        import java.io.FileWriter;
        import java.io.IOException;
        import java.text.SimpleDateFormat;
        import java.util.ArrayList;
        import java.util.Date;
        import java.util.List;
        import java.util.Locale;
        import java.util.Set;
        import java.util.HashSet;

        public class MainActivity extends AppCompatActivity {

            private static final String TAG = "MainActivity";
            private static final String PREFS_NAME = "MileTrackerPrefs";
            private static final String PREF_PERIOD = "selected_period";
            private static final String PREF_RATE_BUSINESS = "rate_business";
            private static final String PREF_RATE_MEDICAL = "rate_medical";
            private static final String PREF_RATE_CHARITY = "rate_charity";

            // UI Components
            private LinearLayout mainLayout;
            private LinearLayout mainHeader;
            private LinearLayout mainContentLayout;
            private LinearLayout bottomTabLayout;
            private LinearLayout dashboardContent;
            private LinearLayout tripsContent;
            private LinearLayout classifyContent;
            private LinearLayout categorizedContent;
            private ScrollView dashboardScroll;
            private ScrollView allTripsScroll;
            private ScrollView classifyTripsScroll;
            private ScrollView categorizedTripsScroll;
            private LinearLayout allTripsLayout;
            private LinearLayout classifyTripsLayout;
            private LinearLayout categorizedTripsContainer;
            private LinearLayout recentTripsLayout;
            private Button startButton;
            private Button stopButton;
            private Button addTripButton;
            private Button autoToggle;
            private Button apiToggle;
            private Button periodButton;
            private Button homeTabButton;
            private Button tripsTabButton;
            private Button categorizedTabButton;
            private TextView statsText;
            private TextView speedText;
            private TextView locationText;
            private TextView distanceText;

            // Data
            private TripStorage tripStorage;
            private LocationService locationService;
            private String currentTab = "home";
            private String currentPeriod = "thisMonth";
            private String currentCategoryFilter = "All";
            private boolean mergeMode = false;
            private Set<String> selectedTripIds = new HashSet<>();

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                try {
                    Log.d(TAG, "=== MILETRACKER PRO v4.9.117 STARTING ===");
                    Log.d(TAG, "Three-tab system: Home, Classify, Categorized");
                    Log.d(TAG, "BUTTONS PROPERLY PLACED IN CATEGORIZED TAB");
                    
                    // Initialize storage and services
                    tripStorage = new TripStorage(this);
                    locationService = new LocationService(this);
                    
                    // Create layout
                    createLayout();
                    
                    // Initialize UI state
                    updateAutoToggleUI();
                    updateApiToggleUI();
                    updateStats();
                    updateRecentTrips();
                    updateClassifyTrips();
                    updateCategorizedTrips();
                    
                    Log.d(TAG, "=== MILETRACKER PRO STARTED SUCCESSFULLY ===");
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error in onCreate: " + e.getMessage(), e);
                    showErrorDialog("Startup Error", "Failed to start MileTracker Pro: " + e.getMessage());
                }
            }

            private void createLayout() {
                try {
                    Log.d(TAG, "Creating main layout...");
                    
                    // Main container
                    mainLayout = new LinearLayout(this);
                    mainLayout.setOrientation(LinearLayout.VERTICAL);
                    mainLayout.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.MATCH_PARENT
                    ));
                    mainLayout.setBackgroundColor(0xFFFFFFFF);

                    // Header
                    mainHeader = new LinearLayout(this);
                    mainHeader.setOrientation(LinearLayout.VERTICAL);
                    mainHeader.setBackgroundColor(Color.parseColor("#667eea"));
                    mainHeader.setPadding(20, 30, 20, 20);
                    
                    TextView headerTitle = new TextView(this);
                    headerTitle.setText("MileTracker Pro");
                    headerTitle.setTextSize(20);
                    headerTitle.setTextColor(Color.WHITE);
                    headerTitle.setTypeface(null, Typeface.BOLD);
                    headerTitle.setGravity(Gravity.CENTER);
                    mainHeader.addView(headerTitle);

                    // Content area
                    mainContentLayout = new LinearLayout(this);
                    mainContentLayout.setOrientation(LinearLayout.VERTICAL);
                    LinearLayout.LayoutParams contentParams = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        0,
                        1.0f
                    );
                    mainContentLayout.setLayoutParams(contentParams);

                    // Bottom tab navigation
                    bottomTabLayout = new LinearLayout(this);
                    bottomTabLayout.setOrientation(LinearLayout.HORIZONTAL);
                    bottomTabLayout.setBackgroundColor(0xFFE0E0E0);
                    bottomTabLayout.setPadding(0, 10, 0, 10);

                    // Home tab
                    homeTabButton = new Button(this);
                    homeTabButton.setText("🏠 Home");
                    homeTabButton.setTextSize(12);
                    homeTabButton.setBackgroundColor(0xFF667eea);
                    homeTabButton.setTextColor(0xFFFFFFFF);
                    homeTabButton.setOnClickListener(v -> switchToTab("home"));
                    LinearLayout.LayoutParams homeParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                    homeParams.setMargins(5, 0, 5, 0);
                    homeTabButton.setLayoutParams(homeParams);
                    bottomTabLayout.addView(homeTabButton);

                    // Classify tab (was Trips tab)
                    tripsTabButton = new Button(this);
                    tripsTabButton.setText("📝 Classify");
                    tripsTabButton.setTextSize(12);
                    tripsTabButton.setBackgroundColor(0xFF9CA3AF);
                    tripsTabButton.setTextColor(0xFFFFFFFF);
                    tripsTabButton.setOnClickListener(v -> switchToTab("trips"));
                    LinearLayout.LayoutParams tripsParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                    tripsParams.setMargins(5, 0, 5, 0);
                    tripsTabButton.setLayoutParams(tripsParams);
                    bottomTabLayout.addView(tripsTabButton);

                    // Categorized tab
                    categorizedTabButton = new Button(this);
                    categorizedTabButton.setText("✅ Categorized");
                    categorizedTabButton.setTextSize(12);
                    categorizedTabButton.setBackgroundColor(0xFF9CA3AF);
                    categorizedTabButton.setTextColor(0xFFFFFFFF);
                    categorizedTabButton.setOnClickListener(v -> switchToTab("categorized"));
                    LinearLayout.LayoutParams categorizedParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                    categorizedParams.setMargins(5, 0, 5, 0);
                    categorizedTabButton.setLayoutParams(categorizedParams);
                    bottomTabLayout.addView(categorizedTabButton);

                    // CREATE TAB CONTENT
                    createDashboardContent();
                    createTripsContent();
                    createClassifyContent();
                    createCategorizedContent();
                    
                    // Create persistent ScrollView for dashboard
                    dashboardScroll = new ScrollView(this);
                    dashboardScroll.addView(dashboardContent);

                    // Add to main layout in correct order
                    mainLayout.addView(mainHeader);
                    mainLayout.addView(mainContentLayout);
                    mainLayout.addView(bottomTabLayout);

                    switchToTab("home");
                    setContentView(mainLayout);

                } catch (Exception e) {
                    Log.e(TAG, "Error creating layout: " + e.getMessage(), e);
                    throw e;
                }
            }

            private void createDashboardContent() {
                dashboardContent = new LinearLayout(this);
                dashboardContent.setOrientation(LinearLayout.VERTICAL);
                dashboardContent.setPadding(20, 20, 20, 20);

                // Speed/Distance Display
                speedText = new TextView(this);
                speedText.setText("Speed: 0 mph");
                speedText.setTextSize(16);
                speedText.setTextColor(0xFF333333);
                speedText.setPadding(0, 10, 0, 5);
                dashboardContent.addView(speedText);

                distanceText = new TextView(this);
                distanceText.setText("Distance: 0.0 miles");
                distanceText.setTextSize(16);
                distanceText.setTextColor(0xFF333333);
                distanceText.setPadding(0, 0, 0, 10);
                dashboardContent.addView(distanceText);

                // Location Display
                locationText = new TextView(this);
                locationText.setText("Location: Waiting for GPS...");
                locationText.setTextSize(12);
                locationText.setTextColor(0xFF666666);
                locationText.setPadding(0, 0, 0, 20);
                dashboardContent.addView(locationText);

                // Auto Detection Toggle
                autoToggle = new Button(this);
                autoToggle.setText("Auto Detection: OFF");
                autoToggle.setTextSize(14);
                autoToggle.setBackgroundColor(0xFF9CA3AF);
                autoToggle.setTextColor(0xFFFFFFFF);
                autoToggle.setOnClickListener(v -> toggleAutoDetection());
                dashboardContent.addView(autoToggle);

                // Manual Trip Controls Label
                TextView manualLabel = new TextView(this);
                manualLabel.setText("Manual Trip Controls");
                manualLabel.setTextSize(14);
                manualLabel.setTextColor(0xFF333333);
                manualLabel.setTypeface(null, Typeface.BOLD);
                manualLabel.setPadding(0, 20, 0, 10);
                dashboardContent.addView(manualLabel);

                // Manual control buttons
                LinearLayout manualButtonLayout = new LinearLayout(this);
                manualButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
                manualButtonLayout.setGravity(Gravity.CENTER);

                startButton = new Button(this);
                startButton.setText("START");
                startButton.setTextSize(14);
                startButton.setBackgroundColor(0xFF28a745);
                startButton.setTextColor(0xFFFFFFFF);
                startButton.setOnClickListener(v -> startManualTrip());
                LinearLayout.LayoutParams startParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                startParams.setMargins(0, 0, 10, 0);
                startButton.setLayoutParams(startParams);
                manualButtonLayout.addView(startButton);

                stopButton = new Button(this);
                stopButton.setText("STOP");
                stopButton.setTextSize(14);
                stopButton.setBackgroundColor(0xFFDC3545);
                stopButton.setTextColor(0xFFFFFFFF);
                stopButton.setOnClickListener(v -> stopManualTrip());
                LinearLayout.LayoutParams stopParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                stopParams.setMargins(10, 0, 0, 0);
                stopButton.setLayoutParams(stopParams);
                manualButtonLayout.addView(stopButton);

                dashboardContent.addView(manualButtonLayout);

                // API Sync Toggle
                apiToggle = new Button(this);
                apiToggle.setText("🌐 API OFF");
                apiToggle.setTextSize(12);
                apiToggle.setBackgroundColor(0xFF9CA3AF);
                apiToggle.setTextColor(0xFFFFFFFF);
                apiToggle.setOnClickListener(v -> toggleApiSync());
                LinearLayout.LayoutParams apiParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                apiParams.setMargins(0, 20, 0, 0);
                apiToggle.setLayoutParams(apiParams);
                dashboardContent.addView(apiToggle);

                // Add Trip Button
                addTripButton = new Button(this);
                addTripButton.setText("➕ Add Trip");
                addTripButton.setTextSize(14);
                addTripButton.setBackgroundColor(0xFF007bff);
                addTripButton.setTextColor(0xFFFFFFFF);
                addTripButton.setOnClickListener(v -> showAddTripDialog());
                LinearLayout.LayoutParams addTripParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                addTripParams.setMargins(0, 10, 0, 0);
                addTripButton.setLayoutParams(addTripParams);
                dashboardContent.addView(addTripButton);

                // Period selector button
                periodButton = new Button(this);
                periodButton.setText("View: " + getPeriodLabel() + " (tap to change)");
                periodButton.setTextSize(12);
                periodButton.setBackgroundColor(0xFFE3F2FD);
                periodButton.setTextColor(0xFF1976D2);
                periodButton.setPadding(10, 5, 10, 5);
                periodButton.setOnClickListener(v -> showPeriodSelector());
                dashboardContent.addView(periodButton);

                // Stats - Enhanced visibility
                statsText = new TextView(this);
                statsText.setText("Loading stats...");
                statsText.setTextSize(14);
                statsText.setTextColor(0xFF495057);
                statsText.setPadding(15, 15, 15, 15);
                statsText.setBackgroundColor(0xFFfafafa);
                LinearLayout.LayoutParams statsParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                statsParams.setMargins(0, 10, 0, 10);
                statsText.setLayoutParams(statsParams);
                dashboardContent.addView(statsText);

                // Recent Trips
                TextView recentTripsHeader = new TextView(this);
                recentTripsHeader.setText("📋 Recent Trips");
                recentTripsHeader.setTextSize(16);
                recentTripsHeader.setTextColor(Color.WHITE);
                recentTripsHeader.setPadding(16, 16, 16, 16);
                recentTripsHeader.setTypeface(null, Typeface.BOLD);
                recentTripsHeader.setBackgroundColor(Color.parseColor("#667eea"));
                dashboardContent.addView(recentTripsHeader);

                ScrollView recentTripsScroll = new ScrollView(this);
                recentTripsLayout = new LinearLayout(this);
                recentTripsLayout.setOrientation(LinearLayout.VERTICAL);
                recentTripsScroll.addView(recentTripsLayout);

                LinearLayout.LayoutParams recentScrollParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    500
                );
                recentTripsScroll.setLayoutParams(recentScrollParams);
                dashboardContent.addView(recentTripsScroll);
            }

            private void createTripsContent() {
                tripsContent = new LinearLayout(this);
                tripsContent.setOrientation(LinearLayout.VERTICAL);
                tripsContent.setPadding(20, 20, 20, 20);

                // Header removed as requested
                
                // All Trips ScrollView
                allTripsScroll = new ScrollView(this);
                allTripsLayout = new LinearLayout(this);
                allTripsLayout.setOrientation(LinearLayout.VERTICAL);
                allTripsScroll.addView(allTripsLayout);

                // Full screen layout params - fill all available space above bottom tabs
                LinearLayout.LayoutParams allTripsParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    0, // Use weight to fill remaining space
                    1.0f // Weight 1 = take all remaining vertical space
                );
                allTripsScroll.setLayoutParams(allTripsParams);
                tripsContent.addView(allTripsScroll);
            }

            private void createClassifyContent() {
                classifyContent = new LinearLayout(this);
                classifyContent.setOrientation(LinearLayout.VERTICAL);
                classifyContent.setPadding(20, 20, 20, 20);

                // Header text
                TextView headerText = new TextView(this);
                headerText.setText("Classify Trips");
                headerText.setTextSize(18);
                headerText.setTextColor(0xFF333333);
                headerText.setGravity(Gravity.CENTER);
                headerText.setPadding(0, 0, 0, 10);
                classifyContent.addView(headerText);

                // Instructions text
                TextView instructionsText = new TextView(this);
                instructionsText.setText("Swipe left for Business, right for Personal");
                instructionsText.setTextSize(14);
                instructionsText.setTextColor(0xFF666666);
                instructionsText.setGravity(Gravity.CENTER);
                instructionsText.setPadding(0, 0, 0, 20);
                classifyContent.addView(instructionsText);

                // Scrollable trips container
                classifyTripsScroll = new ScrollView(this);
                classifyTripsLayout = new LinearLayout(this);
                classifyTripsLayout.setOrientation(LinearLayout.VERTICAL);
                classifyTripsScroll.addView(classifyTripsLayout);

                LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    0,
                    1.0f
                );
                classifyTripsScroll.setLayoutParams(scrollParams);
                classifyContent.addView(classifyTripsScroll);
            }

            private void createCategorizedContent() {
                categorizedContent = new LinearLayout(this);
                categorizedContent.setOrientation(LinearLayout.VERTICAL);
                categorizedContent.setPadding(20, 20, 20, 20);

                // Header text
                TextView headerText = new TextView(this);
                headerText.setText("Categorized Trips");
                headerText.setTextSize(18);
                headerText.setTextColor(0xFF333333);
                headerText.setGravity(Gravity.CENTER);
                headerText.setPadding(0, 0, 0, 20);
                categorizedContent.addView(headerText);

                // REFRESH, MERGE, EXPORT buttons (moved from createTripsContent)
                LinearLayout buttonContainer = new LinearLayout(this);
                buttonContainer.setOrientation(LinearLayout.VERTICAL);
                buttonContainer.setPadding(0, 10, 0, 10);
                
                // Button row with uniform height buttons  
                LinearLayout buttonLayout = new LinearLayout(this);
                buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
                buttonLayout.setPadding(20, 0, 20, 0);
                buttonLayout.setGravity(Gravity.CENTER);
                
                // Uniform button height (50dp converted to pixels)
                int buttonHeight = (int) (50 * getResources().getDisplayMetrics().density);
                
                // Refresh button
                Button refreshButton = new Button(this);
                refreshButton.setText("REFRESH");
                refreshButton.setTextSize(11);
                refreshButton.setBackgroundColor(0xFF6C757D); // Muted gray color
                refreshButton.setTextColor(0xFFFFFFFF);
                refreshButton.setPadding(15, 0, 15, 0);
                refreshButton.setOnClickListener(v -> performRefreshWithFeedback(refreshButton));
                LinearLayout.LayoutParams refreshParams = new LinearLayout.LayoutParams(
                    0, 
                    buttonHeight,
                    1.0f
                );
                refreshParams.setMargins(0, 0, 15, 0);
                refreshButton.setLayoutParams(refreshParams);
                buttonLayout.addView(refreshButton);
                
                // Merge button
                Button mergeButton = new Button(this);
                mergeButton.setText("MERGE");
                mergeButton.setTextSize(11);
                mergeButton.setBackgroundColor(0xFF007bff);
                mergeButton.setTextColor(0xFFFFFFFF);
                mergeButton.setPadding(15, 0, 15, 0);
                LinearLayout.LayoutParams mergeParams = new LinearLayout.LayoutParams(
                    0, 
                    buttonHeight,
                    1.0f
                );
                mergeParams.setMargins(15, 0, 15, 0);
                mergeButton.setLayoutParams(mergeParams);
                buttonLayout.addView(mergeButton);
                
                // Export button
                Button exportButton = new Button(this);
                exportButton.setText("EXPORT");
                exportButton.setTextSize(11);
                exportButton.setBackgroundColor(0xFF28a745);
                exportButton.setTextColor(0xFFFFFFFF);
                exportButton.setPadding(15, 0, 15, 0);
                LinearLayout.LayoutParams exportParams = new LinearLayout.LayoutParams(
                    0, 
                    buttonHeight,
                    1.0f
                );
                exportParams.setMargins(15, 0, 0, 0);
                exportButton.setLayoutParams(exportParams);
                buttonLayout.addView(exportButton);
                
                buttonContainer.addView(buttonLayout);
                
                // Add export button click handler
                exportButton.setOnClickListener(v -> showExportDialog());
                
                // Add merge button click handler
                mergeButton.setOnClickListener(v -> {
                    if (!mergeMode) {
                        // Enter merge mode
                        mergeMode = true;
                        mergeButton.setText("✅ Execute Merge (" + selectedTripIds.size() + ")");
                        mergeButton.setBackgroundColor(0xFF28a745);
                        updateCategorizedTrips(); // Refresh to show checkboxes
                        Toast.makeText(MainActivity.this, "📋 Select trips to merge, then tap Execute", Toast.LENGTH_SHORT).show();
                    } else {
                        // Execute merge
                        if (selectedTripIds.size() < 2) {
                            Toast.makeText(MainActivity.this, "❌ Select at least 2 trips to merge", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        // Confirm merge
                        new AlertDialog.Builder(MainActivity.this)
                            .setTitle("🔀 Confirm Merge")
                            .setMessage("Merge " + selectedTripIds.size() + " selected trips?\n\nThis will combine them into one trip and delete the originals.")
                            .setPositiveButton("✅ Merge", (dialog, which) -> {
                                executeTripseMerge();
                            })
                            .setNegativeButton("❌ Cancel", null)
                            .show();
                    }
                });
                
                categorizedContent.addView(buttonContainer);

                // Category filter buttons
                LinearLayout categoryButtonsLayout = new LinearLayout(this);
                categoryButtonsLayout.setOrientation(LinearLayout.HORIZONTAL);
                categoryButtonsLayout.setGravity(Gravity.CENTER);
                categoryButtonsLayout.setPadding(0, 0, 0, 20);

                String[] categories = {"All", "Business", "Personal", "Medical", "Charity"};
                for (String category : categories) {
                    Button categoryButton = new Button(this);
                    categoryButton.setText(category);
                    categoryButton.setTextSize(12);
                    categoryButton.setBackgroundColor(0xFF9CA3AF);
                    categoryButton.setTextColor(0xFFFFFFFF);
                    categoryButton.setPadding(15, 5, 15, 5);
                    LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.WRAP_CONTENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                    );
                    params.setMargins(5, 0, 5, 0);
                    categoryButton.setLayoutParams(params);
                    categoryButton.setOnClickListener(v -> {
                        currentCategoryFilter = category;
                        updateCategorizedTrips();
                    });
                    categoryButtonsLayout.addView(categoryButton);
                }
                categorizedContent.addView(categoryButtonsLayout);

                // Scrollable trips container
                categorizedTripsScroll = new ScrollView(this);
                categorizedTripsContainer = new LinearLayout(this);
                categorizedTripsContainer.setOrientation(LinearLayout.VERTICAL);
                categorizedTripsScroll.addView(categorizedTripsContainer);

                LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    0,
                    1.0f
                );
                categorizedTripsScroll.setLayoutParams(scrollParams);
                categorizedContent.addView(categorizedTripsScroll);
            }

            private void switchToTab(String tabName) {
                try {
                    currentTab = tabName;
                    mainContentLayout.removeAllViews();

                    if ("home".equals(tabName)) {
                        // Use persistent ScrollView for dashboard
                        mainContentLayout.addView(dashboardScroll);
                        homeTabButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE ACTIVE
                        tripsTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY INACTIVE
                        categorizedTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY INACTIVE
                        updateRecentTrips();
                    } else if ("trips".equals(tabName)) {
                        mainContentLayout.addView(classifyContent);
                        homeTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY INACTIVE
                        tripsTabButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE ACTIVE
                        categorizedTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY INACTIVE
                        updateClassifyTrips();
                    } else if ("categorized".equals(tabName)) {
                        mainContentLayout.addView(categorizedContent);
                        homeTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY INACTIVE
                        tripsTabButton.setBackgroundColor(0xFF9CA3AF); // MUTED GRAY INACTIVE
                        categorizedTabButton.setBackgroundColor(0xFF667eea); // MUTED PERIWINKLE ACTIVE
                        updateCategorizedTrips();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error switching tabs: " + e.getMessage(), e);
                }
            }

            // Placeholder methods for functionality
            private void toggleAutoDetection() {
                // Placeholder
                Toast.makeText(this, "Auto detection toggled", Toast.LENGTH_SHORT).show();
            }

            private void startManualTrip() {
                // Placeholder
                Toast.makeText(this, "Manual trip started", Toast.LENGTH_SHORT).show();
            }

            private void stopManualTrip() {
                // Placeholder
                Toast.makeText(this, "Manual trip stopped", Toast.LENGTH_SHORT).show();
            }

            private void toggleApiSync() {
                // Placeholder
                Toast.makeText(this, "API sync toggled", Toast.LENGTH_SHORT).show();
            }

            private void showAddTripDialog() {
                // Placeholder
                Toast.makeText(this, "Add trip dialog", Toast.LENGTH_SHORT).show();
            }

            private void showPeriodSelector() {
                // Placeholder
                Toast.makeText(this, "Period selector", Toast.LENGTH_SHORT).show();
            }

            private void updateAutoToggleUI() {
                // Placeholder
            }

            private void updateApiToggleUI() {
                // Placeholder
            }

            private void updateStats() {
                // Placeholder
                if (statsText != null) {
                    statsText.setText("• Total Trips: 0\n• Total Miles: 0.0\n• Business Miles: 0.0\n• Personal Miles: 0.0");
                }
            }

            private void updateRecentTrips() {
                // Placeholder
                if (recentTripsLayout != null) {
                    recentTripsLayout.removeAllViews();
                    TextView noTrips = new TextView(this);
                    noTrips.setText("No recent trips");
                    noTrips.setTextSize(14);
                    noTrips.setPadding(16, 16, 16, 16);
                    recentTripsLayout.addView(noTrips);
                }
            }

            private void updateClassifyTrips() {
                // Placeholder
                if (classifyTripsLayout != null) {
                    classifyTripsLayout.removeAllViews();
                    TextView noTrips = new TextView(this);
                    noTrips.setText("No trips to classify");
                    noTrips.setTextSize(14);
                    noTrips.setPadding(16, 16, 16, 16);
                    classifyTripsLayout.addView(noTrips);
                }
            }

            private void updateCategorizedTrips() {
                // Placeholder
                if (categorizedTripsContainer != null) {
                    categorizedTripsContainer.removeAllViews();
                    TextView noTrips = new TextView(this);
                    noTrips.setText("No categorized trips");
                    noTrips.setTextSize(14);
                    noTrips.setPadding(16, 16, 16, 16);
                    categorizedTripsContainer.addView(noTrips);
                }
            }

            private void performRefreshWithFeedback(Button button) {
                // Placeholder
                Toast.makeText(this, "Refreshing trips...", Toast.LENGTH_SHORT).show();
            }

            private void showExportDialog() {
                // Placeholder
                Toast.makeText(this, "Export dialog", Toast.LENGTH_SHORT).show();
            }

            private void executeTripseMerge() {
                // Placeholder
                Toast.makeText(this, "Merging trips...", Toast.LENGTH_SHORT).show();
            }

            private String getPeriodLabel() {
                return "This Month";
            }

            private void showErrorDialog(String title, String message) {
                new AlertDialog.Builder(this)
                    .setTitle(title)
                    .setMessage(message)
                    .setPositiveButton("OK", null)
                    .show();
            }
        }
        EOF
        
    - name: Create TripStorage.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/TripStorage.java << 'EOF'
        package com.miletrackerpro.app;

        import android.content.Context;
        import android.content.SharedPreferences;
        import android.util.Log;

        import java.util.ArrayList;
        import java.util.List;

        public class TripStorage {
            private static final String TAG = "TripStorage";
            private static final String PREFS_NAME = "TripStoragePrefs";
            private Context context;
            private SharedPreferences prefs;

            public TripStorage(Context context) {
                this.context = context;
                this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
            }

            public List<Trip> getAllTrips() {
                // Placeholder - return empty list for now
                return new ArrayList<>();
            }

            public void saveTrip(Trip trip) {
                // Placeholder
                Log.d(TAG, "Saving trip: " + trip.toString());
            }

            public boolean isApiSyncEnabled() {
                return prefs.getBoolean("api_sync_enabled", false);
            }

            public void setApiSyncEnabled(boolean enabled) {
                prefs.edit().putBoolean("api_sync_enabled", enabled).apply();
            }

            public static class Trip {
                public String id;
                public String startLocation;
                public String endLocation;
                public double distance;
                public String category;
                public long startTime;
                public long endTime;

                @Override
                public String toString() {
                    return "Trip{id='" + id + "', distance=" + distance + ", category='" + category + "'}";
                }
            }
        }
        EOF
        
    - name: Create LocationService.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/LocationService.java << 'EOF'
        package com.miletrackerpro.app;

        import android.content.Context;
        import android.util.Log;

        public class LocationService {
            private static final String TAG = "LocationService";
            private Context context;

            public LocationService(Context context) {
                this.context = context;
            }

            public void startTracking() {
                Log.d(TAG, "Starting location tracking");
            }

            public void stopTracking() {
                Log.d(TAG, "Stopping location tracking");
            }
        }
        EOF
        
    - name: Create keystore
      run: |
        cd android/app
        keytool -genkey -v -keystore release.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 -storepass miletracker123 -keypass miletracker123 -dname "CN=MileTracker Pro, O=MileTracker, C=US"
        
    - name: Create basic app resources
      run: |
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">MileTracker Pro</string>
        </resources>
        EOF
        
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">#667eea</item>
                <item name="colorPrimaryDark">#5a67d8</item>
                <item name="colorAccent">#667eea</item>
            </style>
        </resources>
        EOF
        
        # Create file_paths.xml
        mkdir -p android/app/src/main/res/xml
        cat > android/app/src/main/res/xml/file_paths.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <paths xmlns:android="http://schemas.android.com/apk/res/android">
            <external-path name="external_files" path="."/>
        </paths>
        EOF
        
        # Create a basic launcher icon
        cat > android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="colorPrimary">#667eea</color>
            <color name="colorPrimaryDark">#5a67d8</color>
            <color name="colorAccent">#667eea</color>
        </resources>
        EOF
        
        # Create basic launcher icons (using Android's built-in icons)
        echo "Creating launcher icons..."
        cp /usr/share/pixmaps/debian-logo.png android/app/src/main/res/mipmap-mdpi/ic_launcher.png 2>/dev/null || echo "Using default system icon"
        
    - name: Build APK
      run: |
        cd android
        chmod +x gradlew
        ./gradlew assembleRelease --stacktrace
        
    - name: Sign APK
      run: |
        cd android
        # The APK should be at app/build/outputs/apk/release/app-release.apk
        if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
          echo "APK found at expected location"
          cp app/build/outputs/apk/release/app-release.apk ./MileTracker-Pro-v4.9.117.apk
        else
          echo "APK not found at expected location, searching..."
          find . -name "*.apk" -type f
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: MileTracker-Pro-v4.9.117
        path: android/MileTracker-Pro-v4.9.117.apk
        retention-days: 30
