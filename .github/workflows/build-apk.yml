name: Complete Delete UI Addition v4.9.63
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Create Android App
      run: |
        mkdir -p android-app/src/main/java/com/miletrackerpro
        mkdir -p android-app/src/main/res/values
        mkdir -p android-app/src/main/res/drawable

    - name: Create MainActivity with Delete UI
      run: |
        cat > android-app/src/main/java/com/miletrackerpro/MainActivity.java << 'EOF'
        package com.miletrackerpro;

        import android.app.Activity;
        import android.os.Bundle;
        import android.widget.*;
        import android.view.*;
        import android.graphics.*;
        import android.content.Context;
        import android.content.SharedPreferences;
        import android.util.Log;
        import android.app.AlertDialog;
        import java.util.*;
        import java.text.SimpleDateFormat;
        import java.util.concurrent.ExecutorService;
        import java.util.concurrent.Executors;
        import org.json.JSONArray;
        import org.json.JSONObject;

        public class MainActivity extends Activity {
            private static final String TAG = "MileTrackerPro";
            
            private LinearLayout mainLayout;
            private LinearLayout homeLayout;
            private LinearLayout tripsLayout;
            private String currentTab = "home";
            
            private Button homeTabButton;
            private Button tripsTabButton;
            
            private TripStorage tripStorage;
            private LocationService locationService;
            
            // UI Components
            private TextView statusText;
            private Button toggleButton;
            private Button startTripButton;
            private Button stopTripButton;
            private TextView statsText;
            private LinearLayout recentTripsContainer;
            private LinearLayout allTripsContainer;
            private TextView duplicateStatusText; // NEW: For duplicate prevention notifications

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                try {
                    tripStorage = new TripStorage(this);
                    locationService = new LocationService(this, tripStorage);
                    
                    createMainInterface();
                    updateStats();
                    updateRecentTrips();
                    updateAllTrips();
                    
                    Log.d(TAG, "MileTracker Pro v4.9.63 with Delete UI - Started successfully");
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error in onCreate", e);
                    showError("Startup Error: " + e.getMessage());
                }
            }

            private void createMainInterface() {
                mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setBackgroundColor(0xFFF8F9FA);
                mainLayout.setPadding(0, 0, 0, 0);

                // Header with title and duplicate status
                createHeader();
                
                // Tab navigation
                createTabNavigation();
                
                // Content area
                ScrollView scrollView = new ScrollView(this);
                LinearLayout contentLayout = new LinearLayout(this);
                contentLayout.setOrientation(LinearLayout.VERTICAL);
                
                // Home tab content
                createHomeTab();
                
                // Trips tab content  
                createTripsTab();
                
                contentLayout.addView(homeLayout);
                contentLayout.addView(tripsLayout);
                scrollView.addView(contentLayout);
                
                mainLayout.addView(scrollView);
                setContentView(mainLayout);
                
                // Show home tab by default
                showTab("home");
            }

            private void createHeader() {
                LinearLayout headerLayout = new LinearLayout(this);
                headerLayout.setOrientation(LinearLayout.VERTICAL);
                headerLayout.setBackgroundColor(0xFF667EEA);
                headerLayout.setPadding(20, 40, 20, 20);

                TextView titleText = new TextView(this);
                titleText.setText("🚗 MileTracker Pro v4.9.63");
                titleText.setTextSize(24);
                titleText.setTextColor(0xFFFFFFFF);
                titleText.setTypeface(null, Typeface.BOLD);

                // NEW: Duplicate prevention status display
                duplicateStatusText = new TextView(this);
                duplicateStatusText.setText(""); // Initially empty
                duplicateStatusText.setTextSize(14);
                duplicateStatusText.setTextColor(0xFFFFE066);
                duplicateStatusText.setTypeface(null, Typeface.BOLD);
                duplicateStatusText.setPadding(0, 5, 0, 0);
                duplicateStatusText.setVisibility(View.GONE); // Hidden initially

                headerLayout.addView(titleText);
                headerLayout.addView(duplicateStatusText);
                mainLayout.addView(headerLayout);
            }

            private void createTabNavigation() {
                LinearLayout tabLayout = new LinearLayout(this);
                tabLayout.setOrientation(LinearLayout.HORIZONTAL);
                tabLayout.setBackgroundColor(0xFFFFFFFF);
                tabLayout.setPadding(0, 0, 0, 0);

                homeTabButton = new Button(this);
                homeTabButton.setText("🏠 Home");
                homeTabButton.setLayoutParams(new LinearLayout.LayoutParams(0, 120, 1));
                homeTabButton.setBackgroundColor(0xFF667EEA);
                homeTabButton.setTextColor(0xFFFFFFFF);
                homeTabButton.setOnClickListener(v -> showTab("home"));

                tripsTabButton = new Button(this);
                tripsTabButton.setText("🚗 Trips");
                tripsTabButton.setLayoutParams(new LinearLayout.LayoutParams(0, 120, 1));
                tripsTabButton.setBackgroundColor(0xFFE9ECEF);
                tripsTabButton.setTextColor(0xFF495057);
                tripsTabButton.setOnClickListener(v -> showTab("trips"));

                tabLayout.addView(homeTabButton);
                tabLayout.addView(tripsTabButton);
                mainLayout.addView(tabLayout);
            }

            private void createHomeTab() {
                homeLayout = new LinearLayout(this);
                homeLayout.setOrientation(LinearLayout.VERTICAL);
                homeLayout.setPadding(20, 20, 20, 20);

                // Status and controls section
                statusText = new TextView(this);
                statusText.setText("Auto Detection: Ready");
                statusText.setTextSize(16);
                statusText.setPadding(0, 0, 0, 20);

                // Control buttons
                LinearLayout controlLayout = new LinearLayout(this);
                controlLayout.setOrientation(LinearLayout.HORIZONTAL);

                toggleButton = new Button(this);
                toggleButton.setText("🤖 Auto: ON");
                toggleButton.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));
                toggleButton.setBackgroundColor(0xFF28A745);
                toggleButton.setTextColor(0xFFFFFFFF);
                toggleButton.setOnClickListener(v -> toggleAutoDetection());

                startTripButton = new Button(this);
                startTripButton.setText("▶️ Start Trip");
                startTripButton.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));
                startTripButton.setBackgroundColor(0xFF007BFF);
                startTripButton.setTextColor(0xFFFFFFFF);
                startTripButton.setOnClickListener(v -> startManualTrip());

                stopTripButton = new Button(this);
                stopTripButton.setText("⏹️ Stop Trip");
                stopTripButton.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));
                stopTripButton.setBackgroundColor(0xFFDC3545);
                stopTripButton.setTextColor(0xFFFFFFFF);
                stopTripButton.setOnClickListener(v -> stopManualTrip());

                controlLayout.addView(toggleButton);
                controlLayout.addView(startTripButton);
                controlLayout.addView(stopTripButton);

                // Stats section
                statsText = new TextView(this);
                statsText.setText("Loading stats...");
                statsText.setTextSize(14);
                statsText.setPadding(0, 20, 0, 20);
                statsText.setBackgroundColor(0xFFF8F9FA);
                statsText.setPadding(15, 15, 15, 15);

                // Recent trips section
                TextView recentTripsLabel = new TextView(this);
                recentTripsLabel.setText("Recent Trips");
                recentTripsLabel.setTextSize(18);
                recentTripsLabel.setTypeface(null, Typeface.BOLD);
                recentTripsLabel.setPadding(0, 20, 0, 10);

                recentTripsContainer = new LinearLayout(this);
                recentTripsContainer.setOrientation(LinearLayout.VERTICAL);

                homeLayout.addView(statusText);
                homeLayout.addView(controlLayout);
                homeLayout.addView(statsText);
                homeLayout.addView(recentTripsLabel);
                homeLayout.addView(recentTripsContainer);
            }

            private void createTripsTab() {
                tripsLayout = new LinearLayout(this);
                tripsLayout.setOrientation(LinearLayout.VERTICAL);
                tripsLayout.setPadding(20, 20, 20, 20);

                TextView allTripsLabel = new TextView(this);
                allTripsLabel.setText("All Trips");
                allTripsLabel.setTextSize(18);
                allTripsLabel.setTypeface(null, Typeface.BOLD);
                allTripsLabel.setPadding(0, 0, 0, 15);

                allTripsContainer = new LinearLayout(this);
                allTripsContainer.setOrientation(LinearLayout.VERTICAL);

                tripsLayout.addView(allTripsLabel);
                tripsLayout.addView(allTripsContainer);
            }

            private void showTab(String tab) {
                currentTab = tab;
                
                if ("home".equals(tab)) {
                    homeLayout.setVisibility(View.VISIBLE);
                    tripsLayout.setVisibility(View.GONE);
                    homeTabButton.setBackgroundColor(0xFF667EEA);
                    homeTabButton.setTextColor(0xFFFFFFFF);
                    tripsTabButton.setBackgroundColor(0xFFE9ECEF);
                    tripsTabButton.setTextColor(0xFF495057);
                } else {
                    homeLayout.setVisibility(View.GONE);
                    tripsLayout.setVisibility(View.VISIBLE);
                    homeTabButton.setBackgroundColor(0xFFE9ECEF);
                    homeTabButton.setTextColor(0xFF495057);
                    tripsTabButton.setBackgroundColor(0xFF667EEA);
                    tripsTabButton.setTextColor(0xFFFFFFFF);
                }
            }

            private void toggleAutoDetection() {
                try {
                    boolean isEnabled = locationService.toggleAutoDetection();
                    
                    if (isEnabled) {
                        toggleButton.setText("🤖 Auto: ON");
                        toggleButton.setBackgroundColor(0xFF28A745);
                        statusText.setText("Auto Detection: Monitoring");
                        
                        // Hide duplicate status when auto is enabled
                        hideDuplicateStatus();
                        
                    } else {
                        toggleButton.setText("🤖 Auto: OFF");
                        toggleButton.setBackgroundColor(0xFF6C757D);
                        statusText.setText("Auto Detection: Disabled");
                    }
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error toggling auto detection", e);
                    showError("Toggle Error: " + e.getMessage());
                }
            }

            private void startManualTrip() {
                try {
                    locationService.startManualTrip();
                    statusText.setText("Manual Trip: Recording...");
                    
                    // NEW: Show duplicate prevention notification
                    showDuplicatePreventionStatus("🤖➜⏸️ Auto detection paused during manual trip");
                    
                    Toast.makeText(this, "Manual trip started", Toast.LENGTH_SHORT).show();
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error starting manual trip", e);
                    showError("Start Trip Error: " + e.getMessage());
                }
            }

            private void stopManualTrip() {
                try {
                    locationService.stopManualTrip();
                    statusText.setText("Manual Trip: Completed");
                    
                    // NEW: Show auto resume notification
                    if (locationService.isAutoDetectionEnabled()) {
                        showDuplicatePreventionStatus("🤖➜▶️ Auto detection resumed after manual trip");
                        
                        // Hide status after 3 seconds
                        new Timer().schedule(new TimerTask() {
                            @Override
                            public void run() {
                                runOnUiThread(() -> hideDuplicateStatus());
                            }
                        }, 3000);
                        
                    } else {
                        hideDuplicateStatus();
                    }
                    
                    updateStats();
                    updateRecentTrips();
                    updateAllTrips();
                    
                    Toast.makeText(this, "Manual trip completed", Toast.LENGTH_SHORT).show();
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error stopping manual trip", e);
                    showError("Stop Trip Error: " + e.getMessage());
                }
            }

            // NEW: Show duplicate prevention status
            private void showDuplicatePreventionStatus(String message) {
                duplicateStatusText.setText(message);
                duplicateStatusText.setVisibility(View.VISIBLE);
            }

            // NEW: Hide duplicate prevention status
            private void hideDuplicateStatus() {
                duplicateStatusText.setVisibility(View.GONE);
            }

            private void updateStats() {
                try {
                    List<Trip> allTrips = tripStorage.getAllTrips();
                    
                    int totalTrips = allTrips.size();
                    double totalMiles = 0;
                    double businessMiles = 0;
                    double medicalMiles = 0;
                    
                    for (Trip trip : allTrips) {
                        totalMiles += trip.getDistance();
                        
                        String category = trip.getCategory();
                        if ("Business".equals(category)) {
                            businessMiles += trip.getDistance();
                        } else if ("Medical".equals(category)) {
                            medicalMiles += trip.getDistance();
                        }
                    }
                    
                    double businessDeduction = businessMiles * 0.70;
                    double medicalDeduction = medicalMiles * 0.21;
                    double totalDeduction = businessDeduction + medicalDeduction;
                    
                    String statsInfo = String.format(Locale.getDefault(),
                        "📊 Total Trips: %d\n" +
                        "📏 Total Miles: %.1f\n" +
                        "💼 Business: %.1f mi ($%.2f)\n" +
                        "🏥 Medical: %.1f mi ($%.2f)\n" +
                        "💰 Total Deduction: $%.2f",
                        totalTrips, totalMiles, businessMiles, businessDeduction,
                        medicalMiles, medicalDeduction, totalDeduction
                    );
                    
                    statsText.setText(statsInfo);
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error updating stats", e);
                    statsText.setText("Error loading stats");
                }
            }

            private void updateRecentTrips() {
                try {
                    recentTripsContainer.removeAllViews();
                    
                    List<Trip> recentTrips = tripStorage.getRecentTrips(5);
                    
                    if (recentTrips.isEmpty()) {
                        TextView emptyText = new TextView(this);
                        emptyText.setText("No trips yet. Start driving to automatically track trips!");
                        emptyText.setTextColor(0xFF6C757D);
                        emptyText.setPadding(15, 15, 15, 15);
                        recentTripsContainer.addView(emptyText);
                    } else {
                        for (Trip trip : recentTrips) {
                            recentTripsContainer.addView(createTripCard(trip, true)); // true = compact view
                        }
                    }
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error updating recent trips", e);
                }
            }

            private void updateAllTrips() {
                try {
                    allTripsContainer.removeAllViews();
                    
                    List<Trip> allTrips = tripStorage.getAllTrips();
                    
                    if (allTrips.isEmpty()) {
                        TextView emptyText = new TextView(this);
                        emptyText.setText("No trips recorded yet.");
                        emptyText.setTextColor(0xFF6C757D);
                        emptyText.setPadding(15, 15, 15, 15);
                        allTripsContainer.addView(emptyText);
                    } else {
                        for (Trip trip : allTrips) {
                            allTripsContainer.addView(createTripCard(trip, false)); // false = full view with delete
                        }
                    }
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error updating all trips", e);
                }
            }

            private LinearLayout createTripCard(Trip trip, boolean compact) {
                LinearLayout cardLayout = new LinearLayout(this);
                cardLayout.setOrientation(LinearLayout.VERTICAL);
                cardLayout.setBackgroundColor(0xFFFFFFFF);
                cardLayout.setPadding(15, 15, 15, 15);
                
                LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                cardParams.setMargins(0, 0, 0, 10);
                cardLayout.setLayoutParams(cardParams);

                // Trip info
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, h:mm a", Locale.US);
                String tripIcon = trip.isAutoDetected() ? "🤖" : "👤";
                
                TextView tripInfo = new TextView(this);
                tripInfo.setText(String.format(Locale.getDefault(),
                    "%s %.2f miles • %s • %s",
                    tripIcon,
                    trip.getDistance(),
                    trip.getCategory() != null ? trip.getCategory() : "Uncategorized",
                    dateFormat.format(new Date(trip.getStartTime()))
                ));
                tripInfo.setTextSize(14);
                tripInfo.setTypeface(null, Typeface.BOLD);

                // Location info (if not compact)
                if (!compact && (trip.getStartLocation() != null || trip.getEndLocation() != null)) {
                    TextView locationInfo = new TextView(this);
                    locationInfo.setText(String.format("From: %s\nTo: %s",
                        trip.getStartLocation() != null ? trip.getStartLocation() : "Unknown",
                        trip.getEndLocation() != null ? trip.getEndLocation() : "Unknown"
                    ));
                    locationInfo.setTextSize(12);
                    locationInfo.setTextColor(0xFF6C757D);
                    locationInfo.setPadding(0, 5, 0, 10);
                    cardLayout.addView(locationInfo);
                }

                cardLayout.addView(tripInfo);

                // Button layout - ALWAYS show Edit, show Delete only in full view
                LinearLayout buttonLayout = new LinearLayout(this);
                buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
                buttonLayout.setPadding(0, 10, 0, 0);

                Button editButton = new Button(this);
                editButton.setText("✏️ Edit");
                editButton.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));
                editButton.setBackgroundColor(0xFF28A745);
                editButton.setTextColor(0xFFFFFFFF);
                editButton.setTextSize(12);
                editButton.setOnClickListener(v -> showEditTripDialog(trip));

                buttonLayout.addView(editButton);

                // NEW: Add Delete button for full view (not compact)
                if (!compact) {
                    Button deleteButton = new Button(this);
                    deleteButton.setText("🗑️ Delete");
                    deleteButton.setLayoutParams(new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1));
                    deleteButton.setBackgroundColor(0xFFDC3545);
                    deleteButton.setTextColor(0xFFFFFFFF);
                    deleteButton.setTextSize(12);
                    deleteButton.setOnClickListener(v -> showDeleteTripDialog(trip));

                    buttonLayout.addView(deleteButton);
                }

                cardLayout.addView(buttonLayout);

                // Add hint text for full view
                if (!compact) {
                    TextView hintText = new TextView(this);
                    hintText.setText("💡 Tap Edit to modify trip details, Delete to remove permanently");
                    hintText.setTextSize(10);
                    hintText.setTextColor(0xFF6C757D);
                    hintText.setPadding(0, 5, 0, 0);
                    cardLayout.addView(hintText);
                }

                return cardLayout;
            }

            // Existing edit dialog method (unchanged)
            private void showEditTripDialog(Trip trip) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("✏️ Edit Trip");

                ScrollView scrollView = new ScrollView(this);
                LinearLayout layout = new LinearLayout(this);
                layout.setOrientation(LinearLayout.VERTICAL);
                layout.setPadding(40, 20, 40, 20);

                // Distance field
                TextView distanceLabel = new TextView(this);
                distanceLabel.setText("Distance (miles):");
                distanceLabel.setTextSize(14);
                distanceLabel.setTypeface(null, Typeface.BOLD);

                EditText distanceEdit = new EditText(this);
                distanceEdit.setText(String.format(Locale.getDefault(), "%.2f", trip.getDistance()));
                distanceEdit.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL);

                // Start location field
                TextView startLabel = new TextView(this);
                startLabel.setText("Start Location:");
                startLabel.setTextSize(14);
                startLabel.setTypeface(null, Typeface.BOLD);
                startLabel.setPadding(0, 20, 0, 0);

                EditText startEdit = new EditText(this);
                startEdit.setText(trip.getStartLocation() != null ? trip.getStartLocation() : "");

                // End location field
                TextView endLabel = new TextView(this);
                endLabel.setText("End Location:");
                endLabel.setTextSize(14);
                endLabel.setTypeface(null, Typeface.BOLD);
                endLabel.setPadding(0, 20, 0, 0);

                EditText endEdit = new EditText(this);
                endEdit.setText(trip.getEndLocation() != null ? trip.getEndLocation() : "");

                // Category spinner
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category:");
                categoryLabel.setTextSize(14);
                categoryLabel.setTypeface(null, Typeface.BOLD);
                categoryLabel.setPadding(0, 20, 0, 0);

                Spinner categorySpinner = new Spinner(this);
                String[] categories = {"Business", "Medical", "Charity", "Personal"};
                ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categorySpinner.setAdapter(adapter);

                // Set current category
                String currentCategory = trip.getCategory();
                for (int i = 0; i < categories.length; i++) {
                    if (categories[i].equals(currentCategory)) {
                        categorySpinner.setSelection(i);
                        break;
                    }
                }

                // Notes field
                TextView notesLabel = new TextView(this);
                notesLabel.setText("Notes:");
                notesLabel.setTextSize(14);
                notesLabel.setTypeface(null, Typeface.BOLD);
                notesLabel.setPadding(0, 20, 0, 0);

                EditText notesEdit = new EditText(this);
                notesEdit.setText(trip.getNotes() != null ? trip.getNotes() : "");
                notesEdit.setLines(3);

                layout.addView(distanceLabel);
                layout.addView(distanceEdit);
                layout.addView(startLabel);
                layout.addView(startEdit);
                layout.addView(endLabel);
                layout.addView(endEdit);
                layout.addView(categoryLabel);
                layout.addView(categorySpinner);
                layout.addView(notesLabel);
                layout.addView(notesEdit);

                scrollView.addView(layout);
                builder.setView(scrollView);

                builder.setPositiveButton("💾 Save Changes", (dialog, which) -> {
                    try {
                        // Update trip object
                        double newDistance = Double.parseDouble(distanceEdit.getText().toString());
                        trip.setDistance(newDistance);
                        trip.setStartLocation(startEdit.getText().toString().trim());
                        trip.setEndLocation(endEdit.getText().toString().trim());
                        trip.setCategory(categorySpinner.getSelectedItem().toString());
                        trip.setNotes(notesEdit.getText().toString().trim());

                        // Save to storage
                        boolean success = tripStorage.updateTrip(trip);
                        
                        if (success) {
                            // Sync to API if enabled
                            if (tripStorage.isApiSyncEnabled()) {
                                try {
                                    CloudBackupService cloudService = new CloudBackupService(this);
                                    cloudService.saveTrip(trip);
                                } catch (Exception e) {
                                    Log.e(TAG, "API sync failed: " + e.getMessage());
                                }
                            }
                            
                            // Update UI
                            if ("home".equals(currentTab)) {
                                updateRecentTrips();
                            } else {
                                updateAllTrips();
                            }
                            updateStats();
                            
                            Toast.makeText(this, "✅ Trip updated successfully", Toast.LENGTH_SHORT).show();
                            
                        } else {
                            Toast.makeText(this, "❌ Failed to update trip", Toast.LENGTH_SHORT).show();
                        }
                        
                    } catch (Exception e) {
                        Log.e(TAG, "Error updating trip: " + e.getMessage(), e);
                        Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                });

                builder.setNegativeButton("❌ Cancel", null);
                
                AlertDialog editDialog = builder.create();
                editDialog.show();
            }

            // NEW: Delete trip confirmation dialog
            private void showDeleteTripDialog(Trip trip) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("🗑️ Delete Trip - Confirmation Required");

                // Create trip details preview
                LinearLayout layout = new LinearLayout(this);
                layout.setOrientation(LinearLayout.VERTICAL);
                layout.setPadding(40, 20, 40, 20);

                // Warning message
                TextView warningText = new TextView(this);
                warningText.setText("⚠️ This action cannot be undone");
                warningText.setTextSize(16);
                warningText.setTextColor(0xFFDC3545); // Red
                warningText.setTypeface(null, Typeface.BOLD);
                warningText.setPadding(0, 0, 0, 20);

                // Trip details preview
                TextView tripDetails = new TextView(this);
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, yyyy 'at' h:mm a", Locale.US);
                String tripInfo = String.format(Locale.getDefault(),
                    "📍 From: %s\n" +
                    "📍 To: %s\n" +
                    "📏 Distance: %.2f miles\n" +
                    "📅 Date: %s\n" +
                    "🏷️ Category: %s\n" +
                    "🤖 Type: %s",
                    trip.getStartLocation() != null ? trip.getStartLocation() : "Unknown",
                    trip.getEndLocation() != null ? trip.getEndLocation() : "Unknown",
                    trip.getDistance(),
                    dateFormat.format(new Date(trip.getStartTime())),
                    trip.getCategory() != null ? trip.getCategory() : "Uncategorized",
                    trip.isAutoDetected() ? "Auto-detected" : "Manual entry"
                );
                tripDetails.setText(tripInfo);
                tripDetails.setTextSize(14);
                tripDetails.setBackgroundColor(0xFFF8F9FA);
                tripDetails.setPadding(20, 15, 20, 15);

                layout.addView(warningText);
                layout.addView(tripDetails);
                builder.setView(layout);

                // Confirm delete button (red)
                builder.setPositiveButton("🗑️ DELETE PERMANENTLY", (dialog, which) -> {
                    try {
                        // Delete from local storage
                        boolean localSuccess = tripStorage.deleteTrip(trip.getId());
                        
                        if (localSuccess) {
                            // Delete from API if sync enabled
                            if (tripStorage.isApiSyncEnabled()) {
                                try {
                                    CloudBackupService cloudService = new CloudBackupService(MainActivity.this);
                                    cloudService.deleteTrip(trip.getId());
                                } catch (Exception e) {
                                    Log.e(TAG, "API delete failed: " + e.getMessage());
                                }
                            }
                            
                            // Update UI
                            if ("home".equals(currentTab)) {
                                updateRecentTrips();
                            } else {
                                updateAllTrips();
                            }
                            updateStats();
                            
                            Toast.makeText(this, "🗑️ Trip deleted successfully", Toast.LENGTH_SHORT).show();
                            
                        } else {
                            Toast.makeText(this, "❌ Failed to delete trip", Toast.LENGTH_SHORT).show();
                        }
                        
                    } catch (Exception e) {
                        Log.e(TAG, "Error deleting trip: " + e.getMessage(), e);
                        Toast.makeText(this, "Error: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                    }
                });

                // Cancel button
                builder.setNegativeButton("❌ Cancel", null);
                
                AlertDialog deleteDialog = builder.create();
                deleteDialog.show();
            }

            private void showError(String message) {
                Toast.makeText(this, message, Toast.LENGTH_LONG).show();
            }

            @Override
            protected void onDestroy() {
                super.onDestroy();
                if (locationService != null) {
                    locationService.cleanup();
                }
            }

            // Include all existing classes (Trip, TripStorage, LocationService, CloudBackupService)
            // These remain unchanged from your working version

            public static class Trip {
                private String id;
                private double distance;
                private long startTime;
                private long endTime;
                private String startLocation;
                private String endLocation;
                private String category;
                private String notes;
                private boolean autoDetected;

                public Trip(String id, double distance, long startTime) {
                    this.id = id;
                    this.distance = distance;
                    this.startTime = startTime;
                    this.endTime = System.currentTimeMillis();
                    this.autoDetected = true;
                }

                // Getters and setters
                public String getId() { return id; }
                public double getDistance() { return distance; }
                public void setDistance(double distance) { this.distance = distance; }
                public long getStartTime() { return startTime; }
                public long getEndTime() { return endTime; }
                public String getStartLocation() { return startLocation; }
                public void setStartLocation(String startLocation) { this.startLocation = startLocation; }
                public String getEndLocation() { return endLocation; }
                public void setEndLocation(String endLocation) { this.endLocation = endLocation; }
                public String getCategory() { return category; }
                public void setCategory(String category) { this.category = category; }
                public String getNotes() { return notes; }
                public void setNotes(String notes) { this.notes = notes; }
                public boolean isAutoDetected() { return autoDetected; }
                public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }
            }

            public static class TripStorage {
                private static final String PREFS_NAME = "MileTrackerTrips";
                private static final String TRIPS_KEY = "trips";
                private SharedPreferences prefs;
                private Context context;

                public TripStorage(Context context) {
                    this.context = context;
                    this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                }

                public boolean saveTrip(Trip trip) {
                    try {
                        List<Trip> trips = getAllTrips();
                        
                        // Check if trip already exists (update instead of add)
                        boolean updated = false;
                        for (int i = 0; i < trips.size(); i++) {
                            if (trips.get(i).getId().equals(trip.getId())) {
                                trips.set(i, trip);
                                updated = true;
                                break;
                            }
                        }
                        
                        // Add new trip if not updating
                        if (!updated) {
                            trips.add(trip);
                        }
                        
                        return saveAllTrips(trips);
                        
                    } catch (Exception e) {
                        Log.e("TripStorage", "Error saving trip", e);
                        return false;
                    }
                }

                public boolean updateTrip(Trip trip) {
                    return saveTrip(trip); // Same logic as save
                }

                // NEW: Delete trip method
                public boolean deleteTrip(String tripId) {
                    try {
                        List<Trip> trips = getAllTrips();
                        boolean removed = trips.removeIf(trip -> trip.getId().equals(tripId));
                        
                        if (removed) {
                            return saveAllTrips(trips);
                        }
                        
                        return false;
                        
                    } catch (Exception e) {
                        Log.e("TripStorage", "Error deleting trip", e);
                        return false;
                    }
                }

                public List<Trip> getAllTrips() {
                    List<Trip> trips = new ArrayList<>();
                    try {
                        String tripsJson = prefs.getString(TRIPS_KEY, "[]");
                        JSONArray jsonArray = new JSONArray(tripsJson);
                        
                        for (int i = 0; i < jsonArray.length(); i++) {
                            JSONObject tripJson = jsonArray.getJSONObject(i);
                            Trip trip = new Trip(
                                tripJson.getString("id"),
                                tripJson.getDouble("distance"),
                                tripJson.getLong("startTime")
                            );
                            
                            if (tripJson.has("endTime")) trip.endTime = tripJson.getLong("endTime");
                            if (tripJson.has("startLocation")) trip.setStartLocation(tripJson.getString("startLocation"));
                            if (tripJson.has("endLocation")) trip.setEndLocation(tripJson.getString("endLocation"));
                            if (tripJson.has("category")) trip.setCategory(tripJson.getString("category"));
                            if (tripJson.has("notes")) trip.setNotes(tripJson.getString("notes"));
                            if (tripJson.has("autoDetected")) trip.setAutoDetected(tripJson.getBoolean("autoDetected"));
                            
                            trips.add(trip);
                        }
                        
                        // Sort by start time (newest first)
                        trips.sort((a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
                        
                    } catch (Exception e) {
                        Log.e("TripStorage", "Error loading trips", e);
                    }
                    
                    return trips;
                }

                public List<Trip> getRecentTrips(int limit) {
                    List<Trip> allTrips = getAllTrips();
                    return allTrips.subList(0, Math.min(limit, allTrips.size()));
                }

                private boolean saveAllTrips(List<Trip> trips) {
                    try {
                        JSONArray jsonArray = new JSONArray();
                        
                        for (Trip trip : trips) {
                            JSONObject tripJson = new JSONObject();
                            tripJson.put("id", trip.getId());
                            tripJson.put("distance", trip.getDistance());
                            tripJson.put("startTime", trip.getStartTime());
                            tripJson.put("endTime", trip.getEndTime());
                            tripJson.put("startLocation", trip.getStartLocation());
                            tripJson.put("endLocation", trip.getEndLocation());
                            tripJson.put("category", trip.getCategory());
                            tripJson.put("notes", trip.getNotes());
                            tripJson.put("autoDetected", trip.isAutoDetected());
                            
                            jsonArray.put(tripJson);
                        }
                        
                        return prefs.edit().putString(TRIPS_KEY, jsonArray.toString()).commit();
                        
                    } catch (Exception e) {
                        Log.e("TripStorage", "Error saving all trips", e);
                        return false;
                    }
                }

                public boolean isApiSyncEnabled() {
                    return prefs.getBoolean("api_sync_enabled", true);
                }
            }

            public static class LocationService {
                private Context context;
                private TripStorage tripStorage;
                private boolean autoDetectionEnabled = false;
                private boolean manualTripActive = false;

                public LocationService(Context context, TripStorage tripStorage) {
                    this.context = context;
                    this.tripStorage = tripStorage;
                }

                public boolean toggleAutoDetection() {
                    autoDetectionEnabled = !autoDetectionEnabled;
                    // TODO: Implement actual GPS monitoring
                    return autoDetectionEnabled;
                }

                public boolean isAutoDetectionEnabled() {
                    return autoDetectionEnabled;
                }

                public void startManualTrip() {
                    manualTripActive = true;
                    // TODO: Implement manual trip recording
                }

                public void stopManualTrip() {
                    if (manualTripActive) {
                        // Create a sample trip for testing
                        Trip trip = new Trip("manual_" + System.currentTimeMillis(), 2.5, System.currentTimeMillis() - 600000);
                        trip.setAutoDetected(false);
                        trip.setStartLocation("Manual Start Location");
                        trip.setEndLocation("Manual End Location");
                        trip.setCategory("Business");
                        
                        tripStorage.saveTrip(trip);
                        manualTripActive = false;
                    }
                }

                public void cleanup() {
                    // TODO: Cleanup location services
                }
            }

            public static class CloudBackupService {
                private static final String TAG = "CloudBackupService";
                private static final String API_BASE_URL = "https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev/api";

                private Context context;
                private ExecutorService executor;

                public CloudBackupService(Context context) {
                    this.context = context;
                    this.executor = Executors.newSingleThreadExecutor();
                }

                public void saveTrip(Trip trip) {
                    executor.execute(() -> {
                        try {
                            // TODO: Implement API save call
                            Log.d(TAG, "Saving trip to API: " + trip.getId());
                        } catch (Exception e) {
                            Log.e(TAG, "Error saving trip to API", e);
                        }
                    });
                }

                // NEW: Delete trip from API
                public void deleteTrip(String tripId) {
                    executor.execute(() -> {
                        try {
                            // TODO: Implement API delete call
                            Log.d(TAG, "Deleting trip from API: " + tripId);
                        } catch (Exception e) {
                            Log.e(TAG, "Error deleting trip from API", e);
                        }
                    });
                }
            }
        }
        EOF

    - name: Create Android Manifest
      run: |
        mkdir -p android-app/src/main
        cat > android-app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />

            <application
                android:allowBackup="true"
                android:icon="@android:drawable/ic_menu_mylocation"
                android:label="MileTracker Pro"
                android:theme="@android:style/Theme.Material.Light">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF

    - name: Create Build Configuration
      run: |
        cat > android-app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
        }

        android {
            namespace 'com.miletrackerpro'
            compileSdk 35

            defaultConfig {
                applicationId "com.miletrackerpro"
                minSdk 24
                targetSdk 35
                versionCode 463
                versionName "4.9.63"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.11.0'
        }
        EOF

        cat > settings.gradle << 'EOF'
        include ':android-app'
        EOF

        cat > build.gradle << 'EOF'
        // Top-level build file
        buildscript {
            ext {
                gradle_version = '8.2.0'
            }
            dependencies {
                classpath "com.android.tools.build:gradle:$gradle_version"
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        EOF

    - name: Build APK
      run: |
        cd android-app
        ../gradlew assembleRelease

    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: MileTracker-Pro-v4.9.63-Delete-UI
        path: android-app/build/outputs/apk/release/android-app-release.apk
