name: MileTracker Pro APK Build - Card Display Fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Remove expo-constants from package.json (React Native 0.76.0 compatibility)
      run: |
        if [ -f package.json ]; then
          sed -i '/expo-constants/d' package.json
          echo "Removed expo-constants for React Native 0.76.0 compatibility"
        fi

    - name: Create Android project structure
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/auth
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/drawable

    - name: Create settings.gradle
      run: |
        cat > settings.gradle << 'EOF'
        rootProject.name = 'MileTrackerPro'
        include ':app'
        project(':app').projectDir = new File(rootProject.projectDir, 'android/app')
        EOF

    - name: Create android/build.gradle
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            ext {
                kotlin_version = '1.9.24'
                compileSdkVersion = 35
                targetSdkVersion = 35
                minSdkVersion = 24
                ndkVersion = "26.3.11579264"
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.7.3'
                classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url 'https://www.jitpack.io' }
            }
        }
        EOF

    - name: Create android/gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=1g
        android.useAndroidX=true
        android.enableJetifier=true
        android.disableAutomaticComponentCreation=true
        org.gradle.daemon=false
        org.gradle.configureondemand=false
        org.gradle.parallel=false
        EOF

    - name: Create android/app/build.gradle
      run: |
        cat > android/app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'

        android {
            namespace 'com.miletrackerpro.app'
            compileSdk 35

            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdk 24
                targetSdk 35
                versionCode 71
                versionName "4.9.71"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            packagingOptions {
                pickFirst '**/libc++_shared.so'
                pickFirst '**/libjsc.so'
            }

            lintOptions {
                checkReleaseBuilds false
                abortOnError false
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.7.0'
            implementation 'androidx.core:core:1.15.0'
            implementation 'com.google.android.gms:play-services-location:21.3.0'
            implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
        }
        EOF

    - name: Create AndroidManifest.xml
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

            <application
                android:allowBackup="true"
                android:icon="@android:drawable/ic_menu_mylocation"
                android:label="MileTracker Pro"
                android:theme="@android:style/Theme.Material.Light.DarkActionBar">

                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>

                <activity
                    android:name=".auth.AuthActivity"
                    android:exported="false" />

                <service
                    android:name=".services.AutoDetectionService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="location" />

                <service
                    android:name=".services.ManualTripService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="location" />

                <receiver
                    android:name=".services.BootReceiver"
                    android:enabled="true"
                    android:exported="true">
                    <intent-filter android:priority="1000">
                        <action android:name="android.intent.action.BOOT_COMPLETED" />
                        <category android:name="android.intent.category.DEFAULT" />
                    </intent-filter>
                </receiver>

            </application>
        </manifest>
        EOF

    - name: Create strings.xml
      run: |
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">MileTracker Pro</string>
        </resources>
        EOF

    - name: Create colors.xml
      run: |
        cat > android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="colorPrimary">#667eea</color>
            <color name="colorPrimaryDark">#5a6fd8</color>
            <color name="colorAccent">#764ba2</color>
        </resources>
        EOF

    - name: Create DeviceIdentification.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/DeviceIdentification.java << 'EOF'
        package com.miletrackerpro.app;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.os.Build;
          import android.provider.Settings;
          import android.util.Log;

          import java.security.MessageDigest;
          import java.util.UUID;

          public class DeviceIdentification {
              private static final String TAG = "DeviceIdentification";
              private static final String PREFS_NAME = "DeviceIdentificationPrefs";
              private static final String STABLE_DEVICE_ID_KEY = "stable_device_id";
              private static final String USER_ID_KEY = "user_id";

              public static String getStableDeviceId(Context context) {
                  SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  String stableId = prefs.getString(STABLE_DEVICE_ID_KEY, null);

                  if (stableId == null) {
                      stableId = generateStableDeviceId(context);
                      prefs.edit().putString(STABLE_DEVICE_ID_KEY, stableId).apply();
                      Log.d(TAG, "Generated new stable device ID: " + stableId);
                  }

                  return stableId;
              }

              private static String generateStableDeviceId(Context context) {
                  try {
                      String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                      String deviceInfo = Build.MANUFACTURER + "_" + Build.MODEL + "_" + Build.BOARD;
                      String combined = androidId + "_" + deviceInfo;

                      MessageDigest digest = MessageDigest.getInstance("SHA-256");
                      byte[] hash = digest.digest(combined.getBytes());
                      StringBuilder hexString = new StringBuilder();

                      for (byte b : hash) {
                          String hex = Integer.toHexString(0xff & b);
                          if (hex.length() == 1) {
                              hexString.append('0');
                          }
                          hexString.append(hex);
                      }

                      return hexString.toString().substring(0, 16);
                  } catch (Exception e) {
                      Log.e(TAG, "Error generating stable device ID", e);
                      return UUID.randomUUID().toString().substring(0, 16);
                  }
              }

              public static String getUserId(Context context) {
                  SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  String userId = prefs.getString(USER_ID_KEY, null);

                  if (userId == null) {
                      userId = "user_" + getStableDeviceId(context);
                      prefs.edit().putString(USER_ID_KEY, userId).apply();
                      Log.d(TAG, "Generated new user ID: " + userId);
                  }

                  return userId;
              }
          }
        EOF

    - name: Create CloudBackupService.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/CloudBackupService.java << 'EOF'
        package com.miletrackerpro.app;

          import android.content.Context;
          import android.os.AsyncTask;
          import android.util.Log;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import java.io.BufferedReader;
          import java.io.InputStreamReader;
          import java.io.OutputStream;
          import java.net.HttpURLConnection;
          import java.net.URL;
          import java.text.SimpleDateFormat;
          import java.util.ArrayList;
          import java.util.Date;
          import java.util.List;
          import java.util.Locale;
          import org.json.JSONArray;
          import org.json.JSONObject;

          public class CloudBackupService {
              private static final String TAG = "CloudBackupService";
              private static final String API_BASE_URL = "https://workspace-codenurse.replit.app/api";
              private static final String BACKUP_API_BASE_URL = "http://0.0.0.0:5000/api";

              private Context context;
              private TripStorage tripStorage;

              public CloudBackupService(Context context) {
                  this.context = context;
                  this.tripStorage = new TripStorage(context);
              }

              public void downloadExistingTrips() {
                  new DownloadTripsTask().execute();
              }

              public void backupTrip(Trip trip) {
                  new BackupTripTask().execute(trip);
              }

              private class DownloadTripsTask extends AsyncTask<Void, Void, List<Trip>> {
                  @Override
                  protected List<Trip> doInBackground(Void... voids) {
                      List<Trip> downloadedTrips = new ArrayList<>();
                      String userId = DeviceIdentification.getUserId(context);

                      try {
                          String[] apiUrls = {API_BASE_URL, BACKUP_API_BASE_URL};

                          for (String baseUrl : apiUrls) {
                              try {
                                  URL url = new URL(baseUrl + "/trips/" + userId);
                                  HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                                  conn.setRequestMethod("GET");
                                  conn.setRequestProperty("Content-Type", "application/json");
                                  conn.setRequestProperty("X-User-ID", userId);
                                  conn.setConnectTimeout(5000);
                                  conn.setReadTimeout(10000);

                                  int responseCode = conn.getResponseCode();
                                  if (responseCode == HttpURLConnection.HTTP_OK) {
                                      BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                                      StringBuilder response = new StringBuilder();
                                      String line;
                                      while ((line = reader.readLine()) != null) {
                                          response.append(line);
                                      }
                                      reader.close();

                                      JSONObject jsonResponse = new JSONObject(response.toString());
                                      if (jsonResponse.getBoolean("success")) {
                                          JSONArray tripsArray = jsonResponse.getJSONArray("trips");

                                          for (int i = 0; i < tripsArray.length(); i++) {
                                              JSONObject tripJson = tripsArray.getJSONObject(i);
                                              Trip trip = parseJsonToTrip(tripJson);
                                              if (trip != null) {
                                                  downloadedTrips.add(trip);
                                              }
                                          }

                                          Log.d(TAG, "Successfully downloaded " + downloadedTrips.size() + " trips from " + baseUrl);
                                          break;
                                      }
                                  }
                                  conn.disconnect();
                              } catch (Exception e) {
                                  Log.w(TAG, "Failed to download from " + baseUrl + ": " + e.getMessage());
                              }
                          }
                      } catch (Exception e) {
                          Log.e(TAG, "Error downloading trips", e);
                      }

                      return downloadedTrips;
                  }

                  @Override
                  protected void onPostExecute(List<Trip> downloadedTrips) {
                      if (!downloadedTrips.isEmpty()) {
                          for (Trip trip : downloadedTrips) {
                              if (!tripStorage.tripExists(trip.getId())) {
                                  tripStorage.addTrip(trip);
                              }
                          }
                          Log.d(TAG, "Downloaded and saved " + downloadedTrips.size() + " new trips");
                      }
                  }
              }

              private Trip parseJsonToTrip(JSONObject json) {
                  try {
                      Trip trip = new Trip();
                      trip.setId(json.getLong("id"));
                      trip.setStartAddress(json.optString("start_address", "Unknown"));
                      trip.setEndAddress(json.optString("end_address", "Unknown"));
                      trip.setDistance(json.getDouble("distance"));
                      trip.setCategory(json.optString("category", "Business"));
                      trip.setClientName(json.optString("client_name", ""));
                      trip.setNotes(json.optString("notes", ""));

                      String dateString = json.optString("date", "");
                      if (!dateString.isEmpty()) {
                          try {
                              SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
                              Date date = format.parse(dateString);
                              trip.setStartTime(date.getTime());
                              trip.setEndTime(date.getTime() + (30 * 60 * 1000)); // 30 min default
                          } catch (Exception e) {
                              trip.setStartTime(System.currentTimeMillis());
                              trip.setEndTime(System.currentTimeMillis() + (30 * 60 * 1000));
                          }
                      } else {
                          trip.setStartTime(System.currentTimeMillis());
                          trip.setEndTime(System.currentTimeMillis() + (30 * 60 * 1000));
                      }

                      return trip;
                  } catch (Exception e) {
                      Log.e(TAG, "Error parsing trip JSON", e);
                      return null;
                  }
              }

              private class BackupTripTask extends AsyncTask<Trip, Void, Boolean> {
                  @Override
                  protected Boolean doInBackground(Trip... trips) {
                      Trip trip = trips[0];
                      String userId = DeviceIdentification.getUserId(context);

                      try {
                          String[] apiUrls = {API_BASE_URL, BACKUP_API_BASE_URL};

                          for (String baseUrl : apiUrls) {
                              try {
                                  URL url = new URL(baseUrl + "/trips");
                                  HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                                  conn.setRequestMethod("POST");
                                  conn.setRequestProperty("Content-Type", "application/json");
                                  conn.setRequestProperty("X-User-ID", userId);
                                  conn.setDoOutput(true);
                                  conn.setConnectTimeout(5000);
                                  conn.setReadTimeout(10000);

                                  JSONObject tripJson = new JSONObject();
                                  tripJson.put("id", trip.getId());
                                  tripJson.put("start_address", trip.getStartAddress());
                                  tripJson.put("end_address", trip.getEndAddress());
                                  tripJson.put("distance", trip.getDistance());
                                  tripJson.put("category", trip.getCategory());
                                  tripJson.put("client_name", trip.getClientName());
                                  tripJson.put("notes", trip.getNotes());

                                  SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.US);
                                  tripJson.put("date", format.format(new Date(trip.getStartTime())));
                                  tripJson.put("user_id", userId);
                                  tripJson.put("device_id", DeviceIdentification.getStableDeviceId(context));

                                  OutputStream os = conn.getOutputStream();
                                  os.write(tripJson.toString().getBytes());
                                  os.flush();
                                  os.close();

                                  int responseCode = conn.getResponseCode();
                                  if (responseCode == HttpURLConnection.HTTP_OK || responseCode == HttpURLConnection.HTTP_CREATED) {
                                      Log.d(TAG, "Successfully backed up trip to " + baseUrl);
                                      conn.disconnect();
                                      return true;
                                  }
                                  conn.disconnect();
                              } catch (Exception e) {
                                  Log.w(TAG, "Failed to backup to " + baseUrl + ": " + e.getMessage());
                              }
                          }
                      } catch (Exception e) {
                          Log.e(TAG, "Error backing up trip", e);
                      }

                      return false;
                  }
              }
          }
        EOF

    - name: Create AuthActivity.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/auth/AuthActivity.java << 'EOF'
        package com.miletrackerpro.app.auth;

          import android.content.Intent;
          import android.os.Bundle;
          import android.text.InputType;
          import android.util.Log;
          import android.view.Gravity;
          import android.widget.Button;
          import android.widget.EditText;
          import android.widget.LinearLayout;
          import android.widget.ScrollView;
          import android.widget.TextView;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import com.miletrackerpro.app.MainActivity;

          public class AuthActivity extends AppCompatActivity {
              private static final String TAG = "AuthActivity";

              private UserAuthManager authManager;
              private LinearLayout mainLayout;
              private boolean isLoginMode = true;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);

                  authManager = new UserAuthManager(this);

                  if (authManager.isUserLoggedIn()) {
                      startActivity(new Intent(this, MainActivity.class));
                      finish();
                      return;
                  }

                  ScrollView scrollView = new ScrollView(this);
                  scrollView.setFillViewport(true);

                  mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setGravity(Gravity.CENTER);
                  mainLayout.setPadding(40, 60, 40, 40);
                  mainLayout.setBackgroundColor(0xFFF5F7FA);

                  createLoginInterface();

                  scrollView.addView(mainLayout);
                  setContentView(scrollView);
              }

              private void createLoginInterface() {
                  mainLayout.removeAllViews();

                  TextView titleText = new TextView(this);
                  titleText.setText("🚗 MileTracker Pro");
                  titleText.setTextSize(28);
                  titleText.setTextColor(0xFF667eea);
                  titleText.setGravity(Gravity.CENTER);
                  titleText.setPadding(0, 0, 0, 20);
                  mainLayout.addView(titleText);

                  TextView subtitleText = new TextView(this);
                  subtitleText.setText(isLoginMode ? "Welcome Back!" : "Create Your Account");
                  subtitleText.setTextSize(18);
                  subtitleText.setTextColor(0xFF333333);
                  subtitleText.setGravity(Gravity.CENTER);
                  subtitleText.setPadding(0, 0, 0, 40);
                  mainLayout.addView(subtitleText);

                  EditText emailInput = new EditText(this);
                  emailInput.setHint("Email Address");
                  emailInput.setInputType(InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
                  emailInput.setPadding(20, 16, 20, 16);
                  emailInput.setBackgroundColor(0xFFFFFFFF);
                  emailInput.setTextSize(16);
                  LinearLayout.LayoutParams emailParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  emailParams.setMargins(0, 0, 0, 16);
                  emailInput.setLayoutParams(emailParams);
                  mainLayout.addView(emailInput);

                  EditText passwordInput = new EditText(this);
                  passwordInput.setHint("Password");
                  passwordInput.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_PASSWORD);
                  passwordInput.setPadding(20, 16, 20, 16);
                  passwordInput.setBackgroundColor(0xFFFFFFFF);
                  passwordInput.setTextSize(16);
                  LinearLayout.LayoutParams passwordParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  passwordParams.setMargins(0, 0, 0, 24);
                  passwordInput.setLayoutParams(passwordParams);
                  mainLayout.addView(passwordInput);

                  Button primaryButton = new Button(this);
                  primaryButton.setText(isLoginMode ? "Sign In" : "Create Account");
                  primaryButton.setBackgroundColor(0xFF667eea);
                  primaryButton.setTextColor(0xFFFFFFFF);
                  primaryButton.setTextSize(16);
                  primaryButton.setPadding(0, 20, 0, 20);
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  buttonParams.setMargins(0, 0, 0, 16);
                  primaryButton.setLayoutParams(buttonParams);
                  mainLayout.addView(primaryButton);

                  Button switchModeButton = new Button(this);
                  switchModeButton.setText(isLoginMode ? "Need an account? Sign Up" : "Already have an account? Sign In");
                  switchModeButton.setBackgroundColor(0x00000000);
                  switchModeButton.setTextColor(0xFF667eea);
                  switchModeButton.setTextSize(14);
                  LinearLayout.LayoutParams switchParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  switchParams.setMargins(0, 0, 0, 24);
                  switchModeButton.setLayoutParams(switchParams);
                  mainLayout.addView(switchModeButton);

                  Button skipButton = new Button(this);
                  skipButton.setText("Skip for now (Limited features)");
                  skipButton.setBackgroundColor(0xFFE0E0E0);
                  skipButton.setTextColor(0xFF666666);
                  skipButton.setTextSize(14);
                  skipButton.setPadding(0, 16, 0, 16);
                  LinearLayout.LayoutParams skipParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  skipButton.setLayoutParams(skipParams);
                  mainLayout.addView(skipButton);

                  primaryButton.setOnClickListener(v -> {
                      String email = emailInput.getText().toString().trim();
                      String password = passwordInput.getText().toString().trim();

                      if (email.isEmpty() || password.isEmpty()) {
                          Toast.makeText(this, "Please fill in all fields", Toast.LENGTH_SHORT).show();
                          return;
                      }

                      if (isLoginMode) {
                          handleLogin(email, password);
                      } else {
                          handleSignup(email, password);
                      }
                  });

                  switchModeButton.setOnClickListener(v -> {
                      isLoginMode = !isLoginMode;
                      createLoginInterface();
                  });

                  skipButton.setOnClickListener(v -> {
                      authManager.setAnonymousMode(true);
                      startActivity(new Intent(this, MainActivity.class));
                      finish();
                  });
              }

              private void handleLogin(String email, String password) {
                  boolean success = authManager.login(email, password);
                  if (success) {
                      Toast.makeText(this, "Login successful!", Toast.LENGTH_SHORT).show();
                      startActivity(new Intent(this, MainActivity.class));
                      finish();
                  } else {
                      Toast.makeText(this, "Invalid email or password", Toast.LENGTH_SHORT).show();
                  }
              }

              private void handleSignup(String email, String password) {
                  if (password.length() < 6) {
                      Toast.makeText(this, "Password must be at least 6 characters", Toast.LENGTH_SHORT).show();
                      return;
                  }

                  boolean success = authManager.register(email, password);
                  if (success) {
                      Toast.makeText(this, "Account created successfully!", Toast.LENGTH_SHORT).show();
                      startActivity(new Intent(this, MainActivity.class));
                      finish();
                  } else {
                      Toast.makeText(this, "Email already exists or registration failed", Toast.LENGTH_SHORT).show();
                  }
              }
          }
        EOF

    - name: Create UserAuthManager.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/auth/UserAuthManager.java << 'EOF'
        package com.miletrackerpro.app.auth;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.util.Log;
          import java.security.MessageDigest;
          import java.util.HashSet;
          import java.util.Set;

          public class UserAuthManager {
              private static final String TAG = "UserAuthManager";
              private static final String PREFS_NAME = "AuthPrefs";
              private static final String KEY_IS_LOGGED_IN = "is_logged_in";
              private static final String KEY_CURRENT_USER_EMAIL = "current_user_email";
              private static final String KEY_IS_ANONYMOUS = "is_anonymous";
              private static final String KEY_REGISTERED_USERS = "registered_users";

              private Context context;
              private SharedPreferences prefs;

              public UserAuthManager(Context context) {
                  this.context = context;
                  this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
              }

              public boolean register(String email, String password) {
                  try {
                      if (isEmailRegistered(email)) {
                          Log.w(TAG, "Email already registered: " + email);
                          return false;
                      }

                      String hashedPassword = hashPassword(password);
                      String userKey = "user_" + email;

                      prefs.edit()
                          .putString(userKey, hashedPassword)
                          .apply();

                      addToRegisteredUsers(email);

                      prefs.edit()
                          .putBoolean(KEY_IS_LOGGED_IN, true)
                          .putString(KEY_CURRENT_USER_EMAIL, email)
                          .putBoolean(KEY_IS_ANONYMOUS, false)
                          .apply();

                      Log.d(TAG, "User registered successfully: " + email);
                      return true;
                  } catch (Exception e) {
                      Log.e(TAG, "Registration failed", e);
                      return false;
                  }
              }

              public boolean login(String email, String password) {
                  try {
                      String userKey = "user_" + email;
                      String storedHashedPassword = prefs.getString(userKey, null);

                      if (storedHashedPassword == null) {
                          Log.w(TAG, "User not found: " + email);
                          return false;
                      }

                      String hashedPassword = hashPassword(password);
                      if (storedHashedPassword.equals(hashedPassword)) {
                          prefs.edit()
                              .putBoolean(KEY_IS_LOGGED_IN, true)
                              .putString(KEY_CURRENT_USER_EMAIL, email)
                              .putBoolean(KEY_IS_ANONYMOUS, false)
                              .apply();

                          Log.d(TAG, "User logged in successfully: " + email);
                          return true;
                      } else {
                          Log.w(TAG, "Invalid password for user: " + email);
                          return false;
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Login failed", e);
                      return false;
                  }
              }

              public void logout() {
                  prefs.edit()
                      .putBoolean(KEY_IS_LOGGED_IN, false)
                      .remove(KEY_CURRENT_USER_EMAIL)
                      .putBoolean(KEY_IS_ANONYMOUS, true)
                      .apply();
                  Log.d(TAG, "User logged out");
              }

              public boolean isUserLoggedIn() {
                  return prefs.getBoolean(KEY_IS_LOGGED_IN, false);
              }

              public String getCurrentUserEmail() {
                  return prefs.getString(KEY_CURRENT_USER_EMAIL, null);
              }

              public boolean isAnonymousMode() {
                  return prefs.getBoolean(KEY_IS_ANONYMOUS, true);
              }

              public void setAnonymousMode(boolean anonymous) {
                  prefs.edit()
                      .putBoolean(KEY_IS_ANONYMOUS, anonymous)
                      .putBoolean(KEY_IS_LOGGED_IN, !anonymous)
                      .apply();
              }

              private boolean isEmailRegistered(String email) {
                  String userKey = "user_" + email;
                  return prefs.contains(userKey);
              }

              private void addToRegisteredUsers(String email) {
                  Set<String> registeredUsers = prefs.getStringSet(KEY_REGISTERED_USERS, new HashSet<>());
                  Set<String> updatedUsers = new HashSet<>(registeredUsers);
                  updatedUsers.add(email);
                  prefs.edit().putStringSet(KEY_REGISTERED_USERS, updatedUsers).apply();
              }

              private String hashPassword(String password) throws Exception {
                  MessageDigest digest = MessageDigest.getInstance("SHA-256");
                  byte[] hash = digest.digest(password.getBytes());
                  StringBuilder hexString = new StringBuilder();

                  for (byte b : hash) {
                      String hex = Integer.toHexString(0xff & b);
                      if (hex.length() == 1) {
                          hexString.append('0');
                      }
                      hexString.append(hex);
                  }

                  return hexString.toString();
              }
          }
        EOF

    - name: Create Trip.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/Trip.java << 'EOF'
        package com.miletrackerpro.app.storage;

          import java.text.SimpleDateFormat;
          import java.util.Date;
          import java.util.Locale;

          public class Trip {
              private long id;
              private String startAddress;
              private String endAddress;
              private double distance;
              private long duration;
              private String category;
              private long startTime;
              private long endTime;
              private boolean autoDetected;
              private String clientName;
              private String notes;

              public Trip() {
                  this.id = System.currentTimeMillis();
                  this.startTime = System.currentTimeMillis();
                  this.endTime = System.currentTimeMillis();
                  this.category = "Business";
                  this.autoDetected = false;
                  this.clientName = "";
                  this.notes = "";
              }

              // Getters
              public long getId() { return id; }
              public String getStartAddress() { return startAddress; }
              public String getEndAddress() { return endAddress; }
              public double getDistance() { return distance; }
              public long getDuration() { return duration; }
              public String getCategory() { return category; }
              public long getStartTime() { return startTime; }
              public long getEndTime() { return endTime; }
              public boolean isAutoDetected() { return autoDetected; }
              public String getClientName() { return clientName; }
              public String getNotes() { return notes; }

              // Setters
              public void setId(long id) { this.id = id; }
              public void setStartAddress(String startAddress) { this.startAddress = startAddress; }
              public void setEndAddress(String endAddress) { this.endAddress = endAddress; }
              public void setDistance(double distance) { this.distance = distance; }
              public void setDuration(long duration) { this.duration = duration; }
              public void setCategory(String category) { this.category = category; }
              public void setStartTime(long startTime) { this.startTime = startTime; }
              public void setEndTime(long endTime) { this.endTime = endTime; }
              public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }
              public void setClientName(String clientName) { this.clientName = clientName; }
              public void setNotes(String notes) { this.notes = notes; }

              // Formatted display methods
              public String getFormattedDate() {
                  SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                  return sdf.format(new Date(startTime));
              }

              public String getFormattedDuration() {
                  long minutes = duration / (60 * 1000);
                  if (minutes < 60) {
                      return minutes + "m";
                  } else {
                      long hours = minutes / 60;
                      long remainingMinutes = minutes % 60;
                      return hours + "h " + remainingMinutes + "m";
                  }
              }

              public String getFormattedStartTime() {
                  SimpleDateFormat sdf = new SimpleDateFormat("h:mm a", Locale.getDefault());
                  return sdf.format(new Date(startTime));
              }

              public String getFormattedEndTime() {
                  SimpleDateFormat sdf = new SimpleDateFormat("h:mm a", Locale.getDefault());
                  return sdf.format(new Date(endTime));
              }
          }
        EOF

    - name: Create TripStorage.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
        package com.miletrackerpro.app.storage;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.util.Log;
          import org.json.JSONArray;
          import org.json.JSONObject;
          import java.util.ArrayList;
          import java.util.List;

          public class TripStorage {
              private static final String TAG = "TripStorage";
              private static final String PREFS_NAME = "TripStorage";
              private static final String TRIPS_KEY = "trips";
              private static final String CURRENT_TRIP_KEY = "current_trip";
              private static final String API_SYNC_KEY = "api_sync_enabled";

              private SharedPreferences prefs;

              public TripStorage(Context context) {
                  this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
              }

              public void addTrip(Trip trip) {
                  try {
                      List<Trip> trips = getAllTrips();
                      trips.add(trip);
                      saveAllTrips(trips);
                      Log.d(TAG, "Trip added: " + trip.getId());
                  } catch (Exception e) {
                      Log.e(TAG, "Error adding trip", e);
                  }
              }

              public List<Trip> getAllTrips() {
                  List<Trip> trips = new ArrayList<>();
                  try {
                      String tripsJson = prefs.getString(TRIPS_KEY, "[]");
                      JSONArray jsonArray = new JSONArray(tripsJson);

                      for (int i = 0; i < jsonArray.length(); i++) {
                          JSONObject tripJson = jsonArray.getJSONObject(i);
                          Trip trip = parseJsonToTrip(tripJson);
                          if (trip != null) {
                              trips.add(trip);
                          }
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Error loading trips", e);
                  }
                  return trips;
              }

              public Trip getTripById(long id) {
                  List<Trip> trips = getAllTrips();
                  for (Trip trip : trips) {
                      if (trip.getId() == id) {
                          return trip;
                      }
                  }
                  return null;
              }

              public boolean tripExists(long id) {
                  return getTripById(id) != null;
              }

              public void updateTrip(Trip updatedTrip) {
                  try {
                      List<Trip> trips = getAllTrips();
                      for (int i = 0; i < trips.size(); i++) {
                          if (trips.get(i).getId() == updatedTrip.getId()) {
                              trips.set(i, updatedTrip);
                              break;
                          }
                      }
                      saveAllTrips(trips);
                      Log.d(TAG, "Trip updated: " + updatedTrip.getId());
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating trip", e);
                  }
              }

              public void deleteTrip(long id) {
                  try {
                      List<Trip> trips = getAllTrips();
                      trips.removeIf(trip -> trip.getId() == id);
                      saveAllTrips(trips);
                      Log.d(TAG, "Trip deleted: " + id);
                  } catch (Exception e) {
                      Log.e(TAG, "Error deleting trip", e);
                  }
              }

              public void saveCurrentTrip(Trip trip) {
                  try {
                      JSONObject obj = tripToJson(trip);
                      prefs.edit().putString(CURRENT_TRIP_KEY, obj.toString()).apply();
                      Log.d(TAG, "Current trip saved: " + trip.getId());
                  } catch (Exception e) {
                      Log.e(TAG, "Error saving current trip", e);
                  }
              }

              public Trip getCurrentTrip() {
                  try {
                      String currentTripJson = prefs.getString(CURRENT_TRIP_KEY, null);
                      if (currentTripJson == null) return null;

                      JSONObject obj = new JSONObject(currentTripJson);
                      return parseJsonToTrip(obj);
                  } catch (Exception e) {
                      Log.e(TAG, "Error loading current trip", e);
                      return null;
                  }
              }

              public void clearCurrentTrip() {
                  prefs.edit().remove(CURRENT_TRIP_KEY).apply();
                  Log.d(TAG, "Current trip cleared");
              }

              public boolean isApiSyncEnabled() {
                  return prefs.getBoolean(API_SYNC_KEY, false);
              }

              public void setApiSyncEnabled(boolean enabled) {
                  prefs.edit().putBoolean(API_SYNC_KEY, enabled).apply();
              }

              public void mergeUserTrips(List<String> tripIds) {
                  // Implementation for merging trips
                  Log.d(TAG, "Merging trips: " + tripIds.size());
              }

              private void saveAllTrips(List<Trip> trips) {
                  try {
                      JSONArray jsonArray = new JSONArray();
                      for (Trip trip : trips) {
                          JSONObject tripJson = tripToJson(trip);
                          jsonArray.put(tripJson);
                      }
                      prefs.edit().putString(TRIPS_KEY, jsonArray.toString()).apply();
                      Log.d(TAG, "All trips saved: " + trips.size() + " trips");
                  } catch (Exception e) {
                      Log.e(TAG, "Error saving trips", e);
                  }
              }

              private JSONObject tripToJson(Trip trip) throws Exception {
                  JSONObject json = new JSONObject();
                  json.put("id", trip.getId());
                  json.put("startAddress", trip.getStartAddress());
                  json.put("endAddress", trip.getEndAddress());
                  json.put("distance", trip.getDistance());
                  json.put("duration", trip.getDuration());
                  json.put("category", trip.getCategory());
                  json.put("startTime", trip.getStartTime());
                  json.put("endTime", trip.getEndTime());
                  json.put("autoDetected", trip.isAutoDetected());
                  json.put("clientName", trip.getClientName());
                  json.put("notes", trip.getNotes());
                  return json;
              }

              private Trip parseJsonToTrip(JSONObject json) {
                  try {
                      Trip trip = new Trip();
                      trip.setId(json.optLong("id", System.currentTimeMillis()));
                      trip.setStartAddress(json.optString("startAddress", "Unknown"));
                      trip.setEndAddress(json.optString("endAddress", "Unknown"));
                      trip.setDistance(json.optDouble("distance", 0.0));
                      trip.setDuration(json.optLong("duration", 0));
                      trip.setCategory(json.optString("category", "Business"));
                      trip.setStartTime(json.optLong("startTime", System.currentTimeMillis()));
                      trip.setEndTime(json.optLong("endTime", System.currentTimeMillis()));
                      trip.setAutoDetected(json.optBoolean("autoDetected", false));
                      trip.setClientName(json.optString("clientName", ""));
                      trip.setNotes(json.optString("notes", ""));
                      return trip;
                  } catch (Exception e) {
                      Log.e(TAG, "Error parsing trip JSON", e);
                      return null;
                  }
              }
          }
        EOF

    - name: Create MainActivity.java with fixed card display
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

          import android.Manifest;
          import android.content.Context;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.Bundle;
          import android.os.Handler;
          import android.text.InputType;
          import android.util.Log;
          import android.view.Gravity;
          import android.view.View;
          import android.widget.AdapterView;
          import android.widget.ArrayAdapter;
          import android.widget.Button;
          import android.widget.CheckBox;
          import android.widget.EditText;
          import android.widget.LinearLayout;
          import android.widget.ScrollView;
          import android.widget.SearchView;
          import android.widget.Spinner;
          import android.widget.Switch;
          import android.widget.TextView;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          import com.miletrackerpro.app.services.AutoDetectionService;
          import com.miletrackerpro.app.services.ManualTripService;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import java.util.ArrayList;
          import java.util.List;

          public class MainActivity extends AppCompatActivity implements LocationListener {
              private static final String TAG = "MainActivity";
              private static final int LOCATION_PERMISSION_REQUEST = 1001;
              private static final int BACKGROUND_LOCATION_PERMISSION_REQUEST = 1002;

              private TripStorage tripStorage;
              private CloudBackupService cloudBackupService;
              private LocationManager locationManager;
              private LinearLayout mainContent;
              private LinearLayout allTripsLayout;
              private ScrollView allTripsScroll;
              private TextView statusText;
              private Switch autoDetectionToggle;
              private boolean isManualTripActive = false;

              // Field to track selected trips for merging
              private final List<String> selectedTripIds = new ArrayList<>();
              private boolean mergeMode = false;

              private void updateAllTrips() {
                  filterAndDisplayTrips("", "Newest First", "All Categories");
              }
              
              private void filterAndDisplayTrips(String searchQuery, String sortOption, String categoryFilter) {
                  try {
                      Log.d(TAG, "filterAndDisplayTrips() called - search: '" + searchQuery + "', sort: '" + sortOption + "', category: '" + categoryFilter + "'");
                      
                      // Clear existing views and selection
                      allTripsLayout.removeAllViews();
                      selectedTripIds.clear();
                      
                      List<Trip> trips = tripStorage.getAllTrips();
                      Log.d(TAG, "Total trips from storage: " + trips.size());

                      // Apply search filter with null safety
                      if (!searchQuery.isEmpty()) {
                          List<Trip> filteredTrips = new ArrayList<>();
                          String query = searchQuery.toLowerCase();
                          for (Trip trip : trips) {
                              // Null-safe string checking
                              String startAddr = trip.getStartAddress() != null ? trip.getStartAddress().toLowerCase() : "";
                              String endAddr = trip.getEndAddress() != null ? trip.getEndAddress().toLowerCase() : "";
                              String clientName = trip.getClientName() != null ? trip.getClientName().toLowerCase() : "";
                              String notes = trip.getNotes() != null ? trip.getNotes().toLowerCase() : "";
                              
                              if (startAddr.contains(query) || endAddr.contains(query) || 
                                  clientName.contains(query) || notes.contains(query)) {
                                  filteredTrips.add(trip);
                              }
                          }
                          trips = filteredTrips;
                          Log.d(TAG, "After search filter: " + trips.size() + " trips");
                      }
                      
                      // Apply category filter
                      if (!"All Categories".equals(categoryFilter)) {
                          List<Trip> filteredTrips = new ArrayList<>();
                          for (Trip trip : trips) {
                              if (categoryFilter.equals(trip.getCategory())) {
                                  filteredTrips.add(trip);
                              }
                          }
                          trips = filteredTrips;
                          Log.d(TAG, "After category filter: " + trips.size() + " trips");
                      }
                      
                      // Apply sorting
                      if ("Oldest First".equals(sortOption)) {
                          trips.sort((t1, t2) -> Long.compare(t1.getStartTime(), t2.getStartTime()));
                      } else if ("Distance High-Low".equals(sortOption)) {
                          trips.sort((t1, t2) -> Double.compare(t2.getDistance(), t1.getDistance()));
                      } else if ("Distance Low-High".equals(sortOption)) {
                          trips.sort((t1, t2) -> Double.compare(t1.getDistance(), t2.getDistance()));
                      } else { // "Newest First" - default
                          trips.sort((t1, t2) -> Long.compare(t2.getStartTime(), t1.getStartTime()));
                      }
                      
                      // Add result count header
                      TextView resultCount = new TextView(this);
                      resultCount.setText("📊 Showing " + trips.size() + " trips");
                      resultCount.setTextSize(14);
                      resultCount.setTextColor(0xFF666666);
                      resultCount.setPadding(20, 10, 20, 15);
                      resultCount.setGravity(Gravity.CENTER);
                      resultCount.setBackgroundColor(0xFFF8F9FA);
                      allTripsLayout.addView(resultCount);
                      
                      // Add trips to display
                      if (trips.isEmpty()) {
                          TextView emptyText = new TextView(this);
                          emptyText.setText("No trips found matching your criteria\n\nTry adjusting your search or filters");
                          emptyText.setTextSize(16);
                          emptyText.setTextColor(0xFF999999);
                          emptyText.setGravity(Gravity.CENTER);
                          emptyText.setPadding(20, 40, 20, 40);
                          emptyText.setBackgroundColor(0xFFFFFFFF);
                          allTripsLayout.addView(emptyText);
                      } else {
                          for (Trip trip : trips) {
                              addTripCard(trip);
                          }
                      }
                      
                      Log.d(TAG, "Display update complete. Added " + trips.size() + " trip cards to layout");
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Error in filterAndDisplayTrips", e);
                      allTripsLayout.removeAllViews();
                      TextView errorText = new TextView(this);
                      errorText.setText("Error loading trips: " + e.getMessage());
                      errorText.setTextColor(0xFFFF0000);
                      errorText.setPadding(20, 20, 20, 20);
                      errorText.setBackgroundColor(0xFFFFFFFF);
                      allTripsLayout.addView(errorText);
                  }
              }

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);

                  tripStorage = new TripStorage(this);
                  cloudBackupService = new CloudBackupService(this);
                  locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);

                  // Add some sample trips for testing if storage is empty
                  if (tripStorage.getAllTrips().isEmpty()) {
                      addSampleTrips();
                  }

                  cloudBackupService.downloadExistingTrips();

                  createMainInterface();
                  checkLocationPermissions();
              }

              private void addSampleTrips() {
                  try {
                      // Sample trip 1
                      Trip trip1 = new Trip();
                      trip1.setStartAddress("123 Main St, Boston, MA");
                      trip1.setEndAddress("456 Oak Ave, Cambridge, MA");
                      trip1.setDistance(5.2);
                      trip1.setCategory("Business");
                      trip1.setClientName("ABC Corp");
                      trip1.setNotes("Client meeting");
                      trip1.setAutoDetected(true);
                      trip1.setStartTime(System.currentTimeMillis() - (2 * 24 * 60 * 60 * 1000)); // 2 days ago
                      trip1.setEndTime(trip1.getStartTime() + (30 * 60 * 1000)); // 30 min duration
                      tripStorage.addTrip(trip1);

                      // Sample trip 2
                      Trip trip2 = new Trip();
                      trip2.setStartAddress("789 Elm St, Boston, MA");
                      trip2.setEndAddress("321 Pine Rd, Brookline, MA");
                      trip2.setDistance(3.8);
                      trip2.setCategory("Personal");
                      trip2.setClientName("");
                      trip2.setNotes("Grocery shopping");
                      trip2.setAutoDetected(false);
                      trip2.setStartTime(System.currentTimeMillis() - (1 * 24 * 60 * 60 * 1000)); // 1 day ago
                      trip2.setEndTime(trip2.getStartTime() + (45 * 60 * 1000)); // 45 min duration
                      tripStorage.addTrip(trip2);

                      // Sample trip 3
                      Trip trip3 = new Trip();
                      trip3.setStartAddress("555 Harbor Dr, Boston, MA");
                      trip3.setEndAddress("777 Medical Center, Boston, MA");
                      trip3.setDistance(2.1);
                      trip3.setCategory("Medical");
                      trip3.setClientName("");
                      trip3.setNotes("Doctor appointment");
                      trip3.setAutoDetected(true);
                      trip3.setStartTime(System.currentTimeMillis() - (6 * 60 * 60 * 1000)); // 6 hours ago
                      trip3.setEndTime(trip3.getStartTime() + (20 * 60 * 1000)); // 20 min duration
                      tripStorage.addTrip(trip3);

                      Log.d(TAG, "Added 3 sample trips for testing");
                  } catch (Exception e) {
                      Log.e(TAG, "Error adding sample trips", e);
                  }
              }

              private void createMainInterface() {
                  ScrollView scrollView = new ScrollView(this);
                  scrollView.setFillViewport(true);

                  mainContent = new LinearLayout(this);
                  mainContent.setOrientation(LinearLayout.VERTICAL);
                  mainContent.setBackgroundColor(0xFFF5F7FA);

                  createHeaderSection();
                  createControlsSection();
                  createTripsSection();

                  scrollView.addView(mainContent);
                  setContentView(scrollView);
              }

              private void createHeaderSection() {
                  LinearLayout headerLayout = new LinearLayout(this);
                  headerLayout.setOrientation(LinearLayout.VERTICAL);
                  headerLayout.setBackgroundColor(0xFF667eea);
                  headerLayout.setPadding(25, 40, 25, 25);

                  TextView titleText = new TextView(this);
                  titleText.setText("🚗 MileTracker Pro");
                  titleText.setTextSize(24);
                  titleText.setTextColor(0xFFFFFFFF);
                  titleText.setGravity(Gravity.CENTER);
                  headerLayout.addView(titleText);

                  TextView versionText = new TextView(this);
                  versionText.setText("v4.9.71 - Card Display Fix");
                  versionText.setTextSize(12);
                  versionText.setTextColor(0xFFE0E0E0);
                  versionText.setGravity(Gravity.CENTER);
                  versionText.setPadding(0, 5, 0, 0);
                  headerLayout.addView(versionText);

                  statusText = new TextView(this);
                  statusText.setText("Status: Ready");
                  statusText.setTextSize(14);
                  statusText.setTextColor(0xFFFFFFFF);
                  statusText.setGravity(Gravity.CENTER);
                  statusText.setPadding(0, 10, 0, 0);
                  headerLayout.addView(statusText);

                  mainContent.addView(headerLayout);
              }

              private void createControlsSection() {
                  LinearLayout controlsLayout = new LinearLayout(this);
                  controlsLayout.setOrientation(LinearLayout.VERTICAL);
                  controlsLayout.setPadding(20, 20, 20, 20);
                  controlsLayout.setBackgroundColor(0xFFFFFFFF);

                  // Auto Detection Toggle
                  LinearLayout autoDetectionRow = new LinearLayout(this);
                  autoDetectionRow.setOrientation(LinearLayout.HORIZONTAL);
                  autoDetectionRow.setGravity(Gravity.CENTER_VERTICAL);

                  TextView autoLabel = new TextView(this);
                  autoLabel.setText("🤖 Auto Detection");
                  autoLabel.setTextSize(16);
                  autoLabel.setTextColor(0xFF333333);
                  LinearLayout.LayoutParams autoLabelParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  autoLabel.setLayoutParams(autoLabelParams);
                  autoDetectionRow.addView(autoLabel);

                  autoDetectionToggle = new Switch(this);
                  autoDetectionToggle.setOnCheckedChangeListener((buttonView, isChecked) -> {
                      if (isChecked) {
                          startAutoDetection();
                      } else {
                          stopAutoDetection();
                      }
                  });
                  autoDetectionRow.addView(autoDetectionToggle);

                  controlsLayout.addView(autoDetectionRow);

                  // Manual Controls
                  LinearLayout manualControlsRow = new LinearLayout(this);
                  manualControlsRow.setOrientation(LinearLayout.HORIZONTAL);
                  manualControlsRow.setGravity(Gravity.CENTER);
                  manualControlsRow.setPadding(0, 15, 0, 0);

                  Button startTripButton = new Button(this);
                  startTripButton.setText("🚗 Start Trip");
                  startTripButton.setBackgroundColor(0xFF4CAF50);
                  startTripButton.setTextColor(0xFFFFFFFF);
                  startTripButton.setTextSize(14);
                  LinearLayout.LayoutParams startParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  startParams.setMargins(0, 0, 10, 0);
                  startTripButton.setLayoutParams(startParams);
                  startTripButton.setOnClickListener(v -> startManualTrip());
                  manualControlsRow.addView(startTripButton);

                  Button stopTripButton = new Button(this);
                  stopTripButton.setText("🛑 Stop Trip");
                  stopTripButton.setBackgroundColor(0xFFF44336);
                  stopTripButton.setTextColor(0xFFFFFFFF);
                  stopTripButton.setTextSize(14);
                  LinearLayout.LayoutParams stopParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  stopParams.setMargins(10, 0, 0, 0);
                  stopTripButton.setLayoutParams(stopParams);
                  stopTripButton.setOnClickListener(v -> stopManualTrip());
                  manualControlsRow.addView(stopTripButton);

                  controlsLayout.addView(manualControlsRow);

                  mainContent.addView(controlsLayout);
              }

              private void createTripsSection() {
                  LinearLayout tripsContainer = new LinearLayout(this);
                  tripsContainer.setOrientation(LinearLayout.VERTICAL);
                  tripsContainer.setBackgroundColor(0xFFFFFFFF);
                  tripsContainer.setPadding(20, 0, 20, 20);

                  LinearLayout tripsContent = new LinearLayout(this);
                  tripsContent.setOrientation(LinearLayout.VERTICAL);

                  // Header
                  LinearLayout headerLayout = new LinearLayout(this);
                  headerLayout.setOrientation(LinearLayout.HORIZONTAL);
                  headerLayout.setGravity(Gravity.CENTER_VERTICAL);
                  headerLayout.setPadding(0, 20, 0, 15);

                  TextView tripsTitle = new TextView(this);
                  tripsTitle.setText("📍 All Trips");
                  tripsTitle.setTextSize(18);
                  tripsTitle.setTextColor(0xFF333333);
                  LinearLayout.LayoutParams titleParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  tripsTitle.setLayoutParams(titleParams);
                  headerLayout.addView(tripsTitle);

                  Button addTripButton = new Button(this);
                  addTripButton.setText("➕ Add Trip");
                  addTripButton.setBackgroundColor(0xFF667eea);
                  addTripButton.setTextColor(0xFFFFFFFF);
                  addTripButton.setTextSize(12);
                  addTripButton.setPadding(20, 10, 20, 10);
                  addTripButton.setOnClickListener(v -> showAddTripDialog());
                  headerLayout.addView(addTripButton);

                  Button mergeButton = new Button(this);
                  mergeButton.setText("🔗 Merge");
                  mergeButton.setBackgroundColor(0xFF9C27B0);
                  mergeButton.setTextColor(0xFFFFFFFF);
                  mergeButton.setTextSize(12);
                  mergeButton.setPadding(20, 10, 20, 10);
                  LinearLayout.LayoutParams mergeParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                  mergeParams.setMargins(10, 0, 0, 0);
                  mergeButton.setLayoutParams(mergeParams);
                  mergeButton.setOnClickListener(v -> toggleMergeMode());
                  headerLayout.addView(mergeButton);
                  
                  tripsContent.addView(headerLayout);
                  
                  // Search and Filter Section
                  LinearLayout searchFilterSection = new LinearLayout(this);
                  searchFilterSection.setOrientation(LinearLayout.VERTICAL);
                  searchFilterSection.setPadding(0, 0, 0, 15);
                  
                  // Search bar using Android SearchView
                  SearchView searchView = new SearchView(this);
                  searchView.setQueryHint("🔍 Search trips by address, client, notes...");
                  searchView.setIconifiedByDefault(false);
                  searchView.setBackgroundColor(0xFFF8F9FA);
                  LinearLayout.LayoutParams searchParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  searchParams.setMargins(0, 0, 0, 10);
                  searchView.setLayoutParams(searchParams);
                  searchFilterSection.addView(searchView);
                  
                  // Filter row with sort and category options
                  LinearLayout filterRow = new LinearLayout(this);
                  filterRow.setOrientation(LinearLayout.HORIZONTAL);
                  filterRow.setPadding(0, 10, 0, 0);
                  filterRow.setGravity(Gravity.CENTER_VERTICAL);
                  
                  // Sort dropdown
                  TextView sortLabel = new TextView(this);
                  sortLabel.setText("Sort:");
                  sortLabel.setTextSize(12);
                  sortLabel.setPadding(0, 0, 10, 0);
                  filterRow.addView(sortLabel);
                  
                  Spinner sortSpinner = new Spinner(this);
                  String[] sortOptions = {"Newest First", "Oldest First", "Distance High-Low", "Distance Low-High"};
                  ArrayAdapter<String> sortAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, sortOptions);
                  sortAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  sortSpinner.setAdapter(sortAdapter);
                  
                  LinearLayout.LayoutParams sortParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  sortParams.setMargins(0, 0, 15, 0);
                  sortSpinner.setLayoutParams(sortParams);
                  filterRow.addView(sortSpinner);
                  
                  // Category filter dropdown
                  TextView categoryLabel = new TextView(this);
                  categoryLabel.setText("Category:");
                  categoryLabel.setTextSize(12);
                  categoryLabel.setPadding(0, 0, 10, 0);
                  filterRow.addView(categoryLabel);
                  
                  Spinner categoryFilterSpinner = new Spinner(this);
                  String[] categoryOptions = {"All Categories", "Business", "Personal", "Medical", "Charity"};
                  ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categoryOptions);
                  categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  categoryFilterSpinner.setAdapter(categoryAdapter);
                  
                  LinearLayout.LayoutParams categoryParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  categoryFilterSpinner.setLayoutParams(categoryParams);
                  filterRow.addView(categoryFilterSpinner);
                  
                  searchFilterSection.addView(filterRow);
                  tripsContent.addView(searchFilterSection);
                  
                  // Add event listeners for search and filtering
                  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                      @Override
                      public boolean onQueryTextSubmit(String query) {
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayTrips(query, sortOption, categoryFilter);
                          return true;
                      }
                      
                      @Override
                      public boolean onQueryTextChange(String newText) {
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayTrips(newText, sortOption, categoryFilter);
                          return true;
                      }
                  });
                  
                  sortSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                      @Override
                      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                          String searchQuery = searchView.getQuery().toString();
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayTrips(searchQuery, sortOption, categoryFilter);
                      }
                      
                      @Override
                      public void onNothingSelected(AdapterView<?> parent) {}
                  });
                  
                  categoryFilterSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                      @Override
                      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                          String searchQuery = searchView.getQuery().toString();
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayTrips(searchQuery, sortOption, categoryFilter);
                      }
                      
                      @Override
                      public void onNothingSelected(AdapterView<?> parent) {}
                  });

                  // Fixed layout for trips container
                  allTripsScroll = new ScrollView(this);
                  allTripsLayout = new LinearLayout(this);
                  allTripsLayout.setOrientation(LinearLayout.VERTICAL);
                  allTripsScroll.addView(allTripsLayout);

                  // Fixed layout params - use explicit height instead of weight
                  LinearLayout.LayoutParams allTripsParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      600 // Fixed height in pixels for reliable display
                  );
                  allTripsScroll.setLayoutParams(allTripsParams);
                  tripsContent.addView(allTripsScroll);

                  tripsContainer.addView(tripsContent);
                  mainContent.addView(tripsContainer);

                  updateAllTrips();
              }

              private void addTripCard(Trip trip) {
                  try {
                      Log.d(TAG, "Adding trip card for: " + trip.getStartAddress() + " -> " + trip.getEndAddress());
                      
                      // Create main card container
                      LinearLayout tripCard = new LinearLayout(this);
                      tripCard.setOrientation(LinearLayout.VERTICAL);
                      tripCard.setBackgroundColor(0xFFFFFFFF);
                      tripCard.setPadding(15, 15, 15, 15);
                      
                      LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                          LinearLayout.LayoutParams.MATCH_PARENT, 
                          LinearLayout.LayoutParams.WRAP_CONTENT
                      );
                      cardParams.setMargins(0, 0, 0, 10);
                      tripCard.setLayoutParams(cardParams);

                      // Checkbox for merge mode
                      if (mergeMode) {
                          CheckBox selectBox = new CheckBox(this);
                          selectBox.setText("Select for merge");
                          selectBox.setOnCheckedChangeListener((buttonView, isChecked) -> {
                              if (isChecked) {
                                  selectedTripIds.add(String.valueOf(trip.getId()));
                              } else {
                                  selectedTripIds.remove(String.valueOf(trip.getId()));
                              }
                          });
                          tripCard.addView(selectBox);
                      }

                      // Trip main info
                      LinearLayout mainInfo = new LinearLayout(this);
                      mainInfo.setOrientation(LinearLayout.HORIZONTAL);
                      mainInfo.setGravity(Gravity.CENTER_VERTICAL);

                      LinearLayout textInfo = new LinearLayout(this);
                      textInfo.setOrientation(LinearLayout.VERTICAL);
                      LinearLayout.LayoutParams textParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                      textInfo.setLayoutParams(textParams);

                      TextView routeText = new TextView(this);
                      String startAddr = trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown";
                      String endAddr = trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown";
                      routeText.setText("📍 " + startAddr + " → " + endAddr);
                      routeText.setTextSize(14);
                      routeText.setTextColor(0xFF333333);
                      textInfo.addView(routeText);

                      TextView detailsText = new TextView(this);
                      String clientInfo = (trip.getClientName() != null && !trip.getClientName().isEmpty()) ? 
                          " • " + trip.getClientName() : "";
                      detailsText.setText(String.format("%.1f mi • %s • %s%s", 
                          trip.getDistance(), 
                          trip.getCategory(),
                          trip.getFormattedDate(),
                          clientInfo));
                      detailsText.setTextSize(12);
                      detailsText.setTextColor(0xFF666666);
                      textInfo.addView(detailsText);

                      mainInfo.addView(textInfo);

                      // Action buttons row
                      LinearLayout buttonsRow = new LinearLayout(this);
                      buttonsRow.setOrientation(LinearLayout.HORIZONTAL);
                      buttonsRow.setGravity(Gravity.CENTER_VERTICAL);

                      // Edit button (green)
                      TextView editButton = new TextView(this);
                      editButton.setText("✏️");
                      editButton.setTextSize(16);
                      editButton.setPadding(12, 12, 12, 12);
                      editButton.setBackgroundColor(0xFF4CAF50);
                      editButton.setTextColor(0xFFFFFFFF);
                      editButton.setGravity(Gravity.CENTER);
                      LinearLayout.LayoutParams editParams = new LinearLayout.LayoutParams(48, 48);
                      editParams.setMargins(5, 0, 5, 0);
                      editButton.setLayoutParams(editParams);
                      editButton.setOnClickListener(v -> showEditTripDialog(trip));
                      buttonsRow.addView(editButton);

                      // Split button (purple)
                      TextView splitButton = new TextView(this);
                      splitButton.setText("✂️");
                      splitButton.setTextSize(16);
                      splitButton.setPadding(12, 12, 12, 12);
                      splitButton.setBackgroundColor(0xFF9C27B0);
                      splitButton.setTextColor(0xFFFFFFFF);
                      splitButton.setGravity(Gravity.CENTER);
                      LinearLayout.LayoutParams splitParams = new LinearLayout.LayoutParams(48, 48);
                      splitParams.setMargins(5, 0, 5, 0);
                      splitButton.setLayoutParams(splitParams);
                      splitButton.setOnClickListener(v -> showSplitTripDialog(trip));
                      buttonsRow.addView(splitButton);

                      // Delete button (red)
                      TextView deleteButton = new TextView(this);
                      deleteButton.setText("🗑️");
                      deleteButton.setTextSize(16);
                      deleteButton.setPadding(12, 12, 12, 12);
                      deleteButton.setBackgroundColor(0xFFF44336);
                      deleteButton.setTextColor(0xFFFFFFFF);
                      deleteButton.setGravity(Gravity.CENTER);
                      LinearLayout.LayoutParams deleteParams = new LinearLayout.LayoutParams(48, 48);
                      deleteParams.setMargins(5, 0, 5, 0);
                      deleteButton.setLayoutParams(deleteParams);
                      deleteButton.setOnClickListener(v -> showDeleteConfirmation(trip));
                      buttonsRow.addView(deleteButton);

                      mainInfo.addView(buttonsRow);
                      tripCard.addView(mainInfo);

                      allTripsLayout.addView(tripCard);
                      Log.d(TAG, "Trip card added successfully to parent layout");
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Error adding trip card", e);
                  }
              }

              private void toggleMergeMode() {
                  mergeMode = !mergeMode;
                  selectedTripIds.clear();
                  
                  if (mergeMode) {
                      statusText.setText("Status: Merge Mode - Select trips to merge");
                  } else {
                      statusText.setText("Status: Ready");
                  }
                  
                  updateAllTrips();
              }

              private void showAddTripDialog() {
                  LinearLayout dialogLayout = new LinearLayout(this);
                  dialogLayout.setOrientation(LinearLayout.VERTICAL);
                  dialogLayout.setPadding(20, 20, 20, 20);

                  TextView title = new TextView(this);
                  title.setText("➕ Add Manual Trip");
                  title.setTextSize(18);
                  title.setTextColor(0xFF333333);
                  title.setPadding(0, 0, 0, 20);
                  dialogLayout.addView(title);

                  EditText startAddressInput = new EditText(this);
                  startAddressInput.setHint("Start Address");
                  startAddressInput.setPadding(10, 10, 10, 10);
                  dialogLayout.addView(startAddressInput);

                  EditText endAddressInput = new EditText(this);
                  endAddressInput.setHint("End Address");
                  endAddressInput.setPadding(10, 10, 10, 10);
                  dialogLayout.addView(endAddressInput);

                  EditText distanceInput = new EditText(this);
                  distanceInput.setHint("Distance (miles)");
                  distanceInput.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                  distanceInput.setPadding(10, 10, 10, 10);
                  dialogLayout.addView(distanceInput);

                  Spinner categorySpinner = new Spinner(this);
                  String[] categories = {"Business", "Personal", "Medical", "Charity"};
                  ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                  adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  categorySpinner.setAdapter(adapter);
                  dialogLayout.addView(categorySpinner);

                  EditText clientInput = new EditText(this);
                  clientInput.setHint("Client/Company (optional)");
                  clientInput.setPadding(10, 10, 10, 10);
                  dialogLayout.addView(clientInput);

                  EditText notesInput = new EditText(this);
                  notesInput.setHint("Notes (optional)");
                  notesInput.setPadding(10, 10, 10, 10);
                  dialogLayout.addView(notesInput);

                  Button saveButton = new Button(this);
                  saveButton.setText("💾 Save Trip");
                  saveButton.setBackgroundColor(0xFF4CAF50);
                  saveButton.setTextColor(0xFFFFFFFF);
                  saveButton.setOnClickListener(v -> {
                      try {
                          String startAddress = startAddressInput.getText().toString().trim();
                          String endAddress = endAddressInput.getText().toString().trim();
                          String distanceStr = distanceInput.getText().toString().trim();

                          if (startAddress.isEmpty() || endAddress.isEmpty() || distanceStr.isEmpty()) {
                              Toast.makeText(this, "Please fill in all required fields", Toast.LENGTH_SHORT).show();
                              return;
                          }

                          double distance = Double.parseDouble(distanceStr);
                          Trip trip = new Trip();
                          trip.setStartAddress(startAddress);
                          trip.setEndAddress(endAddress);
                          trip.setDistance(distance);
                          trip.setCategory(categorySpinner.getSelectedItem().toString());
                          trip.setClientName(clientInput.getText().toString().trim());
                          trip.setNotes(notesInput.getText().toString().trim());
                          trip.setDuration(30 * 60 * 1000); // 30 minutes default

                          tripStorage.addTrip(trip);
                          cloudBackupService.backupTrip(trip);
                          updateAllTrips();

                          Toast.makeText(this, "Trip added successfully!", Toast.LENGTH_SHORT).show();
                      } catch (NumberFormatException e) {
                          Toast.makeText(this, "Please enter a valid distance", Toast.LENGTH_SHORT).show();
                      }
                  });
                  dialogLayout.addView(saveButton);

                  android.app.AlertDialog dialog = new android.app.AlertDialog.Builder(this)
                      .setView(dialogLayout)
                      .create();
                  dialog.show();
              }

              private void showEditTripDialog(Trip trip) {
                  // Implementation for edit dialog
                  Toast.makeText(this, "Edit functionality coming soon", Toast.LENGTH_SHORT).show();
              }

              private void showSplitTripDialog(Trip trip) {
                  // Implementation for split dialog
                  Toast.makeText(this, "Split functionality coming soon", Toast.LENGTH_SHORT).show();
              }

              private void showDeleteConfirmation(Trip trip) {
                  android.app.AlertDialog.Builder builder = new android.app.AlertDialog.Builder(this);
                  builder.setTitle("🗑️ Delete Trip");
                  builder.setMessage("Are you sure you want to delete this trip?\n\n" + 
                      trip.getStartAddress() + " → " + trip.getEndAddress() + 
                      "\n" + String.format("%.1f miles", trip.getDistance()));
                  
                  builder.setPositiveButton("Delete", (dialog, which) -> {
                      tripStorage.deleteTrip(trip.getId());
                      updateAllTrips();
                      Toast.makeText(this, "Trip deleted", Toast.LENGTH_SHORT).show();
                  });
                  
                  builder.setNegativeButton("Cancel", null);
                  builder.show();
              }

              private void checkLocationPermissions() {
                  if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                      ActivityCompat.requestPermissions(this, new String[]{
                          Manifest.permission.ACCESS_FINE_LOCATION,
                          Manifest.permission.ACCESS_COARSE_LOCATION
                      }, LOCATION_PERMISSION_REQUEST);
                  }

                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                      if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                          ActivityCompat.requestPermissions(this, new String[]{
                              Manifest.permission.ACCESS_BACKGROUND_LOCATION
                          }, BACKGROUND_LOCATION_PERMISSION_REQUEST);
                      }
                  }
              }

              private void startAutoDetection() {
                  Intent intent = new Intent(this, AutoDetectionService.class);
                  startForegroundService(intent);
                  statusText.setText("Status: Auto Detection Active");
              }

              private void stopAutoDetection() {
                  Intent intent = new Intent(this, AutoDetectionService.class);
                  stopService(intent);
                  statusText.setText("Status: Auto Detection Stopped");
              }

              private void startManualTrip() {
                  if (isManualTripActive) {
                      Toast.makeText(this, "Trip already in progress", Toast.LENGTH_SHORT).show();
                      return;
                  }

                  Intent intent = new Intent(this, ManualTripService.class);
                  intent.setAction("START_TRIP");
                  startForegroundService(intent);
                  isManualTripActive = true;
                  statusText.setText("Status: Manual Trip Recording");
              }

              private void stopManualTrip() {
                  if (!isManualTripActive) {
                      Toast.makeText(this, "No trip in progress", Toast.LENGTH_SHORT).show();
                      return;
                  }

                  Intent intent = new Intent(this, ManualTripService.class);
                  intent.setAction("STOP_TRIP");
                  startService(intent);
                  isManualTripActive = false;
                  statusText.setText("Status: Manual Trip Stopped");

                  new Handler().postDelayed(() -> updateAllTrips(), 1000);
              }

              @Override
              public void onLocationChanged(Location location) {
                  // Handle location updates if needed
              }

              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                  
                  if (requestCode == LOCATION_PERMISSION_REQUEST) {
                      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                          Log.d(TAG, "Location permission granted");
                      } else {
                          Toast.makeText(this, "Location permission required for trip tracking", Toast.LENGTH_LONG).show();
                      }
                  }
              }
          }
        EOF

    - name: Create AutoDetectionService.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/services/AutoDetectionService.java << 'EOF'
        package com.miletrackerpro.app.services;

          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Intent;
          import android.os.Build;
          import android.os.IBinder;
          import androidx.core.app.NotificationCompat;

          public class AutoDetectionService extends Service {
              private static final String CHANNEL_ID = "AutoDetectionChannel";
              private static final int NOTIFICATION_ID = 1;

              @Override
              public void onCreate() {
                  super.onCreate();
                  createNotificationChannel();
              }

              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                      .setContentTitle("MileTracker Pro - Auto Detection")
                      .setContentText("Monitoring for trips...")
                      .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                      .build();

                  startForeground(NOTIFICATION_ID, notification);
                  return START_STICKY;
              }

              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }

              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "Auto Detection Channel",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      NotificationManager manager = getSystemService(NotificationManager.class);
                      manager.createNotificationChannel(channel);
                  }
              }
          }
        EOF

    - name: Create ManualTripService.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/services/ManualTripService.java << 'EOF'
        package com.miletrackerpro.app.services;

          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Intent;
          import android.os.Build;
          import android.os.IBinder;
          import androidx.core.app.NotificationCompat;

          public class ManualTripService extends Service {
              private static final String CHANNEL_ID = "ManualTripChannel";
              private static final int NOTIFICATION_ID = 2;

              @Override
              public void onCreate() {
                  super.onCreate();
                  createNotificationChannel();
              }

              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  String action = intent.getAction();
                  
                  if ("START_TRIP".equals(action)) {
                      Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                          .setContentTitle("MileTracker Pro - Manual Trip")
                          .setContentText("Recording trip...")
                          .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                          .build();

                      startForeground(NOTIFICATION_ID, notification);
                  } else if ("STOP_TRIP".equals(action)) {
                      stopForeground(true);
                      stopSelf();
                  }

                  return START_NOT_STICKY;
              }

              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }

              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "Manual Trip Channel",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      NotificationManager manager = getSystemService(NotificationManager.class);
                      manager.createNotificationChannel(channel);
                  }
              }
          }
        EOF

    - name: Create BootReceiver.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/services/BootReceiver.java << 'EOF'
        package com.miletrackerpro.app.services;

          import android.content.BroadcastReceiver;
          import android.content.Context;
          import android.content.Intent;
          import android.util.Log;

          public class BootReceiver extends BroadcastReceiver {
              private static final String TAG = "BootReceiver";

              @Override
              public void onReceive(Context context, Intent intent) {
                  if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {
                      Log.d(TAG, "Boot completed - starting auto detection service");
                      
                      Intent serviceIntent = new Intent(context, AutoDetectionService.class);
                      context.startForegroundService(serviceIntent);
                  }
              }
          }
        EOF

    - name: Create gradle wrapper
      run: |
        mkdir -p android/gradle/wrapper
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.10.2-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF

    - name: Build APK with aggressive cache disabling
      run: |
        cd android
        export GRADLE_OPTS="-Xmx4g -XX:MaxMetaspaceSize=1g"
        
        # Nuclear cache disabling
        rm -rf ~/.gradle/caches/
        rm -rf ~/.gradle/wrapper/
        rm -rf .gradle/
        rm -rf app/build/
        rm -rf build/
        
        echo "Starting Gradle clean with nuclear cache disabling..."
        ./gradlew clean --no-daemon --no-build-cache --no-configuration-cache --rerun-tasks
        
        echo "Building APK with cache-free environment..."
        ./gradlew assembleRelease --no-daemon --no-build-cache --no-configuration-cache --rerun-tasks --info

    - name: Sign APK with modern apksigner
      run: |
        cd android
        
        # Generate keystore if it doesn't exist
        if [ ! -f app-release-key.jks ]; then
          keytool -genkey -v -keystore app-release-key.jks -alias app-release-key -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=MileTracker Pro, OU=Mobile Apps, O=CodeNurse, L=City, S=State, C=US" \
            -storepass miletracker -keypass miletracker
        fi
        
        # Find the APK file
        APK_FILE=$(find app/build/outputs/apk/release -name "*.apk" | head -1)
        if [ -z "$APK_FILE" ]; then
          echo "ERROR: No APK file found!"
          find app/build/outputs -name "*.apk" -type f
          exit 1
        fi
        
        echo "Found APK: $APK_FILE"
        
        # Modern signing with apksigner (replaces jarsigner)
        $ANDROID_HOME/build-tools/35.0.0/apksigner sign \
          --ks app-release-key.jks \
          --ks-key-alias app-release-key \
          --ks-pass pass:miletracker \
          --key-pass pass:miletracker \
          --out app-release-signed.apk \
          "$APK_FILE"
        
        # Verify the signed APK
        $ANDROID_HOME/build-tools/35.0.0/apksigner verify --verbose app-release-signed.apk
        
        echo "APK signed successfully: app-release-signed.apk"
        ls -la app-release-signed.apk

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: MileTracker-Pro-CardDisplayFix-v4.9.71
        path: android/app-release-signed.apk
        retention-days: 30

    - name: APK Build Summary
      run: |
        echo "🎉 MileTracker Pro APK Build Complete!"
        echo "📱 Version: 4.9.71 - Card Display Fix"
        echo "✅ Features: Fixed layout visibility, sample trips, SearchView filtering, null safety"
        echo "🔧 Architecture: Pure Android native with proper card rendering"
        echo "📦 APK Location: android/app-release-signed.apk"
        echo "🚀 Ready for installation and testing!"
        
        if [ -f android/app-release-signed.apk ]; then
          echo "📊 APK Size: $(du -h android/app-release-signed.apk | cut -f1)"
        fi
