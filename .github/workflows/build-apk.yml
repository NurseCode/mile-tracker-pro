package com.miletrackerpro.app;

import android.Manifest;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.graphics.Typeface;
import android.graphics.drawable.GradientDrawable;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.InputType;
import android.text.TextWatcher;
import android.util.Log;
import android.view.Gravity;
import android.view.GestureDetector;
import android.view.MotionEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.CheckBox;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.SearchView;
import android.widget.SeekBar;
import android.widget.Spinner;
import android.widget.Switch;
import android.widget.TextView;
import android.widget.Toast;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import com.miletrackerpro.app.auth.UserAuthManager;
import com.miletrackerpro.app.services.AutoDetectionService;
import com.miletrackerpro.app.services.ManualTripService;
import com.miletrackerpro.app.storage.Trip;
import com.miletrackerpro.app.storage.TripStorage;
import android.net.Uri;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

public class MainActivity extends AppCompatActivity implements LocationListener {

    private static final String TAG = "MileTracker";
    private static final int PERMISSION_REQUEST_CODE = 1;
    private static final int LOCATION_PERMISSION_REQUEST_CODE = 2;
    private static final int STORAGE_PERMISSION_REQUEST_CODE = 3;
    private static final int WRITE_EXTERNAL_STORAGE_PERMISSION_REQUEST_CODE = 4;
    private static final int BACKGROUND_LOCATION_PERMISSION_REQUEST_CODE = 5;
    private static final int NOTIFICATION_PERMISSION_REQUEST_CODE = 6;
    private static final int LOCATION_UPDATE_INTERVAL = 5000; // 5 seconds
    private static final int LOCATION_UPDATE_FASTEST_INTERVAL = 2000; // 2 seconds
    private static final int TRIP_TIMEOUT = 300000; // 5 minutes
    private static final double STATIONARY_THRESHOLD = 1.0; // 1 mph
    private static final double MOVING_THRESHOLD = 8.0; // 8 mph
    private static final double SPEED_THRESHOLD = 3.0; // 3 mph
    private static final double DISTANCE_THRESHOLD = 0.05; // 50 meters
    private static final double EARTH_RADIUS = 3958.8; // Earth's radius in miles
    private static final int STATIONARY_COUNT_THRESHOLD = 3; // 3 consecutive stationary readings
    private static final int MOVING_COUNT_THRESHOLD = 2; // 2 consecutive moving readings
    private static final int AUTO_END_DELAY = 300000; // 5 minutes

    // UI Components
    private LinearLayout mainContainer;
    private LinearLayout tabContainer;
    private Button homeTab, classifyTab, categorizedTab;
    private LinearLayout currentTabContent;
    
    // Home Tab Components
    private LinearLayout homeTabContent;
    private TextView speedDisplay, distanceDisplay, statusDisplay, totalTripsDisplay, totalMilesDisplay;
    private Button autoToggle, startButton, stopButton, refreshButton;
    private LinearLayout recentTripsSection;
    private LinearLayout recentTripsContainer;
    private Switch cloudBackupSwitch;
    private Button settingsButton;
    
    // Classify Tab Components
    private LinearLayout classifyTabContent;
    private LinearLayout classifyTripsContainer;
    private TextView classifyInstructions;
    
    // Categorized Tab Components
    private LinearLayout categorizedTabContent;
    private LinearLayout categorizedFilterButtons;
    private Button allFilterButton, businessFilterButton, personalFilterButton, medicalFilterButton, charityFilterButton;
    private LinearLayout categorizedTripsContainer;
    private String currentCategoryFilter = "All";

    // Services and Storage
    private TripStorage tripStorage;
    private LocationManager locationManager;
    private UserAuthManager authManager;
    private AutoDetectionService autoDetectionService;
    private ManualTripService manualTripService;

    // State Management
    private boolean isAutoDetectionEnabled = false;
    private boolean isManualTripActive = false;
    private boolean isLocationUpdateActive = false;
    private Trip currentTrip;
    private Location lastLocation;
    private double currentSpeed = 0.0;
    private double totalDistance = 0.0;
    private long lastLocationUpdateTime = 0;
    private int stationaryCount = 0;
    private int movingCount = 0;
    private Handler autoEndHandler;
    private Runnable autoEndRunnable;
    private GestureDetector gestureDetector;
    private Handler blinkHandler;
    private Runnable blinkRunnable;
    private boolean isBlinking = false;
    private SharedPreferences preferences;
    private BroadcastReceiver locationUpdateReceiver;
    private BroadcastReceiver tripUpdateReceiver;
    private String currentActiveTab = "Home";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        
        // Initialize preferences
        preferences = getSharedPreferences("MileTracker", MODE_PRIVATE);
        
        // Initialize services
        tripStorage = new TripStorage(this);
        authManager = new UserAuthManager(this);
        autoDetectionService = new AutoDetectionService(this);
        manualTripService = new ManualTripService(this);
        
        // Set up UI
        setupMainLayout();
        setupTabSystem();
        setupGestureDetector();
        
        // Register broadcast receivers
        registerBroadcastReceivers();
        
        // Initialize location services
        initializeLocationServices();
        
        // Load saved state
        loadSavedState();
        
        // Start with Home tab
        showTab("Home");
        
        // Update displays
        updateStatisticsDisplay();
        updateRecentTrips();
        
        // Check authentication
        checkAuthenticationStatus();
        
        Log.i(TAG, "THREE TAB SYSTEM COMPLETE - v4.9.118 - MainActivity initialized successfully");
    }

    private void setupMainLayout() {
        mainContainer = new LinearLayout(this);
        mainContainer.setOrientation(LinearLayout.VERTICAL);
        mainContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        mainContainer.setBackgroundColor(Color.parseColor("#f8f9fa"));
        
        setContentView(mainContainer);
    }

    private void setupTabSystem() {
        // Tab container
        tabContainer = new LinearLayout(this);
        tabContainer.setOrientation(LinearLayout.HORIZONTAL);
        tabContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        tabContainer.setBackgroundColor(Color.parseColor("#ffffff"));
        tabContainer.setPadding(20, 20, 20, 20);
        
        // Create tabs
        homeTab = createTabButton("Home", true);
        classifyTab = createTabButton("Classify", false);
        categorizedTab = createTabButton("Categorized", false);
        
        tabContainer.addView(homeTab);
        tabContainer.addView(classifyTab);
        tabContainer.addView(categorizedTab);
        
        mainContainer.addView(tabContainer);
        
        // Content container
        currentTabContent = new LinearLayout(this);
        currentTabContent.setOrientation(LinearLayout.VERTICAL);
        LinearLayout.LayoutParams contentParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                0, 1.0f); // Weight 1 to fill remaining space
        currentTabContent.setLayoutParams(contentParams);
        currentTabContent.setBackgroundColor(Color.parseColor("#f8f9fa"));
        
        mainContainer.addView(currentTabContent);
        
        // Setup tab content
        setupHomeTabContent();
        setupClassifyTabContent();
        setupCategorizedTabContent();
    }

    private Button createTabButton(String text, boolean isActive) {
        Button button = new Button(this);
        button.setText(text);
        button.setTextSize(16);
        button.setTextColor(isActive ? Color.WHITE : Color.parseColor("#9CA3AF"));
        button.setBackgroundColor(isActive ? Color.parseColor("#667eea") : Color.TRANSPARENT);
        button.setTypeface(null, isActive ? Typeface.BOLD : Typeface.NORMAL);
        
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
        params.setMargins(5, 0, 5, 0);
        button.setLayoutParams(params);
        button.setPadding(20, 30, 20, 30);
        
        // Set click listener
        button.setOnClickListener(v -> {
            showTab(text);
        });
        
        return button;
    }

    private void setupHomeTabContent() {
        homeTabContent = new LinearLayout(this);
        homeTabContent.setOrientation(LinearLayout.VERTICAL);
        homeTabContent.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        homeTabContent.setPadding(20, 20, 20, 20);
        
        // Header
        TextView headerText = new TextView(this);
        headerText.setText("MileTracker Pro");
        headerText.setTextSize(28);
        headerText.setTextColor(Color.parseColor("#667eea"));
        headerText.setTypeface(null, Typeface.BOLD);
        headerText.setGravity(Gravity.CENTER);
        headerText.setPadding(0, 0, 0, 30);
        homeTabContent.addView(headerText);
        
        // Speed and Distance Display
        LinearLayout speedDistanceContainer = new LinearLayout(this);
        speedDistanceContainer.setOrientation(LinearLayout.HORIZONTAL);
        speedDistanceContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        speedDistanceContainer.setGravity(Gravity.CENTER);
        
        speedDisplay = new TextView(this);
        speedDisplay.setText("Speed: 0.0 mph");
        speedDisplay.setTextSize(18);
        speedDisplay.setTextColor(Color.parseColor("#333333"));
        speedDisplay.setPadding(0, 0, 20, 0);
        speedDistanceContainer.addView(speedDisplay);
        
        distanceDisplay = new TextView(this);
        distanceDisplay.setText("Distance: 0.0 mi");
        distanceDisplay.setTextSize(18);
        distanceDisplay.setTextColor(Color.parseColor("#333333"));
        speedDistanceContainer.addView(distanceDisplay);
        
        homeTabContent.addView(speedDistanceContainer);
        
        // Status Display
        statusDisplay = new TextView(this);
        statusDisplay.setText("Ready");
        statusDisplay.setTextSize(16);
        statusDisplay.setTextColor(Color.parseColor("#666666"));
        statusDisplay.setGravity(Gravity.CENTER);
        statusDisplay.setPadding(0, 10, 0, 30);
        homeTabContent.addView(statusDisplay);
        
        // Auto Detection Toggle
        autoToggle = new Button(this);
        autoToggle.setText("Auto Detection: OFF");
        autoToggle.setTextSize(16);
        autoToggle.setTextColor(Color.WHITE);
        autoToggle.setBackgroundColor(Color.parseColor("#9CA3AF"));
        autoToggle.setPadding(20, 30, 20, 30);
        autoToggle.setOnClickListener(v -> toggleAutoDetection());
        homeTabContent.addView(autoToggle);
        
        // Manual Trip Controls Label
        TextView manualLabel = new TextView(this);
        manualLabel.setText("Manual Trip Controls");
        manualLabel.setTextSize(16);
        manualLabel.setTextColor(Color.parseColor("#666666"));
        manualLabel.setTypeface(null, Typeface.BOLD);
        manualLabel.setGravity(Gravity.CENTER);
        manualLabel.setPadding(0, 30, 0, 10);
        homeTabContent.addView(manualLabel);
        
        // Manual Controls
        LinearLayout manualControlsContainer = new LinearLayout(this);
        manualControlsContainer.setOrientation(LinearLayout.HORIZONTAL);
        manualControlsContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        manualControlsContainer.setGravity(Gravity.CENTER);
        
        startButton = new Button(this);
        startButton.setText("START");
        startButton.setTextSize(16);
        startButton.setTextColor(Color.WHITE);
        startButton.setBackgroundColor(Color.parseColor("#28a745"));
        startButton.setPadding(30, 20, 30, 20);
        startButton.setOnClickListener(v -> startManualTrip());
        
        stopButton = new Button(this);
        stopButton.setText("STOP");
        stopButton.setTextSize(16);
        stopButton.setTextColor(Color.WHITE);
        stopButton.setBackgroundColor(Color.parseColor("#dc3545"));
        stopButton.setPadding(30, 20, 30, 20);
        stopButton.setOnClickListener(v -> stopManualTrip());
        stopButton.setEnabled(false);
        
        LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
        buttonParams.setMargins(10, 0, 10, 0);
        startButton.setLayoutParams(buttonParams);
        stopButton.setLayoutParams(buttonParams);
        
        manualControlsContainer.addView(startButton);
        manualControlsContainer.addView(stopButton);
        homeTabContent.addView(manualControlsContainer);
        
        // Statistics Display
        LinearLayout statsContainer = new LinearLayout(this);
        statsContainer.setOrientation(LinearLayout.VERTICAL);
        statsContainer.setBackgroundColor(Color.parseColor("#ffffff"));
        statsContainer.setPadding(20, 20, 20, 20);
        LinearLayout.LayoutParams statsParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT);
        statsParams.setMargins(0, 30, 0, 0);
        statsContainer.setLayoutParams(statsParams);
        
        TextView statsHeader = new TextView(this);
        statsHeader.setText("Statistics");
        statsHeader.setTextSize(18);
        statsHeader.setTextColor(Color.parseColor("#333333"));
        statsHeader.setTypeface(null, Typeface.BOLD);
        statsHeader.setPadding(0, 0, 0, 15);
        statsContainer.addView(statsHeader);
        
        totalTripsDisplay = new TextView(this);
        totalTripsDisplay.setText("• Total Trips: 0");
        totalTripsDisplay.setTextSize(16);
        totalTripsDisplay.setTextColor(Color.parseColor("#666666"));
        totalTripsDisplay.setPadding(0, 0, 0, 8);
        statsContainer.addView(totalTripsDisplay);
        
        totalMilesDisplay = new TextView(this);
        totalMilesDisplay.setText("• Total Miles: 0.0");
        totalMilesDisplay.setTextSize(16);
        totalMilesDisplay.setTextColor(Color.parseColor("#666666"));
        statsContainer.addView(totalMilesDisplay);
        
        homeTabContent.addView(statsContainer);
        
        // Recent Trips Section
        recentTripsSection = new LinearLayout(this);
        recentTripsSection.setOrientation(LinearLayout.VERTICAL);
        recentTripsSection.setBackgroundColor(Color.parseColor("#ffffff"));
        recentTripsSection.setPadding(20, 20, 20, 20);
        LinearLayout.LayoutParams recentParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                400); // Fixed height
        recentParams.setMargins(0, 20, 0, 0);
        recentTripsSection.setLayoutParams(recentParams);
        
        TextView recentHeader = new TextView(this);
        recentHeader.setText("📋 Recent Trips");
        recentHeader.setTextSize(18);
        recentHeader.setTextColor(Color.parseColor("#333333"));
        recentHeader.setTypeface(null, Typeface.BOLD);
        recentHeader.setPadding(0, 0, 0, 15);
        recentTripsSection.addView(recentHeader);
        
        ScrollView recentScrollView = new ScrollView(this);
        recentScrollView.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        
        recentTripsContainer = new LinearLayout(this);
        recentTripsContainer.setOrientation(LinearLayout.VERTICAL);
        recentTripsContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        
        recentScrollView.addView(recentTripsContainer);
        recentTripsSection.addView(recentScrollView);
        homeTabContent.addView(recentTripsSection);
        
        // Settings and Backup Controls
        LinearLayout controlsContainer = new LinearLayout(this);
        controlsContainer.setOrientation(LinearLayout.HORIZONTAL);
        controlsContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        controlsContainer.setGravity(Gravity.CENTER);
        controlsContainer.setPadding(0, 20, 0, 0);
        
        refreshButton = new Button(this);
        refreshButton.setText("REFRESH");
        refreshButton.setTextSize(14);
        refreshButton.setTextColor(Color.WHITE);
        refreshButton.setBackgroundColor(Color.parseColor("#667eea"));
        refreshButton.setPadding(20, 15, 20, 15);
        refreshButton.setOnClickListener(v -> refreshData());
        
        Button exportButton = new Button(this);
        exportButton.setText("EXPORT");
        exportButton.setTextSize(14);
        exportButton.setTextColor(Color.WHITE);
        exportButton.setBackgroundColor(Color.parseColor("#28a745"));
        exportButton.setPadding(20, 15, 20, 15);
        exportButton.setOnClickListener(v -> showExportDialog());
        
        settingsButton = new Button(this);
        settingsButton.setText("⚙️");
        settingsButton.setTextSize(16);
        settingsButton.setTextColor(Color.WHITE);
        settingsButton.setBackgroundColor(Color.parseColor("#666666"));
        settingsButton.setPadding(20, 15, 20, 15);
        settingsButton.setOnClickListener(v -> showSettingsDialog());
        
        LinearLayout.LayoutParams controlButtonParams = new LinearLayout.LayoutParams(
                0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
        controlButtonParams.setMargins(5, 0, 5, 0);
        
        refreshButton.setLayoutParams(controlButtonParams);
        exportButton.setLayoutParams(controlButtonParams);
        settingsButton.setLayoutParams(controlButtonParams);
        
        controlsContainer.addView(refreshButton);
        controlsContainer.addView(exportButton);
        controlsContainer.addView(settingsButton);
        homeTabContent.addView(controlsContainer);
    }

    private void setupClassifyTabContent() {
        classifyTabContent = new LinearLayout(this);
        classifyTabContent.setOrientation(LinearLayout.VERTICAL);
        classifyTabContent.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        classifyTabContent.setPadding(20, 20, 20, 20);
        
        // Header
        TextView headerText = new TextView(this);
        headerText.setText("Classify Trips");
        headerText.setTextSize(24);
        headerText.setTextColor(Color.parseColor("#667eea"));
        headerText.setTypeface(null, Typeface.BOLD);
        headerText.setGravity(Gravity.CENTER);
        headerText.setPadding(0, 0, 0, 20);
        classifyTabContent.addView(headerText);
        
        // Instructions
        classifyInstructions = new TextView(this);
        classifyInstructions.setText("Swipe left for Business, right for Personal");
        classifyInstructions.setTextSize(16);
        classifyInstructions.setTextColor(Color.parseColor("#666666"));
        classifyInstructions.setGravity(Gravity.CENTER);
        classifyInstructions.setPadding(0, 0, 0, 20);
        classifyTabContent.addView(classifyInstructions);
        
        // Scrollable trips container
        ScrollView classifyScrollView = new ScrollView(this);
        classifyScrollView.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        
        classifyTripsContainer = new LinearLayout(this);
        classifyTripsContainer.setOrientation(LinearLayout.VERTICAL);
        classifyTripsContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        
        classifyScrollView.addView(classifyTripsContainer);
        classifyTabContent.addView(classifyScrollView);
    }

    private void setupCategorizedTabContent() {
        categorizedTabContent = new LinearLayout(this);
        categorizedTabContent.setOrientation(LinearLayout.VERTICAL);
        categorizedTabContent.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        categorizedTabContent.setPadding(20, 20, 20, 20);
        
        // Header
        TextView headerText = new TextView(this);
        headerText.setText("Categorized Trips");
        headerText.setTextSize(24);
        headerText.setTextColor(Color.parseColor("#667eea"));
        headerText.setTypeface(null, Typeface.BOLD);
        headerText.setGravity(Gravity.CENTER);
        headerText.setPadding(0, 0, 0, 20);
        categorizedTabContent.addView(headerText);
        
        // Filter buttons
        categorizedFilterButtons = new LinearLayout(this);
        categorizedFilterButtons.setOrientation(LinearLayout.HORIZONTAL);
        categorizedFilterButtons.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        categorizedFilterButtons.setPadding(0, 0, 0, 20);
        
        // Create filter buttons
        allFilterButton = createFilterButton("All", true);
        businessFilterButton = createFilterButton("Business", false);
        personalFilterButton = createFilterButton("Personal", false);
        medicalFilterButton = createFilterButton("Medical", false);
        charityFilterButton = createFilterButton("Charity", false);
        
        categorizedFilterButtons.addView(allFilterButton);
        categorizedFilterButtons.addView(businessFilterButton);
        categorizedFilterButtons.addView(personalFilterButton);
        categorizedFilterButtons.addView(medicalFilterButton);
        categorizedFilterButtons.addView(charityFilterButton);
        
        categorizedTabContent.addView(categorizedFilterButtons);
        
        // Scrollable trips container
        ScrollView categorizedScrollView = new ScrollView(this);
        categorizedScrollView.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.MATCH_PARENT));
        
        categorizedTripsContainer = new LinearLayout(this);
        categorizedTripsContainer.setOrientation(LinearLayout.VERTICAL);
        categorizedTripsContainer.setLayoutParams(new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT));
        
        categorizedScrollView.addView(categorizedTripsContainer);
        categorizedTabContent.addView(categorizedScrollView);
    }

    private Button createFilterButton(String text, boolean isActive) {
        Button button = new Button(this);
        button.setText(text);
        button.setTextSize(12);
        button.setTextColor(isActive ? Color.WHITE : Color.parseColor("#666666"));
        button.setBackgroundColor(isActive ? Color.parseColor("#667eea") : Color.parseColor("#e9ecef"));
        
        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
        params.setMargins(2, 0, 2, 0);
        button.setLayoutParams(params);
        button.setPadding(8, 15, 8, 15);
        
        button.setOnClickListener(v -> {
            setCategoryFilter(text);
        });
        
        return button;
    }

    private void showTab(String tabName) {
        currentActiveTab = tabName;
        
        // Update tab button appearance
        updateTabButtons();
        
        // Clear and show appropriate content
        currentTabContent.removeAllViews();
        
        switch (tabName) {
            case "Home":
                currentTabContent.addView(homeTabContent);
                updateRecentTrips();
                break;
            case "Classify":
                currentTabContent.addView(classifyTabContent);
                updateClassifyTrips();
                break;
            case "Categorized":
                currentTabContent.addView(categorizedTabContent);
                updateCategorizedTrips();
                break;
        }
    }

    private void updateTabButtons() {
        // Reset all tabs
        homeTab.setTextColor(Color.parseColor("#9CA3AF"));
        homeTab.setBackgroundColor(Color.TRANSPARENT);
        homeTab.setTypeface(null, Typeface.NORMAL);
        
        classifyTab.setTextColor(Color.parseColor("#9CA3AF"));
        classifyTab.setBackgroundColor(Color.TRANSPARENT);
        classifyTab.setTypeface(null, Typeface.NORMAL);
        
        categorizedTab.setTextColor(Color.parseColor("#9CA3AF"));
        categorizedTab.setBackgroundColor(Color.TRANSPARENT);
        categorizedTab.setTypeface(null, Typeface.NORMAL);
        
        // Highlight active tab
        switch (currentActiveTab) {
            case "Home":
                homeTab.setTextColor(Color.WHITE);
                homeTab.setBackgroundColor(Color.parseColor("#667eea"));
                homeTab.setTypeface(null, Typeface.BOLD);
                break;
            case "Classify":
                classifyTab.setTextColor(Color.WHITE);
                classifyTab.setBackgroundColor(Color.parseColor("#667eea"));
                classifyTab.setTypeface(null, Typeface.BOLD);
                break;
            case "Categorized":
                categorizedTab.setTextColor(Color.WHITE);
                categorizedTab.setBackgroundColor(Color.parseColor("#667eea"));
                categorizedTab.setTypeface(null, Typeface.BOLD);
                break;
        }
    }

    private void updateClassifyTrips() {
        try {
            classifyTripsContainer.removeAllViews();
            
            List<Trip> allTrips = tripStorage.getAllTrips();
            List<Trip> uncategorizedTrips = new ArrayList<>();
            
            // Filter to only uncategorized trips
            for (Trip trip : allTrips) {
                if (trip.getCategory() == null || trip.getCategory().isEmpty() || trip.getCategory().equals("Uncategorized")) {
                    uncategorizedTrips.add(trip);
                }
            }
            
            if (uncategorizedTrips.isEmpty()) {
                TextView noTripsText = new TextView(this);
                noTripsText.setText("No trips to classify!\nAll trips have been categorized.");
                noTripsText.setTextSize(16);
                noTripsText.setTextColor(Color.parseColor("#666666"));
                noTripsText.setGravity(Gravity.CENTER);
                noTripsText.setPadding(0, 50, 0, 0);
                classifyTripsContainer.addView(noTripsText);
                return;
            }
            
            // Sort by newest first
            Collections.sort(uncategorizedTrips, (a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
            
            // Create trip cards with swipe gestures
            for (Trip trip : uncategorizedTrips) {
                View tripCard = createTripCard(trip, true); // true = enable swipe gestures
                classifyTripsContainer.addView(tripCard);
            }
            
        } catch (Exception e) {
            Log.e(TAG, "Error updating classify trips", e);
            Toast.makeText(this, "Error loading trips to classify", Toast.LENGTH_SHORT).show();
        }
    }

    private void updateCategorizedTrips() {
        try {
            categorizedTripsContainer.removeAllViews();
            
            List<Trip> allTrips = tripStorage.getAllTrips();
            List<Trip> categorizedTrips = new ArrayList<>();
            
            // Filter to only categorized trips
            for (Trip trip : allTrips) {
                if (trip.getCategory() != null && 
                    !trip.getCategory().isEmpty() && 
                    !trip.getCategory().equals("Uncategorized")) {
                    
                    // Apply category filter
                    if (currentCategoryFilter.equals("All") || 
                        trip.getCategory().equals(currentCategoryFilter)) {
                        categorizedTrips.add(trip);
                    }
                }
            }
            
            if (categorizedTrips.isEmpty()) {
                TextView noTripsText = new TextView(this);
                if (currentCategoryFilter.equals("All")) {
                    noTripsText.setText("No categorized trips yet.\nGo to the Classify tab to categorize your trips!");
                } else {
                    noTripsText.setText("No " + currentCategoryFilter + " trips found.");
                }
                noTripsText.setTextSize(16);
                noTripsText.setTextColor(Color.parseColor("#666666"));
                noTripsText.setGravity(Gravity.CENTER);
                noTripsText.setPadding(0, 50, 0, 0);
                categorizedTripsContainer.addView(noTripsText);
                return;
            }
            
            // Sort by newest first
            Collections.sort(categorizedTrips, (a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
            
            // Create trip cards
            for (Trip trip : categorizedTrips) {
                View tripCard = createTripCard(trip, false); // false = no swipe gestures
                categorizedTripsContainer.addView(tripCard);
            }
            
        } catch (Exception e) {
            Log.e(TAG, "Error updating categorized trips", e);
            Toast.makeText(this, "Error loading categorized trips", Toast.LENGTH_SHORT).show();
        }
    }

    private void setCategoryFilter(String category) {
        currentCategoryFilter = category;
        
        // Update filter button appearance
        updateFilterButtons();
        
        // Update categorized trips display
        updateCategorizedTrips();
    }

    private void updateFilterButtons() {
        // Reset all filter buttons
        allFilterButton.setTextColor(Color.parseColor("#666666"));
        allFilterButton.setBackgroundColor(Color.parseColor("#e9ecef"));
        
        businessFilterButton.setTextColor(Color.parseColor("#666666"));
        businessFilterButton.setBackgroundColor(Color.parseColor("#e9ecef"));
        
        personalFilterButton.setTextColor(Color.parseColor("#666666"));
        personalFilterButton.setBackgroundColor(Color.parseColor("#e9ecef"));
        
        medicalFilterButton.setTextColor(Color.parseColor("#666666"));
        medicalFilterButton.setBackgroundColor(Color.parseColor("#e9ecef"));
        
        charityFilterButton.setTextColor(Color.parseColor("#666666"));
        charityFilterButton.setBackgroundColor(Color.parseColor("#e9ecef"));
        
        // Highlight active filter
        switch (currentCategoryFilter) {
            case "All":
                allFilterButton.setTextColor(Color.WHITE);
                allFilterButton.setBackgroundColor(Color.parseColor("#667eea"));
                break;
            case "Business":
                businessFilterButton.setTextColor(Color.WHITE);
                businessFilterButton.setBackgroundColor(Color.parseColor("#667eea"));
                break;
            case "Personal":
                personalFilterButton.setTextColor(Color.WHITE);
                personalFilterButton.setBackgroundColor(Color.parseColor("#667eea"));
                break;
            case "Medical":
                medicalFilterButton.setTextColor(Color.WHITE);
                medicalFilterButton.setBackgroundColor(Color.parseColor("#667eea"));
                break;
            case "Charity":
                charityFilterButton.setTextColor(Color.WHITE);
                charityFilterButton.setBackgroundColor(Color.parseColor("#667eea"));
                break;
        }
    }

    private View createTripCard(Trip trip, boolean enableSwipeGestures) {
        LinearLayout cardContainer = new LinearLayout(this);
        cardContainer.setOrientation(LinearLayout.VERTICAL);
        cardContainer.setBackgroundColor(Color.WHITE);
        cardContainer.setPadding(20, 20, 20, 20);
        
        LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                LinearLayout.LayoutParams.MATCH_PARENT,
                LinearLayout.LayoutParams.WRAP_CONTENT);
        cardParams.setMargins(0, 0, 0, 20);
        cardContainer.setLayoutParams(cardParams);
        
        // Add border
        GradientDrawable border = new GradientDrawable();
        border.setColor(Color.WHITE);
        border.setStroke(2, Color.parseColor("#e0e0e0"));
        border.setCornerRadius(8);
        cardContainer.setBackground(border);
        
        // Trip date and time
        TextView dateTimeText = new TextView(this);
        SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy - h:mm a", Locale.getDefault());
        dateTimeText.setText(sdf.format(new Date(trip.getStartTime())));
        dateTimeText.setTextSize(14);
        dateTimeText.setTextColor(Color.parseColor("#666666"));
        dateTimeText.setTypeface(null, Typeface.BOLD);
        cardContainer.addView(dateTimeText);
        
        // Trip distance and duration
        TextView distanceText = new TextView(this);
        long durationMs = trip.getEndTime() - trip.getStartTime();
        String durationStr = formatDuration(durationMs);
        distanceText.setText(String.format(Locale.getDefault(), "%.1f miles • %s", trip.getDistance(), durationStr));
        distanceText.setTextSize(16);
        distanceText.setTextColor(Color.parseColor("#333333"));
        distanceText.setPadding(0, 5, 0, 5);
        cardContainer.addView(distanceText);
        
        // Trip locations
        TextView locationsText = new TextView(this);
        String startAddr = trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown";
        String endAddr = trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown";
        locationsText.setText("From: " + startAddr + "\nTo: " + endAddr);
        locationsText.setTextSize(14);
        locationsText.setTextColor(Color.parseColor("#666666"));
        locationsText.setPadding(0, 5, 0, 5);
        cardContainer.addView(locationsText);
        
        // Trip category and type
        TextView categoryText = new TextView(this);
        String category = trip.getCategory() != null ? trip.getCategory() : "Uncategorized";
        String type = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
        categoryText.setText(type + " • " + category);
        categoryText.setTextSize(14);
        categoryText.setTextColor(Color.parseColor("#667eea"));
        categoryText.setTypeface(null, Typeface.BOLD);
        cardContainer.addView(categoryText);
        
        // Add swipe instructions for classify tab
        if (enableSwipeGestures) {
            TextView swipeText = new TextView(this);
            swipeText.setText("← Swipe left for Business, right for Personal →");
            swipeText.setTextSize(12);
            swipeText.setTextColor(Color.parseColor("#999999"));
            swipeText.setGravity(Gravity.CENTER);
            swipeText.setPadding(0, 10, 0, 0);
            cardContainer.addView(swipeText);
            
            // Enable swipe gestures
            cardContainer.setOnTouchListener(new SwipeGestureListener(trip, cardContainer));
        }
        
        // Add click listener for editing
        cardContainer.setOnClickListener(v -> {
            if (!enableSwipeGestures) { // Only allow editing in categorized tab
                showEditTripDialog(trip);
            }
        });
        
        return cardContainer;
    }

    private class SwipeGestureListener implements View.OnTouchListener {
        private final Trip trip;
        private final View cardView;
        private final GestureDetector gestureDetector;
        
        public SwipeGestureListener(Trip trip, View cardView) {
            this.trip = trip;
            this.cardView = cardView;
            this.gestureDetector = new GestureDetector(MainActivity.this, new SwipeDetector());
        }
        
        @Override
        public boolean onTouch(View v, MotionEvent event) {
            return gestureDetector.onTouchEvent(event);
        }
        
        private class SwipeDetector extends GestureDetector.SimpleOnGestureListener {
            private static final int SWIPE_THRESHOLD = 30;
            private static final int SWIPE_VELOCITY_THRESHOLD = 50;
            
            @Override
            public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
                try {
                    float diffX = e2.getX() - e1.getX();
                    float diffY = e2.getY() - e1.getY();
                    
                    if (Math.abs(diffX) > Math.abs(diffY) && 
                        Math.abs(diffX) > SWIPE_THRESHOLD && 
                        Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                        
                        if (diffX > 0) {
                            // Right swipe - Personal
                            classifyTrip(trip, "Personal", cardView);
                        } else {
                            // Left swipe - Business
                            classifyTrip(trip, "Business", cardView);
                        }
                        return true;
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error in swipe detection", e);
                }
                return false;
            }
        }
    }

    private void classifyTrip(Trip trip, String category, View cardView) {
        try {
            // Update trip category
            trip.setCategory(category);
            tripStorage.updateTrip(trip);
            
            // Visual feedback
            cardView.setBackgroundColor(category.equals("Business") ? 
                Color.parseColor("#d4edda") : Color.parseColor("#cce5ff"));
            
            // Show success message
            Toast.makeText(this, "Trip classified as " + category, Toast.LENGTH_SHORT).show();
            
            // Auto-learning system
            learnFromClassification(trip, category);
            
            // Remove card with animation
            new Handler().postDelayed(() -> {
                updateClassifyTrips();
                updateCategorizedTrips();
            }, 1000);
            
            // Sync with API if enabled
            if (preferences.getBoolean("api_sync_enabled", false)) {
                syncTripWithAPI(trip);
            }
            
        } catch (Exception e) {
            Log.e(TAG, "Error classifying trip", e);
            Toast.makeText(this, "Error classifying trip", Toast.LENGTH_SHORT).show();
        }
    }

    private void learnFromClassification(Trip trip, String category) {
        try {
            // Learn from start and end locations
            learnLocationCategory(trip.getStartAddress(), category);
            learnLocationCategory(trip.getEndAddress(), category);
            
        } catch (Exception e) {
            Log.e(TAG, "Error in learning system", e);
        }
    }

    private void learnLocationCategory(String address, String category) {
        if (address == null || address.isEmpty()) return;
        
        try {
            // Normalize address for consistency
            String normalizedAddress = normalizeAddress(address);
            
            // Save location learning
            String key = "location_" + normalizedAddress;
            SharedPreferences.Editor editor = preferences.edit();
            
            // Get current count
            int currentCount = preferences.getInt(key + "_count", 0);
            String currentCategory = preferences.getString(key + "_category", "");
            
            // If same category, increment count
            if (currentCategory.equals(category)) {
                editor.putInt(key + "_count", currentCount + 1);
            } else {
                // New category, reset count
                editor.putString(key + "_category", category);
                editor.putInt(key + "_count", 1);
            }
            
            editor.apply();
            
            // Auto-suggest if count >= 2
            if (currentCount + 1 >= 2) {
                Log.i(TAG, "Auto-learning: " + normalizedAddress + " → " + category);
            }
            
        } catch (Exception e) {
            Log.e(TAG, "Error learning location category", e);
        }
    }

    private String normalizeAddress(String address) {
        if (address == null) return "";
        
        return address.toLowerCase()
                .replaceAll("\\d+", "") // Remove numbers
                .replaceAll("\\s+", " ") // Normalize whitespace
                .trim();
    }

    private void setupGestureDetector() {
        gestureDetector = new GestureDetector(this, new GestureDetector.SimpleOnGestureListener() {
            @Override
            public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
                return false;
            }
        });
    }

    private void updateRecentTrips() {
        try {
            recentTripsContainer.removeAllViews();
            
            List<Trip> allTrips = tripStorage.getAllTrips();
            if (allTrips.isEmpty()) {
                TextView noTripsText = new TextView(this);
                noTripsText.setText("No trips recorded yet");
                noTripsText.setTextSize(14);
                noTripsText.setTextColor(Color.parseColor("#999999"));
                noTripsText.setGravity(Gravity.CENTER);
                noTripsText.setPadding(0, 20, 0, 0);
                recentTripsContainer.addView(noTripsText);
                return;
            }
            
            // Sort by newest first
            Collections.sort(allTrips, (a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
            
            // Show up to 3 most recent trips
            int count = Math.min(3, allTrips.size());
            for (int i = 0; i < count; i++) {
                Trip trip = allTrips.get(i);
                
                TextView tripText = new TextView(this);
                String type = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                String category = trip.getCategory() != null ? trip.getCategory() : "Uncategorized";
                tripText.setText(String.format(Locale.getDefault(), 
                    "%s • %.1f mi • %s", type, trip.getDistance(), category));
                tripText.setTextSize(14);
                tripText.setTextColor(Color.parseColor("#666666"));
                tripText.setPadding(0, 5, 0, 5);
                
                recentTripsContainer.addView(tripText);
            }
            
        } catch (Exception e) {
            Log.e(TAG, "Error updating recent trips", e);
        }
    }

    private void updateStatisticsDisplay() {
        try {
            List<Trip> allTrips = tripStorage.getAllTrips();
            int totalTrips = allTrips.size();
            double totalMiles = 0.0;
            
            for (Trip trip : allTrips) {
                totalMiles += trip.getDistance();
            }
            
            totalTripsDisplay.setText("• Total Trips: " + totalTrips);
            totalMilesDisplay.setText(String.format(Locale.getDefault(), "• Total Miles: %.1f", totalMiles));
            
        } catch (Exception e) {
            Log.e(TAG, "Error updating statistics", e);
        }
    }

    private void refreshData() {
        try {
            // Show loading state
            refreshButton.setText("Loading...");
            refreshButton.setEnabled(false);
            
            // Update all displays
            updateStatisticsDisplay();
            updateRecentTrips();
            
            // Update current tab content
            switch (currentActiveTab) {
                case "Home":
                    updateRecentTrips();
                    break;
                case "Classify":
                    updateClassifyTrips();
                    break;
                case "Categorized":
                    updateCategorizedTrips();
                    break;
            }
            
            // Sync with API if enabled
            if (preferences.getBoolean("api_sync_enabled", false)) {
                syncWithAPI();
            }
            
            // Reset button
            new Handler().postDelayed(() -> {
                refreshButton.setText("REFRESH");
                refreshButton.setEnabled(true);
                Toast.makeText(this, "Data refreshed", Toast.LENGTH_SHORT).show();
            }, 1000);
            
        } catch (Exception e) {
            Log.e(TAG, "Error refreshing data", e);
            refreshButton.setText("REFRESH");
            refreshButton.setEnabled(true);
            Toast.makeText(this, "Error refreshing data", Toast.LENGTH_SHORT).show();
        }
    }

    private void syncWithAPI() {
        // Placeholder for API sync functionality
        Log.i(TAG, "API sync requested");
    }

    private void syncTripWithAPI(Trip trip) {
        // Placeholder for individual trip sync
        Log.i(TAG, "Syncing trip with API: " + trip.getId());
    }

    private void showSettingsDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Settings");
        
        // Create settings layout
        LinearLayout settingsLayout = new LinearLayout(this);
        settingsLayout.setOrientation(LinearLayout.VERTICAL);
        settingsLayout.setPadding(50, 30, 50, 30);
        
        // API Sync toggle
        LinearLayout apiSyncRow = new LinearLayout(this);
        apiSyncRow.setOrientation(LinearLayout.HORIZONTAL);
        apiSyncRow.setGravity(Gravity.CENTER_VERTICAL);
        
        TextView apiSyncLabel = new TextView(this);
        apiSyncLabel.setText("☁️ Cloud Backup");
        apiSyncLabel.setTextSize(16);
        apiSyncLabel.setTextColor(Color.parseColor("#333333"));
        
        Switch apiSyncSwitch = new Switch(this);
        apiSyncSwitch.setChecked(preferences.getBoolean("api_sync_enabled", false));
        apiSyncSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
            preferences.edit().putBoolean("api_sync_enabled", isChecked).apply();
            Toast.makeText(this, "Cloud backup " + (isChecked ? "enabled" : "disabled"), Toast.LENGTH_SHORT).show();
        });
        
        LinearLayout.LayoutParams labelParams = new LinearLayout.LayoutParams(
                0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
        apiSyncLabel.setLayoutParams(labelParams);
        
        apiSyncRow.addView(apiSyncLabel);
        apiSyncRow.addView(apiSyncSwitch);
        settingsLayout.addView(apiSyncRow);
        
        // Premium features info
        TextView premiumInfo = new TextView(this);
        premiumInfo.setText("\n Premium Features:\n• Advanced Analytics\n• Unlimited Cloud Storage\n• Priority Support\n\nUpgrade to Premium for $4.99/month");
        premiumInfo.setTextSize(14);
        premiumInfo.setTextColor(Color.parseColor("#666666"));
        settingsLayout.addView(premiumInfo);
        
        builder.setView(settingsLayout);
        builder.setPositiveButton("Close", null);
        builder.show();
    }

    private void showExportDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Export Trips");
        
        String[] exportOptions = {"All Trips", "Business Only", "Personal Only", "Medical Only", "Charity Only"};
        
        builder.setItems(exportOptions, (dialog, which) -> {
            String category = null;
            switch (which) {
                case 1: category = "Business"; break;
                case 2: category = "Personal"; break;
                case 3: category = "Medical"; break;
                case 4: category = "Charity"; break;
            }
            exportTrips(category);
        });
        
        builder.setNegativeButton("Cancel", null);
        builder.show();
    }

    private void exportTrips(String categoryFilter) {
        try {
            List<Trip> allTrips = tripStorage.getAllTrips();
            List<Trip> filteredTrips = new ArrayList<>();
            
            for (Trip trip : allTrips) {
                if (categoryFilter == null || trip.getCategory().equals(categoryFilter)) {
                    filteredTrips.add(trip);
                }
            }
            
            if (filteredTrips.isEmpty()) {
                Toast.makeText(this, "No trips to export", Toast.LENGTH_SHORT).show();
                return;
            }
            
            // Create CSV content
            StringBuilder csvContent = new StringBuilder();
            csvContent.append("Date,Start Time,End Time,Start Location,End Location,Distance,Duration,Category,Type,Notes\n");
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
            SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm:ss", Locale.getDefault());
            
            for (Trip trip : filteredTrips) {
                Date startDate = new Date(trip.getStartTime());
                Date endDate = new Date(trip.getEndTime());
                
                csvContent.append(dateFormat.format(startDate)).append(",");
                csvContent.append(timeFormat.format(startDate)).append(",");
                csvContent.append(timeFormat.format(endDate)).append(",");
                csvContent.append("\"").append(trip.getStartAddress() != null ? trip.getStartAddress() : "").append("\",");
                csvContent.append("\"").append(trip.getEndAddress() != null ? trip.getEndAddress() : "").append("\",");
                csvContent.append(String.format(Locale.getDefault(), "%.2f", trip.getDistance())).append(",");
                csvContent.append(formatDuration(trip.getEndTime() - trip.getStartTime())).append(",");
                csvContent.append(trip.getCategory() != null ? trip.getCategory() : "Uncategorized").append(",");
                csvContent.append(trip.isAutoDetected() ? "Auto" : "Manual").append(",");
                csvContent.append("\"").append(trip.getNotes() != null ? trip.getNotes() : "").append("\"\n");
            }
            
            // Save to file and share
            String fileName = "miletracker_export_" + System.currentTimeMillis() + ".csv";
            File exportFile = new File(getExternalFilesDir(null), fileName);
            
            FileWriter writer = new FileWriter(exportFile);
            writer.write(csvContent.toString());
            writer.close();
            
            // Share file
            Intent shareIntent = new Intent(Intent.ACTION_SEND);
            shareIntent.setType("text/csv");
            shareIntent.putExtra(Intent.EXTRA_STREAM, Uri.fromFile(exportFile));
            shareIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro Export");
            startActivity(Intent.createChooser(shareIntent, "Export Trips"));
            
        } catch (Exception e) {
            Log.e(TAG, "Error exporting trips", e);
            Toast.makeText(this, "Error exporting trips", Toast.LENGTH_SHORT).show();
        }
    }

    private void showEditTripDialog(Trip trip) {
        // Placeholder for edit dialog
        Toast.makeText(this, "Edit trip: " + trip.getId(), Toast.LENGTH_SHORT).show();
    }

    private String formatDuration(long durationMs) {
        long hours = TimeUnit.MILLISECONDS.toHours(durationMs);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(durationMs) % 60;
        
        if (hours > 0) {
            return String.format(Locale.getDefault(), "%dh %dm", hours, minutes);
        } else {
            return String.format(Locale.getDefault(), "%dm", minutes);
        }
    }

    // Location and Trip Management Methods
    private void toggleAutoDetection() {
        isAutoDetectionEnabled = !isAutoDetectionEnabled;
        
        if (isAutoDetectionEnabled) {
            autoToggle.setText("Auto Detection: ON");
            autoToggle.setBackgroundColor(Color.parseColor("#667eea"));
            startBlinkingAnimation();
            startLocationUpdates();
        } else {
            autoToggle.setText("Auto Detection: OFF");
            autoToggle.setBackgroundColor(Color.parseColor("#9CA3AF"));
            stopBlinkingAnimation();
            stopLocationUpdates();
        }
        
        // Save state
        preferences.edit().putBoolean("auto_detection_enabled", isAutoDetectionEnabled).apply();
    }

    private void startBlinkingAnimation() {
        if (blinkHandler == null) {
            blinkHandler = new Handler();
        }
        
        blinkRunnable = new Runnable() {
            @Override
            public void run() {
                if (isAutoDetectionEnabled) {
                    if (isBlinking) {
                        autoToggle.setText("Auto Detection: ON");
                    } else {
                        autoToggle.setText("🔆🚘🔆 Auto Detection: ON");
                    }
                    isBlinking = !isBlinking;
                    blinkHandler.postDelayed(this, 800);
                }
            }
        };
        
        blinkHandler.post(blinkRunnable);
    }

    private void stopBlinkingAnimation() {
        if (blinkHandler != null && blinkRunnable != null) {
            blinkHandler.removeCallbacks(blinkRunnable);
        }
        isBlinking = false;
    }

    private void startManualTrip() {
        if (isManualTripActive) {
            Toast.makeText(this, "Trip already in progress", Toast.LENGTH_SHORT).show();
            return;
        }
        
        if (checkLocationPermission()) {
            try {
                Location currentLocation = getCurrentLocation();
                if (currentLocation != null) {
                    currentTrip = new Trip();
                    currentTrip.setStartTime(System.currentTimeMillis());
                    currentTrip.setStartLatitude(currentLocation.getLatitude());
                    currentTrip.setStartLongitude(currentLocation.getLongitude());
                    currentTrip.setAutoDetected(false);
                    
                    isManualTripActive = true;
                    totalDistance = 0.0;
                    
                    startButton.setEnabled(false);
                    stopButton.setEnabled(true);
                    
                    startLocationUpdates();
                    
                    statusDisplay.setText("Manual trip started");
                    Toast.makeText(this, "Manual trip started", Toast.LENGTH_SHORT).show();
                    
                } else {
                    Toast.makeText(this, "Unable to get current location", Toast.LENGTH_SHORT).show();
                }
            } catch (Exception e) {
                Log.e(TAG, "Error starting manual trip", e);
                Toast.makeText(this, "Error starting manual trip", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void stopManualTrip() {
        if (!isManualTripActive || currentTrip == null) {
            Toast.makeText(this, "No active trip to stop", Toast.LENGTH_SHORT).show();
            return;
        }
        
        try {
            Location currentLocation = getCurrentLocation();
            if (currentLocation != null) {
                currentTrip.setEndTime(System.currentTimeMillis());
                currentTrip.setEndLatitude(currentLocation.getLatitude());
                currentTrip.setEndLongitude(currentLocation.getLongitude());
                currentTrip.setDistance(totalDistance);
                currentTrip.setCategory("Uncategorized");
                
                tripStorage.saveTrip(currentTrip);
                
                isManualTripActive = false;
                currentTrip = null;
                
                startButton.setEnabled(true);
                stopButton.setEnabled(false);
                
                if (!isAutoDetectionEnabled) {
                    stopLocationUpdates();
                }
                
                statusDisplay.setText("Manual trip saved");
                Toast.makeText(this, "Manual trip saved", Toast.LENGTH_SHORT).show();
                
                // Update displays
                updateStatisticsDisplay();
                updateRecentTrips();
                
            } else {
                Toast.makeText(this, "Unable to get current location", Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            Log.e(TAG, "Error stopping manual trip", e);
            Toast.makeText(this, "Error stopping manual trip", Toast.LENGTH_SHORT).show();
        }
    }

    private void initializeLocationServices() {
        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        checkLocationPermission();
    }

    private boolean checkLocationPermission() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);
            return false;
        }
        return true;
    }

    private void startLocationUpdates() {
        if (!checkLocationPermission()) return;
        
        try {
            if (locationManager != null) {
                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, LOCATION_UPDATE_INTERVAL, 0, this);
                isLocationUpdateActive = true;
            }
        } catch (SecurityException e) {
            Log.e(TAG, "Security exception starting location updates", e);
        } catch (Exception e) {
            Log.e(TAG, "Error starting location updates", e);
        }
    }

    private void stopLocationUpdates() {
        try {
            if (locationManager != null) {
                locationManager.removeUpdates(this);
                isLocationUpdateActive = false;
            }
        } catch (Exception e) {
            Log.e(TAG, "Error stopping location updates", e);
        }
    }

    private Location getCurrentLocation() {
        if (!checkLocationPermission()) return null;
        
        try {
            if (locationManager != null) {
                return locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
            }
        } catch (SecurityException e) {
            Log.e(TAG, "Security exception getting location", e);
        } catch (Exception e) {
            Log.e(TAG, "Error getting current location", e);
        }
        return null;
    }

    @Override
    public void onLocationChanged(Location location) {
        try {
            if (location != null) {
                updateLocationDisplay(location);
                
                if (isManualTripActive && currentTrip != null) {
                    updateManualTripDistance(location);
                }
                
                if (isAutoDetectionEnabled) {
                    processAutoDetection(location);
                }
            }
        } catch (Exception e) {
            Log.e(TAG, "Error processing location change", e);
        }
    }

    private void updateLocationDisplay(Location location) {
        currentSpeed = location.hasSpeed() ? location.getSpeed() * 2.237 : 0.0; // Convert m/s to mph
        speedDisplay.setText(String.format(Locale.getDefault(), "Speed: %.1f mph", currentSpeed));
        
        if (lastLocation != null) {
            double distance = calculateDistance(
                lastLocation.getLatitude(), lastLocation.getLongitude(),
                location.getLatitude(), location.getLongitude()
            );
            totalDistance += distance;
            distanceDisplay.setText(String.format(Locale.getDefault(), "Distance: %.1f mi", totalDistance));
        }
        
        lastLocation = location;
        lastLocationUpdateTime = System.currentTimeMillis();
    }

    private void updateManualTripDistance(Location location) {
        if (lastLocation != null) {
            double distance = calculateDistance(
                lastLocation.getLatitude(), lastLocation.getLongitude(),
                location.getLatitude(), location.getLongitude()
            );
            totalDistance += distance;
        }
    }

    private void processAutoDetection(Location location) {
        // Placeholder for auto detection logic
        Log.d(TAG, "Processing auto detection for location: " + location.getLatitude() + ", " + location.getLongitude());
    }

    private double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
        double dLat = Math.toRadians(lat2 - lat1);
        double dLon = Math.toRadians(lon2 - lon1);
        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
                Math.sin(dLon / 2) * Math.sin(dLon / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return EARTH_RADIUS * c;
    }

    // Lifecycle and system methods
    private void registerBroadcastReceivers() {
        // Placeholder for broadcast receiver registration
    }

    private void loadSavedState() {
        isAutoDetectionEnabled = preferences.getBoolean("auto_detection_enabled", false);
        
        if (isAutoDetectionEnabled) {
            autoToggle.setText("Auto Detection: ON");
            autoToggle.setBackgroundColor(Color.parseColor("#667eea"));
            startBlinkingAnimation();
        } else {
            autoToggle.setText("Auto Detection: OFF");
            autoToggle.setBackgroundColor(Color.parseColor("#9CA3AF"));
        }
    }

    private void checkAuthenticationStatus() {
        // Placeholder for authentication check
        Log.i(TAG, "Checking authentication status");
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        stopLocationUpdates();
        stopBlinkingAnimation();
    }

    @Override
    protected void onPause() {
        super.onPause();
        // Save current state
        preferences.edit()
                .putBoolean("auto_detection_enabled", isAutoDetectionEnabled)
                .putString("current_active_tab", currentActiveTab)
                .apply();
    }

    @Override
    protected void onResume() {
        super.onResume();
        // Restore state and update displays
        updateStatisticsDisplay();
        updateRecentTrips();
        
        switch (currentActiveTab) {
            case "Classify":
                updateClassifyTrips();
                break;
            case "Categorized":
                updateCategorizedTrips();
                break;
        }
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {}

    @Override
    public void onProviderEnabled(String provider) {}

    @Override
    public void onProviderDisabled(String provider) {}

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        
        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Location permission granted", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Location permission required for mileage tracking", Toast.LENGTH_LONG).show();
            }
        }
    }
}
