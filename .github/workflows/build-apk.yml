name: Build APK
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Setup Android SDK
      uses: android-actions/setup-android@v2
      with:
        api-level: 35
        build-tools: 35.0.0
        ndk-version: 27.2.12479018
    
    - name: Create android directory
      run: mkdir -p android/app/src/main/java/com/miletrackerpro/app
    
    - name: Create Main Android App File
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.Manifest;
        import android.app.Activity;
        import android.app.DatePickerDialog;
        import android.content.Context;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.content.res.Resources;
        import android.graphics.Color;
        import android.graphics.drawable.ColorDrawable;
        import android.location.Address;
        import android.location.Geocoder;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.os.Bundle;
        import android.text.Editable;
        import android.text.TextWatcher;
        import android.util.Log;
        import android.view.Gravity;
        import android.view.View;
        import android.view.ViewGroup;
        import android.widget.ArrayAdapter;
        import android.widget.Button;
        import android.widget.DatePicker;
        import android.widget.EditText;
        import android.widget.ImageView;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.Spinner;
        import android.widget.TextView;
        import android.widget.Toast;
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import com.miletrackerpro.app.storage.Trip;
        import com.miletrackerpro.app.storage.TripStorage;
        import com.miletrackerpro.app.storage.DeviceIdentification;
        import com.miletrackerpro.app.sync.CloudBackupService;
        import java.text.SimpleDateFormat;
        import java.util.ArrayList;
        import java.util.Calendar;
        import java.util.Collections;
        import java.util.Date;
        import java.util.List;
        import java.util.Locale;

        public class MainActivity extends AppCompatActivity {
            private static final String TAG = "MileTracker";
            private static final int PERMISSION_REQUEST_CODE = 1001;
            
            private TripStorage tripStorage;
            private LocationManager locationManager;
            private LocationListener locationListener;
            private Location lastKnownLocation;
            private boolean isTracking = false;
            private long currentTripId = -1;
            private Date currentTripStartTime;
            private List<Location> currentTripPath = new ArrayList<>();
            private List<Trip> allTrips = new ArrayList<>();
            private LinearLayout tripsContainer;
            private TextView statusText;
            private Button startStopButton;
            private LinearLayout searchContainer;
            private EditText searchBox;
            private Spinner categoryFilter;
            private Spinner sortSpinner;
            private LinearLayout dashboardContainer;
            private LinearLayout tripsListContainer;
            private Button dashboardTabButton;
            private Button tripsTabButton;
            private LinearLayout addTripContainer;
            private boolean isAddingTrip = false;
            private List<Trip> filteredTrips = new ArrayList<>();
            private CloudBackupService cloudBackupService;
            private boolean isDownloadingTrips = false;

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                // Initialize components
                tripStorage = new TripStorage(this);
                cloudBackupService = new CloudBackupService(this, tripStorage);
                
                // Create the UI
                createUI();
                
                // Request permissions
                requestPermissions();
                
                // Load existing trips
                loadTrips();
                
                // Download trips from cloud with user authentication
                downloadTripsFromCloud();
            }

            private void createUI() {
                // Main container
                LinearLayout mainContainer = new LinearLayout(this);
                mainContainer.setOrientation(LinearLayout.VERTICAL);
                mainContainer.setBackgroundColor(Color.parseColor("#f5f5f5"));
                setContentView(mainContainer);

                // Header
                LinearLayout headerContainer = new LinearLayout(this);
                headerContainer.setOrientation(LinearLayout.HORIZONTAL);
                headerContainer.setPadding(40, 60, 40, 30);
                headerContainer.setBackgroundColor(Color.parseColor("#2196F3"));
                headerContainer.setGravity(Gravity.CENTER_VERTICAL);
                
                // App icon
                ImageView appIcon = new ImageView(this);
                appIcon.setImageResource(android.R.drawable.ic_menu_mylocation);
                appIcon.setColorFilter(Color.WHITE);
                LinearLayout.LayoutParams iconParams = new LinearLayout.LayoutParams(80, 80);
                iconParams.setMargins(0, 0, 30, 0);
                appIcon.setLayoutParams(iconParams);
                headerContainer.addView(appIcon);
                
                // Title
                TextView title = new TextView(this);
                title.setText("ðŸš— MileTracker Pro v4.9.77");
                title.setTextColor(Color.WHITE);
                title.setTextSize(20);
                title.setGravity(Gravity.CENTER_VERTICAL);
                headerContainer.addView(title);
                
                mainContainer.addView(headerContainer);

                // Tab buttons
                LinearLayout tabContainer = new LinearLayout(this);
                tabContainer.setOrientation(LinearLayout.HORIZONTAL);
                tabContainer.setBackgroundColor(Color.parseColor("#1976D2"));
                tabContainer.setPadding(0, 0, 0, 0);
                
                dashboardTabButton = new Button(this);
                dashboardTabButton.setText("Dashboard");
                dashboardTabButton.setTextColor(Color.WHITE);
                dashboardTabButton.setBackgroundColor(Color.parseColor("#1976D2"));
                dashboardTabButton.setOnClickListener(v -> showDashboard());
                LinearLayout.LayoutParams tabParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                dashboardTabButton.setLayoutParams(tabParams);
                tabContainer.addView(dashboardTabButton);
                
                tripsTabButton = new Button(this);
                tripsTabButton.setText("Trips");
                tripsTabButton.setTextColor(Color.parseColor("#BBDEFB"));
                tripsTabButton.setBackgroundColor(Color.parseColor("#1976D2"));
                tripsTabButton.setOnClickListener(v -> showTrips());
                tripsTabButton.setLayoutParams(tabParams);
                tabContainer.addView(tripsTabButton);
                
                mainContainer.addView(tabContainer);

                // Dashboard container
                dashboardContainer = new LinearLayout(this);
                dashboardContainer.setOrientation(LinearLayout.VERTICAL);
                dashboardContainer.setPadding(40, 30, 40, 30);
                dashboardContainer.setVisibility(View.VISIBLE);
                
                // Status section
                statusText = new TextView(this);
                statusText.setText("ðŸš— Ready to track your trips!");
                statusText.setTextSize(16);
                statusText.setTextColor(Color.parseColor("#2196F3"));
                statusText.setPadding(30, 30, 30, 30);
                statusText.setBackgroundColor(Color.parseColor("#E3F2FD"));
                statusText.setGravity(Gravity.CENTER);
                LinearLayout.LayoutParams statusParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                statusParams.setMargins(0, 0, 0, 30);
                statusText.setLayoutParams(statusParams);
                dashboardContainer.addView(statusText);
                
                // Manual controls
                LinearLayout controlsContainer = new LinearLayout(this);
                controlsContainer.setOrientation(LinearLayout.VERTICAL);
                controlsContainer.setPadding(30, 30, 30, 30);
                controlsContainer.setBackgroundColor(Color.WHITE);
                LinearLayout.LayoutParams controlsParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                controlsParams.setMargins(0, 0, 0, 30);
                controlsContainer.setLayoutParams(controlsParams);
                
                TextView controlsTitle = new TextView(this);
                controlsTitle.setText("Manual Controls");
                controlsTitle.setTextSize(18);
                controlsTitle.setTextColor(Color.parseColor("#1976D2"));
                controlsTitle.setPadding(0, 0, 0, 20);
                controlsContainer.addView(controlsTitle);
                
                startStopButton = new Button(this);
                startStopButton.setText("Start Trip");
                startStopButton.setTextColor(Color.WHITE);
                startStopButton.setBackgroundColor(Color.parseColor("#4CAF50"));
                startStopButton.setOnClickListener(v -> toggleTracking());
                controlsContainer.addView(startStopButton);
                
                Button addTripButton = new Button(this);
                addTripButton.setText("Add Missed Trip");
                addTripButton.setTextColor(Color.WHITE);
                addTripButton.setBackgroundColor(Color.parseColor("#2196F3"));
                addTripButton.setOnClickListener(v -> showAddTripForm());
                LinearLayout.LayoutParams addTripParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                addTripParams.setMargins(0, 20, 0, 0);
                addTripButton.setLayoutParams(addTripParams);
                controlsContainer.addView(addTripButton);
                
                dashboardContainer.addView(controlsContainer);
                
                // Stats section
                LinearLayout statsContainer = new LinearLayout(this);
                statsContainer.setOrientation(LinearLayout.VERTICAL);
                statsContainer.setPadding(30, 30, 30, 30);
                statsContainer.setBackgroundColor(Color.WHITE);
                LinearLayout.LayoutParams statsParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                statsParams.setMargins(0, 0, 0, 30);
                statsContainer.setLayoutParams(statsParams);
                
                TextView statsTitle = new TextView(this);
                statsTitle.setText("Statistics");
                statsTitle.setTextSize(18);
                statsTitle.setTextColor(Color.parseColor("#1976D2"));
                statsTitle.setPadding(0, 0, 0, 20);
                statsContainer.addView(statsTitle);
                
                TextView totalTripsText = new TextView(this);
                totalTripsText.setText("Total Trips: " + allTrips.size());
                totalTripsText.setTextSize(14);
                totalTripsText.setTextColor(Color.parseColor("#666"));
                statsContainer.addView(totalTripsText);
                
                dashboardContainer.addView(statsContainer);
                
                mainContainer.addView(dashboardContainer);

                // Trips container
                tripsListContainer = new LinearLayout(this);
                tripsListContainer.setOrientation(LinearLayout.VERTICAL);
                tripsListContainer.setPadding(0, 0, 0, 0);
                tripsListContainer.setVisibility(View.GONE);
                
                // Search and filter section
                searchContainer = new LinearLayout(this);
                searchContainer.setOrientation(LinearLayout.VERTICAL);
                searchContainer.setPadding(30, 30, 30, 20);
                searchContainer.setBackgroundColor(Color.WHITE);
                
                // Search box
                searchBox = new EditText(this);
                searchBox.setHint("Search trips...");
                searchBox.setPadding(30, 30, 30, 30);
                searchBox.setBackgroundColor(Color.parseColor("#f5f5f5"));
                searchBox.addTextChangedListener(new TextWatcher() {
                    @Override
                    public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
                    
                    @Override
                    public void onTextChanged(CharSequence s, int start, int before, int count) {
                        filterTrips();
                    }
                    
                    @Override
                    public void afterTextChanged(Editable s) {}
                });
                searchContainer.addView(searchBox);
                
                // Filter row
                LinearLayout filterRow = new LinearLayout(this);
                filterRow.setOrientation(LinearLayout.HORIZONTAL);
                filterRow.setPadding(0, 20, 0, 0);
                
                // Category filter
                categoryFilter = new Spinner(this);
                String[] categories = {"All Categories", "Business", "Personal", "Medical", "Charity"};
                ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categoryFilter.setAdapter(categoryAdapter);
                categoryFilter.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(android.widget.AdapterView<?> parent, View view, int position, long id) {
                        filterTrips();
                    }
                    
                    @Override
                    public void onNothingSelected(android.widget.AdapterView<?> parent) {}
                });
                LinearLayout.LayoutParams filterParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                filterParams.setMargins(0, 0, 20, 0);
                categoryFilter.setLayoutParams(filterParams);
                filterRow.addView(categoryFilter);
                
                // Sort spinner
                sortSpinner = new Spinner(this);
                String[] sortOptions = {"Newest First", "Oldest First", "Distance High-Low", "Distance Low-High"};
                ArrayAdapter<String> sortAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, sortOptions);
                sortAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                sortSpinner.setAdapter(sortAdapter);
                sortSpinner.setOnItemSelectedListener(new android.widget.AdapterView.OnItemSelectedListener() {
                    @Override
                    public void onItemSelected(android.widget.AdapterView<?> parent, View view, int position, long id) {
                        filterTrips();
                    }
                    
                    @Override
                    public void onNothingSelected(android.widget.AdapterView<?> parent) {}
                });
                filterParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                sortSpinner.setLayoutParams(filterParams);
                filterRow.addView(sortSpinner);
                
                searchContainer.addView(filterRow);
                tripsListContainer.addView(searchContainer);
                
                // Trips scroll container
                ScrollView tripsScrollView = new ScrollView(this);
                tripsScrollView.setBackgroundColor(Color.parseColor("#f5f5f5"));
                
                tripsContainer = new LinearLayout(this);
                tripsContainer.setOrientation(LinearLayout.VERTICAL);
                tripsContainer.setPadding(30, 20, 30, 100);
                tripsScrollView.addView(tripsContainer);
                
                LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, 0, 1);
                tripsScrollView.setLayoutParams(scrollParams);
                tripsListContainer.addView(tripsScrollView);
                
                mainContainer.addView(tripsListContainer);

                // Add trip form (initially hidden)
                addTripContainer = new LinearLayout(this);
                addTripContainer.setOrientation(LinearLayout.VERTICAL);
                addTripContainer.setPadding(30, 30, 30, 30);
                addTripContainer.setBackgroundColor(Color.WHITE);
                addTripContainer.setVisibility(View.GONE);
                mainContainer.addView(addTripContainer);
            }

            private void showDashboard() {
                dashboardContainer.setVisibility(View.VISIBLE);
                tripsListContainer.setVisibility(View.GONE);
                addTripContainer.setVisibility(View.GONE);
                
                dashboardTabButton.setTextColor(Color.WHITE);
                dashboardTabButton.setBackgroundColor(Color.parseColor("#1976D2"));
                tripsTabButton.setTextColor(Color.parseColor("#BBDEFB"));
                tripsTabButton.setBackgroundColor(Color.parseColor("#1976D2"));
                
                isAddingTrip = false;
            }

            private void showTrips() {
                dashboardContainer.setVisibility(View.GONE);
                tripsListContainer.setVisibility(View.VISIBLE);
                addTripContainer.setVisibility(View.GONE);
                
                dashboardTabButton.setTextColor(Color.parseColor("#BBDEFB"));
                dashboardTabButton.setBackgroundColor(Color.parseColor("#1976D2"));
                tripsTabButton.setTextColor(Color.WHITE);
                tripsTabButton.setBackgroundColor(Color.parseColor("#1976D2"));
                
                isAddingTrip = false;
                displayTrips();
            }

            private void showAddTripForm() {
                if (isAddingTrip) {
                    // Hide the form
                    addTripContainer.setVisibility(View.GONE);
                    isAddingTrip = false;
                    return;
                }
                
                // Show the form
                addTripContainer.removeAllViews();
                isAddingTrip = true;
                
                // Form title
                TextView formTitle = new TextView(this);
                formTitle.setText("Add Missed Trip");
                formTitle.setTextSize(18);
                formTitle.setTextColor(Color.parseColor("#1976D2"));
                formTitle.setPadding(0, 0, 0, 30);
                addTripContainer.addView(formTitle);
                
                // Date picker
                LinearLayout dateContainer = new LinearLayout(this);
                dateContainer.setOrientation(LinearLayout.HORIZONTAL);
                dateContainer.setPadding(0, 0, 0, 20);
                
                TextView dateLabel = new TextView(this);
                dateLabel.setText("Date: ");
                dateLabel.setTextSize(14);
                dateLabel.setTextColor(Color.parseColor("#666"));
                dateLabel.setGravity(Gravity.CENTER_VERTICAL);
                LinearLayout.LayoutParams dateParams = new LinearLayout.LayoutParams(150, ViewGroup.LayoutParams.WRAP_CONTENT);
                dateLabel.setLayoutParams(dateParams);
                dateContainer.addView(dateLabel);
                
                Button dateButton = new Button(this);
                Calendar cal = Calendar.getInstance();
                SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                dateButton.setText(sdf.format(cal.getTime()));
                dateButton.setTextColor(Color.parseColor("#1976D2"));
                dateButton.setBackgroundColor(Color.parseColor("#E3F2FD"));
                dateButton.setOnClickListener(v -> showDatePicker(dateButton));
                dateContainer.addView(dateButton);
                
                addTripContainer.addView(dateContainer);
                
                // Start location
                EditText startLocationInput = new EditText(this);
                startLocationInput.setHint("Start location");
                startLocationInput.setPadding(30, 30, 30, 30);
                startLocationInput.setBackgroundColor(Color.parseColor("#f5f5f5"));
                LinearLayout.LayoutParams inputParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                inputParams.setMargins(0, 0, 0, 20);
                startLocationInput.setLayoutParams(inputParams);
                addTripContainer.addView(startLocationInput);
                
                // End location
                EditText endLocationInput = new EditText(this);
                endLocationInput.setHint("End location");
                endLocationInput.setPadding(30, 30, 30, 30);
                endLocationInput.setBackgroundColor(Color.parseColor("#f5f5f5"));
                endLocationInput.setLayoutParams(inputParams);
                addTripContainer.addView(endLocationInput);
                
                // Distance
                EditText distanceInput = new EditText(this);
                distanceInput.setHint("Distance (miles)");
                distanceInput.setPadding(30, 30, 30, 30);
                distanceInput.setBackgroundColor(Color.parseColor("#f5f5f5"));
                distanceInput.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL);
                distanceInput.setLayoutParams(inputParams);
                addTripContainer.addView(distanceInput);
                
                // Category
                Spinner categorySpinner = new Spinner(this);
                String[] cats = {"Business", "Personal", "Medical", "Charity"};
                ArrayAdapter<String> catAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, cats);
                catAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categorySpinner.setAdapter(catAdapter);
                categorySpinner.setLayoutParams(inputParams);
                addTripContainer.addView(categorySpinner);
                
                // Client/Purpose
                EditText clientInput = new EditText(this);
                clientInput.setHint("Client/Purpose (optional)");
                clientInput.setPadding(30, 30, 30, 30);
                clientInput.setBackgroundColor(Color.parseColor("#f5f5f5"));
                clientInput.setLayoutParams(inputParams);
                addTripContainer.addView(clientInput);
                
                // Notes
                EditText notesInput = new EditText(this);
                notesInput.setHint("Notes (optional)");
                notesInput.setPadding(30, 30, 30, 30);
                notesInput.setBackgroundColor(Color.parseColor("#f5f5f5"));
                notesInput.setLayoutParams(inputParams);
                addTripContainer.addView(notesInput);
                
                // Buttons
                LinearLayout buttonContainer = new LinearLayout(this);
                buttonContainer.setOrientation(LinearLayout.HORIZONTAL);
                buttonContainer.setPadding(0, 30, 0, 0);
                
                Button saveButton = new Button(this);
                saveButton.setText("Save Trip");
                saveButton.setTextColor(Color.WHITE);
                saveButton.setBackgroundColor(Color.parseColor("#4CAF50"));
                saveButton.setOnClickListener(v -> {
                    String startLoc = startLocationInput.getText().toString();
                    String endLoc = endLocationInput.getText().toString();
                    String distStr = distanceInput.getText().toString();
                    String category = cats[categorySpinner.getSelectedItemPosition()];
                    String client = clientInput.getText().toString();
                    String notes = notesInput.getText().toString();
                    
                    if (startLoc.isEmpty() || endLoc.isEmpty() || distStr.isEmpty()) {
                        Toast.makeText(this, "Please fill in required fields", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    try {
                        double distance = Double.parseDouble(distStr);
                        
                        // Get selected date
                        String dateStr = dateButton.getText().toString();
                        Calendar selectedCal = Calendar.getInstance();
                        try {
                            selectedCal.setTime(sdf.parse(dateStr));
                        } catch (Exception e) {
                            selectedCal = Calendar.getInstance();
                        }
                        
                        // Create manual trip
                        Trip trip = new Trip(
                            System.currentTimeMillis(),
                            selectedCal.getTimeInMillis(),
                            selectedCal.getTimeInMillis() + (30 * 60 * 1000), // 30 min duration
                            startLoc,
                            endLoc,
                            distance,
                            category,
                            client,
                            notes,
                            false // Manual trip, not auto-detected
                        );
                        
                        tripStorage.saveTrip(trip);
                        allTrips.add(trip);
                        
                        // Upload to cloud
                        cloudBackupService.uploadTrip(trip);
                        
                        // Hide form and refresh
                        addTripContainer.setVisibility(View.GONE);
                        isAddingTrip = false;
                        
                        filterTrips();
                        updateStatsDisplay();
                        
                        Toast.makeText(this, "âœ… Trip saved successfully!", Toast.LENGTH_SHORT).show();
                        
                    } catch (NumberFormatException e) {
                        Toast.makeText(this, "Please enter a valid distance", Toast.LENGTH_SHORT).show();
                    }
                });
                LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                buttonParams.setMargins(0, 0, 20, 0);
                saveButton.setLayoutParams(buttonParams);
                buttonContainer.addView(saveButton);
                
                Button cancelButton = new Button(this);
                cancelButton.setText("Cancel");
                cancelButton.setTextColor(Color.parseColor("#666"));
                cancelButton.setBackgroundColor(Color.parseColor("#f5f5f5"));
                cancelButton.setOnClickListener(v -> {
                    addTripContainer.setVisibility(View.GONE);
                    isAddingTrip = false;
                });
                cancelButton.setLayoutParams(buttonParams);
                buttonContainer.addView(cancelButton);
                
                addTripContainer.addView(buttonContainer);
                addTripContainer.setVisibility(View.VISIBLE);
            }

            private void showDatePicker(Button dateButton) {
                Calendar cal = Calendar.getInstance();
                DatePickerDialog datePicker = new DatePickerDialog(this, new DatePickerDialog.OnDateSetListener() {
                    @Override
                    public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {
                        Calendar selectedCal = Calendar.getInstance();
                        selectedCal.set(year, month, dayOfMonth);
                        SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                        dateButton.setText(sdf.format(selectedCal.getTime()));
                    }
                }, cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH));
                datePicker.show();
            }

            private void requestPermissions() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_CODE);
                } else {
                    initializeLocationManager();
                }
            }

            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == PERMISSION_REQUEST_CODE) {
                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                        initializeLocationManager();
                    } else {
                        Toast.makeText(this, "Location permission is required for trip tracking", Toast.LENGTH_LONG).show();
                    }
                }
            }

            private void initializeLocationManager() {
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                
                locationListener = new LocationListener() {
                    @Override
                    public void onLocationChanged(Location location) {
                        if (isTracking) {
                            lastKnownLocation = location;
                            currentTripPath.add(location);
                            
                            // Update status with current location
                            updateLocationStatus(location);
                        }
                    }
                    
                    @Override
                    public void onProviderEnabled(String provider) {}
                    
                    @Override
                    public void onProviderDisabled(String provider) {}
                };
            }

            private void updateLocationStatus(Location location) {
                try {
                    Geocoder geocoder = new Geocoder(this, Locale.getDefault());
                    List<Address> addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
                    
                    if (addresses != null && !addresses.isEmpty()) {
                        Address address = addresses.get(0);
                        String locationName = address.getFeatureName();
                        if (locationName == null) locationName = address.getThoroughfare();
                        if (locationName == null) locationName = address.getSubAdminArea();
                        if (locationName == null) locationName = address.getAdminArea();
                        if (locationName == null) locationName = "Unknown location";
                        
                        statusText.setText("ðŸš— Tracking trip - Currently at: " + locationName);
                    } else {
                        statusText.setText("ðŸš— Tracking trip - Lat: " + String.format("%.4f", location.getLatitude()) + 
                                           ", Lon: " + String.format("%.4f", location.getLongitude()));
                    }
                } catch (Exception e) {
                    statusText.setText("ðŸš— Tracking trip - Location updating...");
                }
            }

            private void toggleTracking() {
                if (isTracking) {
                    stopTracking();
                } else {
                    startTracking();
                }
            }

            private void startTracking() {
                if (locationManager == null) {
                    Toast.makeText(this, "Location services not available", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                try {
                    isTracking = true;
                    currentTripId = System.currentTimeMillis();
                    currentTripStartTime = new Date();
                    currentTripPath.clear();
                    
                    // Start location updates
                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 10, locationListener);
                    locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 5000, 10, locationListener);
                    
                    // Update UI
                    startStopButton.setText("Stop Trip");
                    startStopButton.setBackgroundColor(Color.parseColor("#F44336"));
                    statusText.setText("ðŸš— Starting trip tracking...");
                    
                    Toast.makeText(this, "Trip started! GPS tracking active.", Toast.LENGTH_SHORT).show();
                    
                } catch (SecurityException e) {
                    Toast.makeText(this, "Location permission denied", Toast.LENGTH_SHORT).show();
                    isTracking = false;
                }
            }

            private void stopTracking() {
                if (locationManager != null) {
                    locationManager.removeUpdates(locationListener);
                }
                
                isTracking = false;
                
                // Update UI
                startStopButton.setText("Start Trip");
                startStopButton.setBackgroundColor(Color.parseColor("#4CAF50"));
                statusText.setText("ðŸš— Ready to track your trips!");
                
                if (currentTripPath.size() >= 2) {
                    // Calculate trip details
                    Location startLocation = currentTripPath.get(0);
                    Location endLocation = currentTripPath.get(currentTripPath.size() - 1);
                    
                    double distance = calculateTripDistance();
                    
                    // Get location names
                    String startLocationName = getLocationName(startLocation);
                    String endLocationName = getLocationName(endLocation);
                    
                    // Create trip
                    Trip trip = new Trip(
                        currentTripId,
                        currentTripStartTime.getTime(),
                        System.currentTimeMillis(),
                        startLocationName,
                        endLocationName,
                        distance,
                        "Business", // Default category
                        "",
                        "GPS tracked trip",
                        true // Auto-detected via GPS tracking
                    );
                    
                    // Save trip
                    tripStorage.saveTrip(trip);
                    allTrips.add(trip);
                    
                    // Upload to cloud
                    cloudBackupService.uploadTrip(trip);
                    
                    // Update display
                    filterTrips();
                    updateStatsDisplay();
                    
                    Toast.makeText(this, String.format("âœ… Trip saved: %.2f miles", distance), Toast.LENGTH_SHORT).show();
                    
                } else {
                    Toast.makeText(this, "Trip too short to save", Toast.LENGTH_SHORT).show();
                }
            }

            private double calculateTripDistance() {
                if (currentTripPath.size() < 2) return 0;
                
                double totalDistance = 0;
                for (int i = 1; i < currentTripPath.size(); i++) {
                    Location prev = currentTripPath.get(i - 1);
                    Location curr = currentTripPath.get(i);
                    totalDistance += prev.distanceTo(curr);
                }
                
                return totalDistance * 0.000621371; // Convert meters to miles
            }

            private String getLocationName(Location location) {
                try {
                    Geocoder geocoder = new Geocoder(this, Locale.getDefault());
                    List<Address> addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);
                    
                    if (addresses != null && !addresses.isEmpty()) {
                        Address address = addresses.get(0);
                        String locationName = address.getFeatureName();
                        if (locationName == null) locationName = address.getThoroughfare();
                        if (locationName == null) locationName = address.getSubAdminArea();
                        if (locationName == null) locationName = address.getAdminArea();
                        if (locationName != null) return locationName;
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error getting location name", e);
                }
                
                return String.format("%.4f, %.4f", location.getLatitude(), location.getLongitude());
            }

            private void loadTrips() {
                allTrips = tripStorage.getAllTrips();
                filterTrips();
                updateStatsDisplay();
            }

            private void filterTrips() {
                String searchText = searchBox != null ? searchBox.getText().toString().toLowerCase() : "";
                String selectedCategory = categoryFilter != null ? categoryFilter.getSelectedItem().toString() : "All Categories";
                
                filteredTrips.clear();
                
                for (Trip trip : allTrips) {
                    boolean matchesSearch = searchText.isEmpty() || 
                        trip.getStartLocation().toLowerCase().contains(searchText) ||
                        trip.getEndLocation().toLowerCase().contains(searchText) ||
                        trip.getClientName().toLowerCase().contains(searchText) ||
                        trip.getNotes().toLowerCase().contains(searchText);
                    
                    boolean matchesCategory = selectedCategory.equals("All Categories") || 
                        trip.getCategory().equals(selectedCategory);
                    
                    if (matchesSearch && matchesCategory) {
                        filteredTrips.add(trip);
                    }
                }
                
                // Sort trips
                if (sortSpinner != null) {
                    String sortOption = sortSpinner.getSelectedItem().toString();
                    switch (sortOption) {
                        case "Oldest First":
                            Collections.sort(filteredTrips, (a, b) -> Long.compare(a.getStartTime(), b.getStartTime()));
                            break;
                        case "Distance High-Low":
                            Collections.sort(filteredTrips, (a, b) -> Double.compare(b.getDistance(), a.getDistance()));
                            break;
                        case "Distance Low-High":
                            Collections.sort(filteredTrips, (a, b) -> Double.compare(a.getDistance(), b.getDistance()));
                            break;
                        default: // "Newest First"
                            Collections.sort(filteredTrips, (a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
                            break;
                    }
                }
                
                displayTrips();
            }

            private void displayTrips() {
                if (tripsContainer == null) return;
                
                tripsContainer.removeAllViews();
                
                if (filteredTrips.isEmpty()) {
                    TextView noTripsText = new TextView(this);
                    noTripsText.setText("No trips found");
                    noTripsText.setTextSize(16);
                    noTripsText.setTextColor(Color.parseColor("#666"));
                    noTripsText.setGravity(Gravity.CENTER);
                    noTripsText.setPadding(0, 100, 0, 100);
                    tripsContainer.addView(noTripsText);
                    return;
                }
                
                for (Trip trip : filteredTrips) {
                    LinearLayout tripCard = createTripCard(trip);
                    tripsContainer.addView(tripCard);
                }
            }

            private LinearLayout createTripCard(Trip trip) {
                LinearLayout card = new LinearLayout(this);
                card.setOrientation(LinearLayout.VERTICAL);
                card.setPadding(40, 30, 40, 30);
                card.setBackgroundColor(Color.WHITE);
                LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
                cardParams.setMargins(0, 0, 0, 20);
                card.setLayoutParams(cardParams);
                
                // Header row
                LinearLayout headerRow = new LinearLayout(this);
                headerRow.setOrientation(LinearLayout.HORIZONTAL);
                headerRow.setGravity(Gravity.CENTER_VERTICAL);
                
                // Distance with auto-detection indicator
                TextView distanceText = new TextView(this);
                String autoIndicator = trip.isAutoDetected() ? "ðŸ¤– " : "âœ‹ ";
                distanceText.setText(autoIndicator + String.format("%.2f miles", trip.getDistance()));
                distanceText.setTextSize(18);
                distanceText.setTextColor(Color.parseColor("#2196F3"));
                LinearLayout.LayoutParams distanceParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                distanceText.setLayoutParams(distanceParams);
                headerRow.addView(distanceText);
                
                TextView categoryText = new TextView(this);
                categoryText.setText(trip.getCategory());
                categoryText.setTextSize(14);
                categoryText.setTextColor(Color.WHITE);
                categoryText.setPadding(20, 10, 20, 10);
                categoryText.setGravity(Gravity.CENTER);
                
                switch (trip.getCategory()) {
                    case "Business":
                        categoryText.setBackgroundColor(Color.parseColor("#4CAF50"));
                        break;
                    case "Personal":
                        categoryText.setBackgroundColor(Color.parseColor("#FF9800"));
                        break;
                    case "Medical":
                        categoryText.setBackgroundColor(Color.parseColor("#F44336"));
                        break;
                    case "Charity":
                        categoryText.setBackgroundColor(Color.parseColor("#9C27B0"));
                        break;
                    default:
                        categoryText.setBackgroundColor(Color.parseColor("#666"));
                        break;
                }
                
                headerRow.addView(categoryText);
                card.addView(headerRow);
                
                // Date
                TextView dateText = new TextView(this);
                SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy 'at' h:mm a", Locale.getDefault());
                dateText.setText(sdf.format(new Date(trip.getStartTime())));
                dateText.setTextSize(12);
                dateText.setTextColor(Color.parseColor("#666"));
                dateText.setPadding(0, 10, 0, 10);
                card.addView(dateText);
                
                // Locations
                TextView locationsText = new TextView(this);
                locationsText.setText("From: " + trip.getStartLocation() + "\nTo: " + trip.getEndLocation());
                locationsText.setTextSize(14);
                locationsText.setTextColor(Color.parseColor("#333"));
                locationsText.setPadding(0, 10, 0, 10);
                card.addView(locationsText);
                
                // Client and notes
                if (!trip.getClientName().isEmpty() || !trip.getNotes().isEmpty()) {
                    TextView clientNotesText = new TextView(this);
                    String clientNotes = "";
                    if (!trip.getClientName().isEmpty()) {
                        clientNotes += "Client: " + trip.getClientName();
                    }
                    if (!trip.getNotes().isEmpty()) {
                        if (!clientNotes.isEmpty()) clientNotes += "\n";
                        clientNotes += "Notes: " + trip.getNotes();
                    }
                    clientNotesText.setText(clientNotes);
                    clientNotesText.setTextSize(12);
                    clientNotesText.setTextColor(Color.parseColor("#666"));
                    clientNotesText.setPadding(0, 10, 0, 0);
                    card.addView(clientNotesText);
                }
                
                // Action buttons
                LinearLayout actionsRow = new LinearLayout(this);
                actionsRow.setOrientation(LinearLayout.HORIZONTAL);
                actionsRow.setPadding(0, 20, 0, 0);
                
                Button editButton = new Button(this);
                editButton.setText("Edit");
                editButton.setTextColor(Color.parseColor("#2196F3"));
                editButton.setBackgroundColor(Color.parseColor("#E3F2FD"));
                editButton.setOnClickListener(v -> editTrip(trip));
                LinearLayout.LayoutParams actionParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                actionParams.setMargins(0, 0, 20, 0);
                editButton.setLayoutParams(actionParams);
                actionsRow.addView(editButton);
                
                Button deleteButton = new Button(this);
                deleteButton.setText("Delete");
                deleteButton.setTextColor(Color.parseColor("#F44336"));
                deleteButton.setBackgroundColor(Color.parseColor("#FFEBEE"));
                deleteButton.setOnClickListener(v -> deleteTrip(trip));
                actionParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                deleteButton.setLayoutParams(actionParams);
                actionsRow.addView(deleteButton);
                
                card.addView(actionsRow);
                
                return card;
            }

            private void editTrip(Trip trip) {
                // TODO: Implement trip editing
                Toast.makeText(this, "Edit trip functionality coming soon", Toast.LENGTH_SHORT).show();
            }

            private void deleteTrip(Trip trip) {
                tripStorage.deleteTrip(trip.getId());
                allTrips.remove(trip);
                filterTrips();
                updateStatsDisplay();
                Toast.makeText(this, "Trip deleted", Toast.LENGTH_SHORT).show();
            }

            private void updateStatsDisplay() {
                // Update dashboard stats
                if (dashboardContainer != null) {
                    // Find stats container and update
                    for (int i = 0; i < dashboardContainer.getChildCount(); i++) {
                        View child = dashboardContainer.getChildAt(i);
                        if (child instanceof LinearLayout) {
                            LinearLayout container = (LinearLayout) child;
                            if (container.getChildCount() > 1) {
                                View secondChild = container.getChildAt(1);
                                if (secondChild instanceof TextView) {
                                    TextView statsText = (TextView) secondChild;
                                    if (statsText.getText().toString().startsWith("Total Trips:")) {
                                        statsText.setText("Total Trips: " + allTrips.size());
                                        break;
                                    }
                                }
                            }
                        }
                    }
                }
            }

            private void downloadTripsFromCloud() {
                if (isDownloadingTrips) return;
                
                isDownloadingTrips = true;
                cloudBackupService.downloadTrips(new CloudBackupService.DownloadCallback() {
                    @Override
                    public void onDownloadComplete(List<Trip> downloadedTrips) {
                        isDownloadingTrips = false;
                        
                        if (downloadedTrips != null && !downloadedTrips.isEmpty()) {
                            Log.d(TAG, "Downloaded " + downloadedTrips.size() + " trips from cloud");
                            
                            // Merge with existing trips
                            for (Trip cloudTrip : downloadedTrips) {
                                boolean exists = false;
                                for (Trip localTrip : allTrips) {
                                    if (localTrip.getId() == cloudTrip.getId()) {
                                        exists = true;
                                        break;
                                    }
                                }
                                if (!exists) {
                                    allTrips.add(cloudTrip);
                                }
                            }
                            
                            // Sort by date
                            Collections.sort(allTrips, (a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
                            
                            // Update display
                            filterTrips();
                            updateStatsDisplay();
                            
                            Toast.makeText(MainActivity.this, "âœ… Trips synced from cloud", Toast.LENGTH_SHORT).show();
                        } else {
                            Log.d(TAG, "No new trips from cloud");
                        }
                    }
                    
                    @Override
                    public void onDownloadError(String error) {
                        isDownloadingTrips = false;
                        Log.e(TAG, "Download error: " + error);
                        Toast.makeText(MainActivity.this, "Cloud sync failed: " + error, Toast.LENGTH_SHORT).show();
                    }
                });
            }
        }
        EOF

    - name: Create Trip.java
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/Trip.java << 'EOF'
        package com.miletrackerpro.app.storage;

        import java.io.Serializable;

        public class Trip implements Serializable {
            private long id;
            private long startTime;
            private long endTime;
            private String startLocation;
            private String endLocation;
            private double distance;
            private String category;
            private String clientName;
            private String notes;
            private boolean isAutoDetected;

            public Trip(long id, long startTime, long endTime, String startLocation, String endLocation, 
                       double distance, String category, String clientName, String notes) {
                this.id = id;
                this.startTime = startTime;
                this.endTime = endTime;
                this.startLocation = startLocation;
                this.endLocation = endLocation;
                this.distance = distance;
                this.category = category;
                this.clientName = clientName;
                this.notes = notes;
                this.isAutoDetected = false; // Default to manual
            }

            public Trip(long id, long startTime, long endTime, String startLocation, String endLocation, 
                       double distance, String category, String clientName, String notes, boolean isAutoDetected) {
                this.id = id;
                this.startTime = startTime;
                this.endTime = endTime;
                this.startLocation = startLocation;
                this.endLocation = endLocation;
                this.distance = distance;
                this.category = category;
                this.clientName = clientName;
                this.notes = notes;
                this.isAutoDetected = isAutoDetected;
            }

            // Getters and setters
            public long getId() { return id; }
            public void setId(long id) { this.id = id; }

            public long getStartTime() { return startTime; }
            public void setStartTime(long startTime) { this.startTime = startTime; }

            public long getEndTime() { return endTime; }
            public void setEndTime(long endTime) { this.endTime = endTime; }

            public String getStartLocation() { return startLocation; }
            public void setStartLocation(String startLocation) { this.startLocation = startLocation; }

            public String getEndLocation() { return endLocation; }
            public void setEndLocation(String endLocation) { this.endLocation = endLocation; }

            public double getDistance() { return distance; }
            public void setDistance(double distance) { this.distance = distance; }

            public String getCategory() { return category; }
            public void setCategory(String category) { this.category = category; }

            public String getClientName() { return clientName; }
            public void setClientName(String clientName) { this.clientName = clientName; }

            public String getNotes() { return notes; }
            public void setNotes(String notes) { this.notes = notes; }

            public boolean isAutoDetected() { return isAutoDetected; }
            public void setAutoDetected(boolean autoDetected) { this.isAutoDetected = autoDetected; }

            public long getDuration() {
                return endTime - startTime;
            }

            @Override
            public String toString() {
                return "Trip{" +
                        "id=" + id +
                        ", startTime=" + startTime +
                        ", endTime=" + endTime +
                        ", startLocation='" + startLocation + '\'' +
                        ", endLocation='" + endLocation + '\'' +
                        ", distance=" + distance +
                        ", category='" + category + '\'' +
                        ", clientName='" + clientName + '\'' +
                        ", notes='" + notes + '\'' +
                        '}';
            }
        }
        EOF

    - name: Create TripStorage.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
        package com.miletrackerpro.app.storage;

        import android.content.Context;
        import android.content.SharedPreferences;
        import android.util.Log;
        import com.miletrackerpro.app.storage.DeviceIdentification;
        import java.util.ArrayList;
        import java.util.List;

        public class TripStorage {
            private static final String TAG = "TripStorage";
            private static final String PREFS_NAME = "MileTrackerTrips";
            private static final String TRIPS_KEY = "trips";
            private Context context;

            public TripStorage(Context context) {
                this.context = context;
            }

            public void saveTrip(Trip trip) {
                try {
                    List<Trip> trips = getAllTrips();
                    
                    // Check if trip already exists and update it
                    boolean updated = false;
                    for (int i = 0; i < trips.size(); i++) {
                        if (trips.get(i).getId() == trip.getId()) {
                            trips.set(i, trip);
                            updated = true;
                            break;
                        }
                    }
                    
                    if (!updated) {
                        trips.add(trip);
                    }
                    
                    saveAllTrips(trips);
                    Log.d(TAG, "Trip saved: " + trip.getId());
                } catch (Exception e) {
                    Log.e(TAG, "Error saving trip", e);
                }
            }

            public void deleteTrip(long tripId) {
                try {
                    // Remove from local storage
                    List<Trip> trips = getAllTrips();
                    trips.removeIf(trip -> trip.getId() == tripId);
                    saveAllTrips(trips);
                    
                    // Delete from API if available
                    new Thread(() -> {
                        try {
                            java.net.URL url = new java.net.URL("https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev/api/trips/" + tripId);
                            java.net.HttpURLConnection conn = (java.net.HttpURLConnection) url.openConnection();
                            conn.setRequestMethod("DELETE");
                            conn.setConnectTimeout(5000);
                            conn.setReadTimeout(5000);
                            
                            int responseCode = conn.getResponseCode();
                            Log.d(TAG, "Trip deleted from API: " + tripId + ", Response: " + responseCode);
                            conn.disconnect();
                        } catch (Exception e) {
                            Log.w(TAG, "Could not delete trip from API: " + e.getMessage());
                        }
                    }).start();
                    
                    Log.d(TAG, "Trip deleted: " + tripId);
                } catch (Exception e) {
                    Log.e(TAG, "Error deleting trip", e);
                }
            }

            public List<Trip> getAllTrips() {
                try {
                    SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                    String tripsData = prefs.getString(TRIPS_KEY, "");
                    
                    if (tripsData.isEmpty()) {
                        return new ArrayList<>();
                    }
                    
                    return deserializeTrips(tripsData);
                } catch (Exception e) {
                    Log.e(TAG, "Error loading trips", e);
                    return new ArrayList<>();
                }
            }

            private void saveAllTrips(List<Trip> trips) {
                try {
                    SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                    String tripsData = serializeTrips(trips);
                    prefs.edit().putString(TRIPS_KEY, tripsData).apply();
                } catch (Exception e) {
                    Log.e(TAG, "Error saving trips", e);
                }
            }

            private String serializeTrips(List<Trip> trips) {
                StringBuilder sb = new StringBuilder();
                for (Trip trip : trips) {
                    sb.append(trip.getId()).append("|")
                      .append(trip.getStartTime()).append("|")
                      .append(trip.getEndTime()).append("|")
                      .append(trip.getStartLocation()).append("|")
                      .append(trip.getEndLocation()).append("|")
                      .append(trip.getDistance()).append("|")
                      .append(trip.getCategory()).append("|")
                      .append(trip.getClientName()).append("|")
                      .append(trip.getNotes()).append("\n");
                }
                return sb.toString();
            }

            private List<Trip> deserializeTrips(String data) {
                List<Trip> trips = new ArrayList<>();
                String[] lines = data.split("\n");
                
                for (String line : lines) {
                    if (line.trim().isEmpty()) continue;
                    
                    String[] parts = line.split("\\|");
                    if (parts.length >= 9) {
                        try {
                            Trip trip = new Trip(
                                Long.parseLong(parts[0]),
                                Long.parseLong(parts[1]),
                                Long.parseLong(parts[2]),
                                parts[3],
                                parts[4],
                                Double.parseDouble(parts[5]),
                                parts[6],
                                parts[7],
                                parts[8]
                            );
                            trips.add(trip);
                        } catch (NumberFormatException e) {
                            Log.e(TAG, "Error parsing trip data: " + line);
                        }
                    }
                }
                
                return trips;
            }

            public String getStableDeviceId() {
                return DeviceIdentification.getStableDeviceId(context);
            }

            public String getUserId() {
                return DeviceIdentification.getUserId(context);
            }
            
            // User token storage methods for email/password authentication
            public String getUserToken() {
                SharedPreferences prefs = context.getSharedPreferences("miletracker_prefs", Context.MODE_PRIVATE);
                return prefs.getString("user_token", null);
            }
            
            public void saveUserToken(String token) {
                SharedPreferences prefs = context.getSharedPreferences("miletracker_prefs", Context.MODE_PRIVATE);
                prefs.edit().putString("user_token", token).apply();
                Log.d(TAG, "User token saved");
            }
            
            public void clearUserToken() {
                SharedPreferences prefs = context.getSharedPreferences("miletracker_prefs", Context.MODE_PRIVATE);
                prefs.edit().remove("user_token").apply();
                Log.d(TAG, "User token cleared");
            }

            public boolean isAutoDetectionEnabled() {
                SharedPreferences prefs = context.getSharedPreferences("miletracker_prefs", Context.MODE_PRIVATE);
                return prefs.getBoolean("auto_detection_enabled", false);
            }

            public void setAutoDetectionEnabled(boolean enabled) {
                SharedPreferences prefs = context.getSharedPreferences("miletracker_prefs", Context.MODE_PRIVATE);
                prefs.edit().putBoolean("auto_detection_enabled", enabled).apply();
            }
        }
        EOF

    - name: Create DeviceIdentification.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/DeviceIdentification.java << 'EOF'
        package com.miletrackerpro.app.storage;

        import android.content.Context;
        import android.content.SharedPreferences;
        import android.os.Build;
        import android.provider.Settings;
        import android.util.Log;
        import java.security.MessageDigest;
        import java.util.UUID;

        public class DeviceIdentification {
            private static final String TAG = "DeviceIdentification";
            private static final String PREFS_NAME = "device_identification";
            private static final String DEVICE_ID_KEY = "stable_device_id";
            private static final String USER_ID_KEY = "user_id";
            private static final String IS_LOGGED_IN_KEY = "is_logged_in";

            public static String getStableDeviceId(Context context) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                String deviceId = prefs.getString(DEVICE_ID_KEY, null);
                
                if (deviceId == null) {
                    // Generate a stable device ID
                    String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                    
                    if (androidId == null || androidId.equals("9774d56d682e549c")) {
                        // Fallback to UUID for emulators or problematic devices
                        androidId = UUID.randomUUID().toString();
                    }
                    
                    // Create a hash with device characteristics
                    String deviceInfo = androidId + Build.MODEL + Build.MANUFACTURER + Build.PRODUCT;
                    
                    try {
                        MessageDigest digest = MessageDigest.getInstance("SHA-256");
                        byte[] hash = digest.digest(deviceInfo.getBytes());
                        StringBuilder hexString = new StringBuilder();
                        for (byte b : hash) {
                            String hex = Integer.toHexString(0xff & b);
                            if (hex.length() == 1) hexString.append('0');
                            hexString.append(hex);
                        }
                        deviceId = hexString.toString().substring(0, 32);
                    } catch (Exception e) {
                        Log.e(TAG, "Error generating device ID", e);
                        deviceId = UUID.randomUUID().toString().replace("-", "");
                    }
                    
                    // Save the generated ID
                    prefs.edit().putString(DEVICE_ID_KEY, deviceId).apply();
                    Log.d(TAG, "Generated stable device ID: " + deviceId);
                }
                
                return deviceId;
            }

            public static String getUserId(Context context) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                String userId = prefs.getString(USER_ID_KEY, null);
                
                if (userId == null) {
                    // Default to the stable device ID for now
                    userId = getStableDeviceId(context);
                    prefs.edit().putString(USER_ID_KEY, userId).apply();
                }
                
                return userId;
            }

            public static void setUserId(Context context, String userId) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                prefs.edit().putString(USER_ID_KEY, userId).apply();
            }

            public static boolean isLoggedIn(Context context) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                return prefs.getBoolean(IS_LOGGED_IN_KEY, false) && getUserId(context) != null;
            }

            // Get current user info
            public String getUserId() {
                return prefs.getString(USER_ID_KEY, null);
            }

            public void setLoggedIn(Context context, boolean loggedIn) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                prefs.edit().putBoolean(IS_LOGGED_IN_KEY, loggedIn).apply();
            }

            // Clear all user data (for logout)
            public static void clearUserData(Context context) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                prefs.edit()
                    .remove(USER_ID_KEY)
                    .remove(IS_LOGGED_IN_KEY)
                    .apply();
            }
        }
        EOF

    - name: Create CloudBackupService.java
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/sync
        cat > android/app/src/main/java/com/miletrackerpro/app/sync/CloudBackupService.java << 'EOF'
        package com.miletrackerpro.app.sync;

        import android.content.Context;
        import android.util.Log;
        import com.miletrackerpro.app.storage.Trip;
        import com.miletrackerpro.app.storage.TripStorage;

        import java.io.BufferedReader;
        import java.io.InputStreamReader;
        import java.io.OutputStream;
        import java.net.HttpURLConnection;
        import java.net.URL;
        import java.nio.charset.StandardCharsets;
        import java.util.ArrayList;
        import java.util.List;
        import java.util.concurrent.ExecutorService;
        import java.util.concurrent.Executors;

        public class CloudBackupService {
            private static final String TAG = "CloudBackupService";
            private static final String API_BASE_URL = "https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev/api";
            
            private Context context;
            private TripStorage tripStorage;
            private ExecutorService executorService;

            public CloudBackupService(Context context, TripStorage tripStorage) {
                this.context = context;
                this.tripStorage = tripStorage;
                this.executorService = Executors.newFixedThreadPool(3);
            }

            public interface DownloadCallback {
                void onDownloadComplete(List<Trip> trips);
                void onDownloadError(String error);
            }

            public void uploadTrip(Trip trip) {
                executorService.execute(() -> {
                    try {
                        Log.d(TAG, "Uploading trip: " + trip.getId());
                        
                        URL url = new URL(API_BASE_URL + "/trips");
                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                        conn.setRequestMethod("POST");
                        conn.setRequestProperty("User-Agent", "MileTrackerPro-Android/4.9.76");
                        conn.setRequestProperty("Content-Type", "application/json");
                        
                        // Use proper user authentication token instead of admin token
                        String userToken = tripStorage.getUserToken();
                        if (userToken == null || userToken.isEmpty()) {
                            Log.d(TAG, "No user token found, attempting login...");
                            userToken = authenticateUser("pcates@catesconsultinggroup.com", "your_password_here");
                            if (userToken != null) {
                                tripStorage.saveUserToken(userToken);
                            }
                        }
                        
                        if (userToken != null) {
                            conn.setRequestProperty("Authorization", "Bearer " + userToken);
                        } else {
                            Log.e(TAG, "Failed to authenticate user, using admin token as fallback");
                            conn.setRequestProperty("Authorization", "Bearer demo-admin-token");
                        }
                        
                        conn.setDoOutput(true);
                        conn.setConnectTimeout(10000);
                        conn.setReadTimeout(10000);

                        String jsonPayload = createTripJson(trip, tripStorage.getStableDeviceId(), tripStorage.getUserId());

                        try (OutputStream os = conn.getOutputStream()) {
                            byte[] input = jsonPayload.getBytes(StandardCharsets.UTF_8);
                            os.write(input, 0, input.length);
                        }

                        int responseCode = conn.getResponseCode();
                        Log.d(TAG, "Upload response code: " + responseCode);
                        
                        if (responseCode == 201 || responseCode == 200) {
                            Log.d(TAG, "Trip uploaded successfully");
                        } else {
                            Log.e(TAG, "Upload failed with code: " + responseCode);
                        }
                        
                        conn.disconnect();
                    } catch (Exception e) {
                        Log.e(TAG, "Error uploading trip", e);
                    }
                });
            }

            public void downloadTrips(DownloadCallback callback) {
                executorService.execute(() -> {
                    try {
                        String deviceId = tripStorage.getStableDeviceId();
                        String userId = tripStorage.getUserId();
                        Log.d(TAG, "Starting download trips for device: " + deviceId + ", user: " + userId);

                        // Email/password authentication approach - get user-specific trips only
                        String userToken = tripStorage.getUserToken();
                        if (userToken == null || userToken.isEmpty()) {
                            Log.d(TAG, "No user token found, attempting login...");
                            userToken = authenticateUser("pcates@catesconsultinggroup.com", "your_password_here");
                            if (userToken != null) {
                                tripStorage.saveUserToken(userToken);
                            }
                        }

                        URL url = new URL(API_BASE_URL + "/trips");
                        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                        conn.setRequestMethod("GET");
                        conn.setRequestProperty("User-Agent", "MileTrackerPro-Android/4.9.76");
                        conn.setRequestProperty("Content-Type", "application/json");
                        
                        // Use user-specific token to get only their trips
                        if (userToken != null) {
                            conn.setRequestProperty("Authorization", "Bearer " + userToken);
                        } else {
                            Log.e(TAG, "Failed to authenticate user, using admin token as fallback");
                            conn.setRequestProperty("Authorization", "Bearer demo-admin-token");
                        }
                        
                        conn.setConnectTimeout(10000);
                        conn.setReadTimeout(10000);

                        int responseCode = conn.getResponseCode();
                        Log.d(TAG, "Download response code: " + responseCode);

                        if (responseCode == 200) {
                            StringBuilder response = new StringBuilder();
                            try (BufferedReader reader = new BufferedReader(
                                    new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
                                String line;
                                while ((line = reader.readLine()) != null) {
                                    response.append(line);
                                }
                            }

                            List<Trip> trips = parseTripsJson(response.toString());
                            
                            // Enhanced debugging - show what we actually received
                            Log.d(TAG, "Raw API response: " + response.toString().substring(0, Math.min(500, response.toString().length())));
                            Log.d(TAG, "Parsed " + trips.size() + " trips from API");
                            
                            // Log sample trip data for debugging
                            if (!trips.isEmpty()) {
                                Trip sampleTrip = trips.get(0);
                                Log.d(TAG, "Sample trip: ID=" + sampleTrip.getId() + 
                                    ", Start=" + sampleTrip.getStartLocation() + 
                                    ", End=" + sampleTrip.getEndLocation() + 
                                    ", Distance=" + sampleTrip.getDistance() + 
                                    ", Date=" + new java.util.Date(sampleTrip.getStartTime()));
                            }
                            
                            callback.onDownloadComplete(trips);
                        } else {
                            String errorMsg = "Download failed with code: " + responseCode;
                            Log.e(TAG, errorMsg);
                            callback.onDownloadError(errorMsg);
                        }
                        
                        conn.disconnect();
                    } catch (Exception e) {
                        Log.e(TAG, "Error downloading trips", e);
                        callback.onDownloadError(e.getMessage());
                    }
                });
            }

            private String createTripJson(Trip trip, String deviceId, String userId) {
                return "{"
                    + "\"id\":" + trip.getId() + ","
                    + "\"device_id\":\"" + deviceId + "\","
                    + "\"user_id\":\"" + userId + "\","
                    + "\"start_time\":" + trip.getStartTime() + ","
                    + "\"end_time\":" + trip.getEndTime() + ","
                    + "\"start_location\":\"" + trip.getStartLocation() + "\","
                    + "\"end_location\":\"" + trip.getEndLocation() + "\","
                    + "\"distance\":" + trip.getDistance() + ","
                    + "\"category\":\"" + trip.getCategory() + "\","
                    + "\"client_name\":\"" + trip.getClientName() + "\","
                    + "\"notes\":\"" + trip.getNotes() + "\""
                    + "}";
            }

            private List<Trip> parseTripsJson(String json) {
                List<Trip> trips = new ArrayList<>();
                try {
                    // Simple JSON parsing - extract trips array
                    if (json.startsWith("{") && json.contains("\"trips\"")) {
                        int tripsStart = json.indexOf("[", json.indexOf("\"trips\""));
                        int tripsEnd = json.lastIndexOf("]");
                        if (tripsStart != -1 && tripsEnd != -1) {
                            json = json.substring(tripsStart + 1, tripsEnd);
                        }
                    } else if (json.startsWith("[")) {
                        json = json.substring(1, json.length() - 1);
                    }
                    
                    // Parse each trip object
                    String[] tripObjects = json.split("\\},\\s*\\{");
                    for (String tripStr : tripObjects) {
                        tripStr = tripStr.replace("{", "").replace("}", "");
                        if (tripStr.trim().isEmpty()) continue;
                        
                        try {
                            Trip trip = parseSingleTrip(tripStr);
                            if (trip != null) {
                                trips.add(trip);
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error parsing trip: " + tripStr, e);
                        }
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error parsing trips JSON", e);
                }
                return trips;
            }

            private Trip parseSingleTrip(String tripStr) {
                try {
                    String[] fields = tripStr.split(",");
                    
                    long id = 0;
                    long startTime = 0;
                    long endTime = 0;
                    String startLocation = "";
                    String endLocation = "";
                    double distance = 0.0;
                    String category = "Business";
                    String clientName = "";
                    String notes = "";
                    boolean isAutoDetected = false;
                    
                    for (String field : fields) {
                        String[] keyValue = field.split(":", 2);
                        if (keyValue.length != 2) continue;
                        
                        String key = keyValue[0].trim().replace("\"", "");
                        String value = keyValue[1].trim().replace("\"", "");
                        
                        switch (key) {
                            case "id":
                                id = Long.parseLong(value);
                                break;
                            case "start_time":
                                startTime = parseTimestamp(value);
                                break;
                            case "end_time":
                                endTime = parseTimestamp(value);
                                break;
                            case "start_location":
                            case "start_address":
                            case "startAddress":
                                startLocation = value;
                                break;
                            case "end_location":
                            case "end_address":
                            case "endAddress":
                                endLocation = value;
                                break;
                            case "distance":
                            case "distance_miles":
                                distance = Double.parseDouble(value);
                                break;
                            case "category":
                                category = value;
                                break;
                            case "client_name":
                                clientName = value;
                                break;
                            case "notes":
                                notes = value;
                                break;
                            case "isAutoDetected":
                            case "auto_detected":
                                isAutoDetected = Boolean.parseBoolean(value);
                                break;
                        }
                    }
                    
                    return new Trip(id, startTime, endTime, startLocation, endLocation, distance, category, clientName, notes, isAutoDetected);
                } catch (Exception e) {
                    Log.e(TAG, "Error parsing single trip", e);
                    return null;
                }
            }

            // Email/Password Authentication Methods
            private String authenticateUser(String email, String password) {
                try {
                    Log.d(TAG, "Authenticating user: " + email);
                    
                    String loginUrl = API_BASE_URL + "/auth/login";
                    URL url = new URL(loginUrl);
                    HttpURLConnection conn = (HttpURLConnection) url.openConnection();
                    conn.setRequestMethod("POST");
                    conn.setRequestProperty("Content-Type", "application/json");
                    conn.setDoOutput(true);
                    
                    // Create login JSON
                    String loginJson = "{\"email\":\"" + email + "\",\"password\":\"" + password + "\"}";
                    
                    try (OutputStream os = conn.getOutputStream()) {
                        byte[] input = loginJson.getBytes(StandardCharsets.UTF_8);
                        os.write(input, 0, input.length);
                    }
                    
                    int responseCode = conn.getResponseCode();
                    Log.d(TAG, "Login response code: " + responseCode);
                    
                    if (responseCode == 200) {
                        StringBuilder response = new StringBuilder();
                        try (BufferedReader reader = new BufferedReader(
                                new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8))) {
                            String line;
                            while ((line = reader.readLine()) != null) {
                                response.append(line);
                            }
                        }
                        
                        // Parse token from response
                        String responseStr = response.toString();
                        if (responseStr.contains("\"token\"")) {
                            int tokenStart = responseStr.indexOf("\"token\":\"") + 9;
                            int tokenEnd = responseStr.indexOf("\"", tokenStart);
                            if (tokenStart > 8 && tokenEnd > tokenStart) {
                                String token = responseStr.substring(tokenStart, tokenEnd);
                                Log.d(TAG, "Login successful, token received");
                                return token;
                            }
                        }
                        
                        Log.e(TAG, "Login response missing token: " + responseStr);
                        return null;
                    } else {
                        Log.e(TAG, "Login failed with code: " + responseCode);
                        return null;
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Authentication error", e);
                    return null;
                }
            }
            
            private long parseTimestamp(String timestampStr) {
                try {
                    // Try parsing as milliseconds first
                    long timestamp = Long.parseLong(timestampStr);
                    
                    // If it's in seconds, convert to milliseconds
                    if (timestamp < 1000000000000L) {
                        timestamp *= 1000;
                    }
                    
                    // Validate timestamp is reasonable (between 2020 and 2030)
                    if (timestamp < 1577836800000L || timestamp > 1893456000000L) {
                        Log.w(TAG, "Invalid timestamp: " + timestampStr + " -> " + timestamp);
                        // Don't return current time as fallback to avoid wrong dates
                        return 0;
                    }
                    
                    return timestamp;
                } catch (NumberFormatException e) {
                    Log.e(TAG, "Error parsing timestamp: " + timestampStr, e);
                    return 0;
                }
            }
        }
        EOF

    - name: Create Android manifest
      run: |
        mkdir -p android/app/src/main
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

            <application
                android:allowBackup="true"
                android:icon="@android:drawable/ic_menu_mylocation"
                android:label="MileTracker Pro"
                android:theme="@style/Theme.AppCompat.Light.DarkActionBar">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
            </application>
        </manifest>
        EOF

    - name: Create build.gradle (app level)
      run: |
        cat > android/app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'

        android {
            compileSdkVersion 35
            buildToolsVersion "35.0.0"

            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdkVersion 21
                targetSdkVersion 35
                versionCode 477
                versionName "4.9.77"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.core:core:1.12.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF

    - name: Create build.gradle (project level)
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.1.4'
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }

        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF

    - name: Create gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        EOF

    - name: Create settings.gradle
      run: |
        cat > android/settings.gradle << 'EOF'
        rootProject.name = "MileTrackerPro"
        include ':app'
        EOF

    - name: Create proguard-rules.pro
      run: |
        cat > android/app/proguard-rules.pro << 'EOF'
        # Add project specific ProGuard rules here.
        -keep class com.miletrackerpro.app.** { *; }
        -dontwarn java.lang.invoke.**
        EOF

    - name: Create gradle wrapper
      run: |
        mkdir -p android/gradle/wrapper
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF

    - name: Make gradlew executable
      run: |
        cat > android/gradlew << 'EOF'
        #!/usr/bin/env sh
        exec gradle "$@"
        EOF
        chmod +x android/gradlew

    - name: Build APK
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon --stacktrace

    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: MileTracker-Pro-v4.9.77-AUTO-DETECTION.apk
        path: android/app/build/outputs/apk/release/app-release-unsigned.apk
