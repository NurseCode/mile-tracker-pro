name: Build Android APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Build version code'
        required: false
        default: '109'
      
jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm install
        npm install -g @expo/cli
        
    - name: Generate android project
      run: |
        npx expo prebuild --platform android --clean --no-install
        
    - name: Create Android app source
      run: |
        mkdir -p android-app/src/main/java/com/miletrackerpro/app
        cat > android-app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.Manifest;
        import android.app.AlertDialog;
        import android.content.Context;
        import android.content.DialogInterface;
        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.content.pm.PackageManager;
        import android.graphics.Color;
        import android.graphics.Typeface;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.net.Uri;
        import android.os.Bundle;
        import android.os.Handler;
        import android.os.Looper;
        import android.text.InputType;
        import android.util.Log;
        import android.view.Gravity;
        import android.view.View;
        import android.view.ViewGroup;
        import android.widget.Button;
        import android.widget.EditText;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.TableLayout;
        import android.widget.TableRow;
        import android.widget.TextView;
        import android.widget.Toast;
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import androidx.core.content.FileProvider;
        import java.io.File;
        import java.io.FileWriter;
        import java.io.IOException;
        import java.text.SimpleDateFormat;
        import java.util.*;

        // Trip data class
        class Trip {
            private String startLocation;
            private String endLocation;
            private double distance;
            private long startTime;
            private long endTime;
            private String category;
            private String clientName;
            private String notes;
            private boolean autoDetected;
            private String deviceId;
            private String userId;
            private String id;

            public Trip(String startLocation, String endLocation, double distance, long startTime, long endTime, String category, String clientName, String notes, boolean autoDetected, String deviceId, String userId) {
                this.startLocation = startLocation;
                this.endLocation = endLocation;
                this.distance = distance;
                this.startTime = startTime;
                this.endTime = endTime;
                this.category = category;
                this.clientName = clientName;
                this.notes = notes;
                this.autoDetected = autoDetected;
                this.deviceId = deviceId;
                this.userId = userId;
                this.id = UUID.randomUUID().toString();
            }

            // Constructor for loading from storage
            public Trip(String id, String startLocation, String endLocation, double distance, long startTime, long endTime, String category, String clientName, String notes, boolean autoDetected, String deviceId, String userId) {
                this.id = id;
                this.startLocation = startLocation;
                this.endLocation = endLocation;
                this.distance = distance;
                this.startTime = startTime;
                this.endTime = endTime;
                this.category = category;
                this.clientName = clientName;
                this.notes = notes;
                this.autoDetected = autoDetected;
                this.deviceId = deviceId;
                this.userId = userId;
            }

            // Getters and setters
            public String getId() { return id; }
            public String getStartLocation() { return startLocation; }
            public void setStartLocation(String startLocation) { this.startLocation = startLocation; }
            public String getEndLocation() { return endLocation; }
            public void setEndLocation(String endLocation) { this.endLocation = endLocation; }
            public double getDistance() { return distance; }
            public void setDistance(double distance) { this.distance = distance; }
            public long getStartTime() { return startTime; }
            public void setStartTime(long startTime) { this.startTime = startTime; }
            public long getEndTime() { return endTime; }
            public void setEndTime(long endTime) { this.endTime = endTime; }
            public String getCategory() { return category; }
            public void setCategory(String category) { this.category = category; }
            public String getClientName() { return clientName; }
            public void setClientName(String clientName) { this.clientName = clientName; }
            public String getNotes() { return notes; }
            public void setNotes(String notes) { this.notes = notes; }
            public boolean isAutoDetected() { return autoDetected; }
            public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }
            public String getDeviceId() { return deviceId; }
            public void setDeviceId(String deviceId) { this.deviceId = deviceId; }
            public String getUserId() { return userId; }
            public void setUserId(String userId) { this.userId = userId; }
        }

        // Service for cloud backup/sync
        class CloudBackupService {
            private static final String TAG = "CloudBackupService";
            private static final String API_BASE_URL = "https://mileage-tracker-codenurse.replit.app";
            private Context context;
            private String userEmail;
            private String deviceId;

            public CloudBackupService(Context context, String userEmail, String deviceId) {
                this.context = context;
                this.userEmail = userEmail;
                this.deviceId = deviceId;
            }

            public void uploadTrip(Trip trip) {
                // Placeholder for now - would implement actual API call
                Log.d(TAG, "Uploading trip: " + trip.getStartLocation() + " to " + trip.getEndLocation());
            }

            public void downloadTrips() {
                // Placeholder for now - would implement actual API call
                Log.d(TAG, "Downloading trips for user: " + userEmail);
            }
        }

        // Storage class for trips
        class TripStorage {
            private static final String PREFS_NAME = "miletracker_trips";
            private static final String TRIP_COUNT_KEY = "trip_count";
            private static final String TRIP_PREFIX = "trip_";
            private static final String API_SYNC_KEY = "api_sync_enabled";
            private Context context;
            private SharedPreferences prefs;
            private boolean apiSyncEnabled;

            public TripStorage(Context context) {
                this.context = context;
                this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                this.apiSyncEnabled = prefs.getBoolean(API_SYNC_KEY, false);
            }

            public void saveTrip(Trip trip) {
                SharedPreferences.Editor editor = prefs.edit();
                int count = prefs.getInt(TRIP_COUNT_KEY, 0);
                
                String key = TRIP_PREFIX + count;
                editor.putString(key + "_id", trip.getId());
                editor.putString(key + "_start", trip.getStartLocation());
                editor.putString(key + "_end", trip.getEndLocation());
                editor.putFloat(key + "_distance", (float) trip.getDistance());
                editor.putLong(key + "_start_time", trip.getStartTime());
                editor.putLong(key + "_end_time", trip.getEndTime());
                editor.putString(key + "_category", trip.getCategory());
                editor.putString(key + "_client", trip.getClientName());
                editor.putString(key + "_notes", trip.getNotes());
                editor.putBoolean(key + "_auto", trip.isAutoDetected());
                editor.putString(key + "_device", trip.getDeviceId());
                editor.putString(key + "_user", trip.getUserId());
                
                editor.putInt(TRIP_COUNT_KEY, count + 1);
                editor.apply();
            }

            public List<Trip> getAllTrips() {
                List<Trip> trips = new ArrayList<>();
                int count = prefs.getInt(TRIP_COUNT_KEY, 0);
                
                for (int i = 0; i < count; i++) {
                    String key = TRIP_PREFIX + i;
                    String id = prefs.getString(key + "_id", "");
                    String start = prefs.getString(key + "_start", "");
                    String end = prefs.getString(key + "_end", "");
                    float distance = prefs.getFloat(key + "_distance", 0.0f);
                    long startTime = prefs.getLong(key + "_start_time", 0);
                    long endTime = prefs.getLong(key + "_end_time", 0);
                    String category = prefs.getString(key + "_category", "Personal");
                    String client = prefs.getString(key + "_client", "");
                    String notes = prefs.getString(key + "_notes", "");
                    boolean auto = prefs.getBoolean(key + "_auto", false);
                    String device = prefs.getString(key + "_device", "");
                    String user = prefs.getString(key + "_user", "");
                    
                    if (!start.isEmpty() && !end.isEmpty()) {
                        trips.add(new Trip(id, start, end, distance, startTime, endTime, category, client, notes, auto, device, user));
                    }
                }
                
                return trips;
            }

            public void deleteTrip(String tripId) {
                List<Trip> trips = getAllTrips();
                SharedPreferences.Editor editor = prefs.edit();
                
                // Clear all trips
                editor.clear();
                editor.apply();
                
                // Re-save all trips except the one to delete
                int index = 0;
                for (Trip trip : trips) {
                    if (!trip.getId().equals(tripId)) {
                        String key = TRIP_PREFIX + index;
                        editor.putString(key + "_id", trip.getId());
                        editor.putString(key + "_start", trip.getStartLocation());
                        editor.putString(key + "_end", trip.getEndLocation());
                        editor.putFloat(key + "_distance", (float) trip.getDistance());
                        editor.putLong(key + "_start_time", trip.getStartTime());
                        editor.putLong(key + "_end_time", trip.getEndTime());
                        editor.putString(key + "_category", trip.getCategory());
                        editor.putString(key + "_client", trip.getClientName());
                        editor.putString(key + "_notes", trip.getNotes());
                        editor.putBoolean(key + "_auto", trip.isAutoDetected());
                        editor.putString(key + "_device", trip.getDeviceId());
                        editor.putString(key + "_user", trip.getUserId());
                        index++;
                    }
                }
                
                editor.putInt(TRIP_COUNT_KEY, index);
                editor.putBoolean(API_SYNC_KEY, apiSyncEnabled);
                editor.apply();
            }

            public boolean isApiSyncEnabled() {
                return apiSyncEnabled;
            }

            public void setApiSyncEnabled(boolean enabled) {
                this.apiSyncEnabled = enabled;
                SharedPreferences.Editor editor = prefs.edit();
                editor.putBoolean(API_SYNC_KEY, enabled);
                editor.apply();
            }
        }

        // Device identification utility
        class DeviceIdentification {
            private static final String TAG = "DeviceIdentification";
            private static final String PREFS_NAME = "DeviceIdentificationPrefs";
            private static final String STABLE_DEVICE_ID_KEY = "stable_device_id";
            private static final String USER_ID_KEY = "user_id";

            public static String getStableDeviceId(Context context) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                String deviceId = prefs.getString(STABLE_DEVICE_ID_KEY, null);
                
                if (deviceId == null) {
                    deviceId = generateStableDeviceId(context);
                    prefs.edit().putString(STABLE_DEVICE_ID_KEY, deviceId).apply();
                }
                
                return deviceId;
            }

            public static String getUserId(Context context) {
                SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                String userId = prefs.getString(USER_ID_KEY, null);
                
                if (userId == null) {
                    userId = generateUserId(context);
                    prefs.edit().putString(USER_ID_KEY, userId).apply();
                }
                
                return userId;
            }

            private static String generateStableDeviceId(Context context) {
                return "device_" + UUID.randomUUID().toString().substring(0, 8);
            }

            private static String generateUserId(Context context) {
                return "user_" + UUID.randomUUID().toString().substring(0, 8);
            }
        }

        // User authentication manager
        class UserAuthManager {
            private static final String TAG = "UserAuthManager";
            private static final String PREFS_NAME = "UserAuthPrefs";
            private static final String USER_EMAIL_KEY = "user_email";
            private static final String AUTH_TOKEN_KEY = "auth_token";
            private static final String IS_AUTHENTICATED_KEY = "is_authenticated";
            private Context context;
            private SharedPreferences prefs;

            public UserAuthManager(Context context) {
                this.context = context;
                this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
            }

            public boolean isAuthenticated() {
                return prefs.getBoolean(IS_AUTHENTICATED_KEY, false);
            }

            public String getCurrentUserEmail() {
                return prefs.getString(USER_EMAIL_KEY, "");
            }

            public void login(String email, String token) {
                SharedPreferences.Editor editor = prefs.edit();
                editor.putString(USER_EMAIL_KEY, email);
                editor.putString(AUTH_TOKEN_KEY, token);
                editor.putBoolean(IS_AUTHENTICATED_KEY, true);
                editor.apply();
            }

            public void logout() {
                SharedPreferences.Editor editor = prefs.edit();
                editor.clear();
                editor.apply();
            }
        }

        // Main activity
        public class MainActivity extends AppCompatActivity {
            private static final String TAG = "MainActivity";
            private static final int LOCATION_PERMISSION_REQUEST_CODE = 1;
            
            private LocationManager locationManager;
            private boolean isTracking = false;
            private boolean autoDetectionEnabled = false;
            private Location lastLocation;
            private Location tripStartLocation;
            private long tripStartTime;
            private List<Location> tripLocations;
            private Handler handler;
            private Runnable locationRunnable;
            private boolean isBlinking = false;
            private Handler blinkHandler;
            
            private TripStorage tripStorage;
            private UserAuthManager authManager;
            private CloudBackupService cloudBackupService;
            private String deviceId;
            private String userId;
            
            // UI components
            private LinearLayout mainContentLayout;
            private TextView statsText;
            private Button startButton;
            private Button stopButton;
            private Button autoToggle;
            private LinearLayout tripsContainer;
            private Button currentTabButton;
            private Button dashboardTab;
            private Button tripsTab;
            private TextView totalTripsText;
            private TextView totalMilesText;
            private TextView totalDeductionsText;
            private LinearLayout recentTripsContainer;

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                // Initialize services
                tripStorage = new TripStorage(this);
                authManager = new UserAuthManager(this);
                deviceId = DeviceIdentification.getStableDeviceId(this);
                userId = DeviceIdentification.getUserId(this);
                
                // Initialize cloud backup if authenticated
                if (authManager.isAuthenticated()) {
                    cloudBackupService = new CloudBackupService(this, authManager.getCurrentUserEmail(), deviceId);
                }
                
                // Initialize UI
                setupUI();
                
                // Initialize location services
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                handler = new Handler(Looper.getMainLooper());
                blinkHandler = new Handler(Looper.getMainLooper());
                
                // Check permissions
                checkLocationPermission();
                
                // Update initial stats
                updateStats();
                showDashboard();
            }

            private void setupUI() {
                // Create main container
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.MATCH_PARENT
                ));
                mainLayout.setBackgroundColor(0xFFF5F5F5);
                
                // HEADER with Settings
                LinearLayout mainHeader = new LinearLayout(this);
                mainHeader.setOrientation(LinearLayout.HORIZONTAL);
                mainHeader.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ));
                mainHeader.setBackgroundColor(0xFF667eea);
                mainHeader.setPadding(20, 40, 20, 20);
                mainHeader.setGravity(Gravity.CENTER_VERTICAL);
                
                TextView mainHeaderText = new TextView(this);
                mainHeaderText.setText("MileTracker Pro");
                mainHeaderText.setTextSize(24);
                mainHeaderText.setTextColor(0xFFFFFFFF);
                mainHeaderText.setTypeface(null, Typeface.BOLD);
                
                LinearLayout.LayoutParams headerTextParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                mainHeaderText.setLayoutParams(headerTextParams);
                mainHeader.addView(mainHeaderText);
                
                // Settings gear icon in top-right corner
                Button settingsButton = new Button(this);
                settingsButton.setText("⚙");
                settingsButton.setTextSize(18);
                settingsButton.setTextColor(0xFFFFFFFF); // White gear
                settingsButton.setBackgroundColor(0x00000000); // Transparent background
                settingsButton.setPadding(15, 8, 15, 8);
                LinearLayout.LayoutParams settingsParams = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, LinearLayout.LayoutParams.WRAP_CONTENT);
                settingsButton.setLayoutParams(settingsParams);
                
                settingsButton.setOnClickListener(v -> {
                    showSettingsDialog();
                });
                
                mainHeader.addView(settingsButton);

                // MAIN CONTENT AREA
                mainContentLayout = new LinearLayout(this);
                mainContentLayout.setOrientation(LinearLayout.VERTICAL);
                LinearLayout.LayoutParams contentParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 
                    0, 
                    1.0f
                );
                mainContentLayout.setLayoutParams(contentParams);
                
                // TAB NAVIGATION
                LinearLayout tabNavigation = new LinearLayout(this);
                tabNavigation.setOrientation(LinearLayout.HORIZONTAL);
                tabNavigation.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ));
                tabNavigation.setBackgroundColor(0xFFFFFFFF);
                tabNavigation.setPadding(0, 0, 0, 0);
                
                // Dashboard Tab
                dashboardTab = new Button(this);
                dashboardTab.setText("🏠 Dashboard");
                dashboardTab.setTextSize(16);
                dashboardTab.setBackgroundColor(0xFF667eea);
                dashboardTab.setTextColor(0xFFFFFFFF);
                LinearLayout.LayoutParams dashboardTabParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                dashboardTab.setLayoutParams(dashboardTabParams);
                dashboardTab.setOnClickListener(v -> showDashboard());
                tabNavigation.addView(dashboardTab);
                
                // Trips Tab
                tripsTab = new Button(this);
                tripsTab.setText("🚗 Trips");
                tripsTab.setTextSize(16);
                tripsTab.setBackgroundColor(0xFFE0E0E0);
                tripsTab.setTextColor(0xFF333333);
                LinearLayout.LayoutParams tripsTabParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                tripsTab.setLayoutParams(tripsTabParams);
                tripsTab.setOnClickListener(v -> showTrips());
                tabNavigation.addView(tripsTab);
                
                // Add components to main layout
                mainLayout.addView(mainHeader);
                mainLayout.addView(tabNavigation);
                mainLayout.addView(mainContentLayout);
                
                setContentView(mainLayout);
                currentTabButton = dashboardTab;
            }

            private void showDashboard() {
                // Update tab appearance
                dashboardTab.setBackgroundColor(0xFF667eea);
                dashboardTab.setTextColor(0xFFFFFFFF);
                tripsTab.setBackgroundColor(0xFFE0E0E0);
                tripsTab.setTextColor(0xFF333333);
                currentTabButton = dashboardTab;
                
                // Clear content
                mainContentLayout.removeAllViews();
                
                // Create dashboard content
                ScrollView dashboardScrollView = new ScrollView(this);
                LinearLayout dashboardContent = new LinearLayout(this);
                dashboardContent.setOrientation(LinearLayout.VERTICAL);
                dashboardContent.setPadding(20, 20, 20, 20);
                dashboardScrollView.addView(dashboardContent);
                
                // Manual Trip Controls Section
                TextView manualControlsLabel = new TextView(this);
                manualControlsLabel.setText("Manual Trip Controls");
                manualControlsLabel.setTextSize(16);
                manualControlsLabel.setTextColor(0xFF495057);
                manualControlsLabel.setTypeface(null, Typeface.BOLD);
                manualControlsLabel.setPadding(0, 0, 0, 10);
                dashboardContent.addView(manualControlsLabel);
                
                // Control buttons container
                LinearLayout controlsContainer = new LinearLayout(this);
                controlsContainer.setOrientation(LinearLayout.HORIZONTAL);
                controlsContainer.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ));
                controlsContainer.setPadding(0, 0, 0, 20);
                
                // Start button
                startButton = new Button(this);
                startButton.setText("▶️ START");
                startButton.setTextSize(16);
                startButton.setBackgroundColor(0xFF28a745);
                startButton.setTextColor(0xFFFFFFFF);
                startButton.setPadding(20, 15, 20, 15);
                LinearLayout.LayoutParams startParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                startParams.setMargins(0, 0, 10, 0);
                startButton.setLayoutParams(startParams);
                startButton.setOnClickListener(v -> startTrip());
                controlsContainer.addView(startButton);
                
                // Stop button
                stopButton = new Button(this);
                stopButton.setText("⏹️ STOP");
                stopButton.setTextSize(16);
                stopButton.setBackgroundColor(0xFFdc3545);
                stopButton.setTextColor(0xFFFFFFFF);
                stopButton.setPadding(20, 15, 20, 15);
                stopButton.setEnabled(false);
                LinearLayout.LayoutParams stopParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                stopParams.setMargins(10, 0, 0, 0);
                stopButton.setLayoutParams(stopParams);
                stopButton.setOnClickListener(v -> stopTrip());
                controlsContainer.addView(stopButton);
                
                dashboardContent.addView(controlsContainer);
                
                // Auto Detection Toggle
                autoToggle = new Button(this);
                updateAutoToggleText();
                autoToggle.setTextSize(16);
                autoToggle.setBackgroundColor(0xFF667eea);
                autoToggle.setTextColor(0xFFFFFFFF);
                autoToggle.setPadding(20, 15, 20, 15);
                autoToggle.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ));
                autoToggle.setOnClickListener(v -> toggleAutoDetection());
                dashboardContent.addView(autoToggle);
                
                // Statistics Section
                TextView statsHeader = new TextView(this);
                statsHeader.setText("📊 Statistics");
                statsHeader.setTextSize(18);
                statsHeader.setTextColor(0xFF495057);
                statsHeader.setTypeface(null, Typeface.BOLD);
                statsHeader.setPadding(0, 30, 0, 15);
                dashboardContent.addView(statsHeader);
                
                // Statistics cards container
                LinearLayout statsContainer = new LinearLayout(this);
                statsContainer.setOrientation(LinearLayout.VERTICAL);
                statsContainer.setBackgroundColor(0xFFFFFFFF);
                statsContainer.setPadding(20, 15, 20, 15);
                LinearLayout.LayoutParams statsContainerParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                statsContainerParams.setMargins(0, 0, 0, 20);
                statsContainer.setLayoutParams(statsContainerParams);
                
                // Total Trips
                totalTripsText = new TextView(this);
                totalTripsText.setText("• Total Trips: 0");
                totalTripsText.setTextSize(16);
                totalTripsText.setTextColor(0xFF495057);
                totalTripsText.setPadding(0, 5, 0, 5);
                statsContainer.addView(totalTripsText);
                
                // Total Miles
                totalMilesText = new TextView(this);
                totalMilesText.setText("• Total Miles: 0.0");
                totalMilesText.setTextSize(16);
                totalMilesText.setTextColor(0xFF495057);
                totalMilesText.setPadding(0, 5, 0, 5);
                statsContainer.addView(totalMilesText);
                
                // Total Deductions
                totalDeductionsText = new TextView(this);
                totalDeductionsText.setText("• Total Deductions: $0.00");
                totalDeductionsText.setTextSize(16);
                totalDeductionsText.setTextColor(0xFF495057);
                totalDeductionsText.setPadding(0, 5, 0, 5);
                statsContainer.addView(totalDeductionsText);
                
                dashboardContent.addView(statsContainer);
                
                // Recent Trips Section
                TextView recentTripsHeader = new TextView(this);
                recentTripsHeader.setText("📋 Recent Trips");
                recentTripsHeader.setTextSize(18);
                recentTripsHeader.setTextColor(0xFF495057);
                recentTripsHeader.setTypeface(null, Typeface.BOLD);
                recentTripsHeader.setPadding(0, 0, 0, 15);
                dashboardContent.addView(recentTripsHeader);
                
                // Recent trips container
                recentTripsContainer = new LinearLayout(this);
                recentTripsContainer.setOrientation(LinearLayout.VERTICAL);
                recentTripsContainer.setBackgroundColor(0xFFFFFFFF);
                recentTripsContainer.setPadding(15, 10, 15, 10);
                LinearLayout.LayoutParams recentTripsParams = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    300  // Increased height from 200px to 300px
                );
                recentTripsParams.setMargins(0, 0, 0, 20);
                recentTripsContainer.setLayoutParams(recentTripsParams);
                
                dashboardContent.addView(recentTripsContainer);
                
                // Add manual trip button
                Button addTripButton = new Button(this);
                addTripButton.setText("➕ Add Manual Trip");
                addTripButton.setTextSize(16);
                addTripButton.setBackgroundColor(0xFF667eea);
                addTripButton.setTextColor(0xFFFFFFFF);
                addTripButton.setPadding(20, 15, 20, 15);
                addTripButton.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ));
                addTripButton.setOnClickListener(v -> showAddTripDialog());
                dashboardContent.addView(addTripButton);
                
                mainContentLayout.addView(dashboardScrollView);
                
                // Update stats and recent trips
                updateStats();
                updateRecentTrips();
            }

            private void updateRecentTrips() {
                if (recentTripsContainer == null) return;
                
                recentTripsContainer.removeAllViews();
                
                List<Trip> allTrips = tripStorage.getAllTrips();
                if (allTrips.isEmpty()) {
                    TextView noTripsText = new TextView(this);
                    noTripsText.setText("No trips yet. Start your first trip!");
                    noTripsText.setTextSize(14);
                    noTripsText.setTextColor(0xFF6C757D);
                    noTripsText.setGravity(Gravity.CENTER);
                    noTripsText.setPadding(0, 20, 0, 20);
                    recentTripsContainer.addView(noTripsText);
                    return;
                }
                
                // Sort trips by start time (newest first)
                allTrips.sort((t1, t2) -> Long.compare(t2.getStartTime(), t1.getStartTime()));
                
                // Show up to 3 most recent trips
                int maxTrips = Math.min(3, allTrips.size());
                for (int i = 0; i < maxTrips; i++) {
                    Trip trip = allTrips.get(i);
                    
                    LinearLayout tripItem = new LinearLayout(this);
                    tripItem.setOrientation(LinearLayout.VERTICAL);
                    tripItem.setBackgroundColor(0xFFF8F9FA);
                    tripItem.setPadding(10, 8, 10, 8);
                    LinearLayout.LayoutParams tripParams = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                    );
                    tripParams.setMargins(0, 0, 0, 8);
                    tripItem.setLayoutParams(tripParams);
                    
                    TextView tripInfo = new TextView(this);
                    String detectionType = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                    tripInfo.setText(String.format("%s • %s • %s", 
                        detectionType, 
                        formatMiles(trip.getDistance()), 
                        trip.getCategory()));
                    tripInfo.setTextSize(14);
                    tripInfo.setTextColor(0xFF495057);
                    tripItem.addView(tripInfo);
                    
                    TextView tripLocation = new TextView(this);
                    tripLocation.setText(trip.getStartLocation() + " → " + trip.getEndLocation());
                    tripLocation.setTextSize(12);
                    tripLocation.setTextColor(0xFF6C757D);
                    tripItem.addView(tripLocation);
                    
                    recentTripsContainer.addView(tripItem);
                }
            }

            private void updateAutoToggleText() {
                if (autoToggle != null) {
                    if (autoDetectionEnabled) {
                        if (isBlinking) {
                            autoToggle.setText("🔆🚘🔆 Auto Detection: ON");
                        } else {
                            autoToggle.setText("🚘 Auto Detection: ON");
                        }
                        startBlinkingAnimation();
                    } else {
                        autoToggle.setText("🚗 Auto Detection: OFF");
                        stopBlinkingAnimation();
                    }
                }
            }

            private void startBlinkingAnimation() {
                if (autoDetectionEnabled && blinkHandler != null) {
                    blinkHandler.postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            if (autoDetectionEnabled) {
                                isBlinking = !isBlinking;
                                updateAutoToggleText();
                                blinkHandler.postDelayed(this, 800);
                            }
                        }
                    }, 800);
                }
            }

            private void stopBlinkingAnimation() {
                if (blinkHandler != null) {
                    blinkHandler.removeCallbacksAndMessages(null);
                }
                isBlinking = false;
            }

            private void showTrips() {
                // Update tab appearance
                dashboardTab.setBackgroundColor(0xFFE0E0E0);
                dashboardTab.setTextColor(0xFF333333);
                tripsTab.setBackgroundColor(0xFF667eea);
                tripsTab.setTextColor(0xFFFFFFFF);
                currentTabButton = tripsTab;
                
                // Clear content
                mainContentLayout.removeAllViews();
                
                // Create trips content
                ScrollView tripsScrollView = new ScrollView(this);
                LinearLayout tripsContent = new LinearLayout(this);
                tripsContent.setOrientation(LinearLayout.VERTICAL);
                tripsContent.setPadding(20, 20, 20, 20);
                tripsScrollView.addView(tripsContent);
                
                // Trips header
                TextView tripsHeader = new TextView(this);
                tripsHeader.setText("🚗 Your Trips");
                tripsHeader.setTextSize(24);
                tripsHeader.setTextColor(0xFF495057);
                tripsHeader.setTypeface(null, Typeface.BOLD);
                tripsHeader.setPadding(0, 0, 0, 20);
                tripsContent.addView(tripsHeader);
                
                // Export button
                Button exportButton = new Button(this);
                exportButton.setText("📤 Export Trips");
                exportButton.setTextSize(16);
                exportButton.setBackgroundColor(0xFF667eea);
                exportButton.setTextColor(0xFFFFFFFF);
                exportButton.setPadding(20, 15, 20, 15);
                exportButton.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                ));
                exportButton.setOnClickListener(v -> showExportDialog());
                tripsContent.addView(exportButton);
                
                // Trips container
                tripsContainer = new LinearLayout(this);
                tripsContainer.setOrientation(LinearLayout.VERTICAL);
                tripsContainer.setPadding(0, 20, 0, 0);
                tripsContent.addView(tripsContainer);
                
                mainContentLayout.addView(tripsScrollView);
                
                // Load and display trips
                loadTrips();
            }

            private void loadTrips() {
                if (tripsContainer == null) return;
                
                tripsContainer.removeAllViews();
                
                List<Trip> trips = tripStorage.getAllTrips();
                if (trips.isEmpty()) {
                    TextView noTripsText = new TextView(this);
                    noTripsText.setText("No trips recorded yet. Start tracking your first trip!");
                    noTripsText.setTextSize(16);
                    noTripsText.setTextColor(0xFF6C757D);
                    noTripsText.setGravity(Gravity.CENTER);
                    noTripsText.setPadding(0, 40, 0, 40);
                    tripsContainer.addView(noTripsText);
                    return;
                }
                
                // Sort trips by start time (newest first)
                trips.sort((t1, t2) -> Long.compare(t2.getStartTime(), t1.getStartTime()));
                
                for (Trip trip : trips) {
                    LinearLayout tripCard = new LinearLayout(this);
                    tripCard.setOrientation(LinearLayout.VERTICAL);
                    tripCard.setBackgroundColor(0xFFFFFFFF);
                    tripCard.setPadding(20, 15, 20, 15);
                    LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                    );
                    cardParams.setMargins(0, 0, 0, 15);
                    tripCard.setLayoutParams(cardParams);
                    
                    // Trip header with icons
                    LinearLayout tripHeader = new LinearLayout(this);
                    tripHeader.setOrientation(LinearLayout.HORIZONTAL);
                    tripHeader.setLayoutParams(new LinearLayout.LayoutParams(
                        LinearLayout.LayoutParams.MATCH_PARENT,
                        LinearLayout.LayoutParams.WRAP_CONTENT
                    ));
                    tripHeader.setGravity(Gravity.CENTER_VERTICAL);
                    tripHeader.setBackgroundColor(0xFFF8F9FA);
                    tripHeader.setPadding(10, 8, 10, 8);
                    
                    // Trip info
                    LinearLayout tripInfo = new LinearLayout(this);
                    tripInfo.setOrientation(LinearLayout.VERTICAL);
                    LinearLayout.LayoutParams infoParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                    tripInfo.setLayoutParams(infoParams);
                    
                    TextView tripTitle = new TextView(this);
                    String detectionType = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                    tripTitle.setText(String.format("%s • %s • %s", 
                        detectionType, 
                        formatMiles(trip.getDistance()), 
                        trip.getCategory()));
                    tripTitle.setTextSize(16);
                    tripTitle.setTextColor(0xFF495057);
                    tripTitle.setTypeface(null, Typeface.BOLD);
                    tripInfo.addView(tripTitle);
                    
                    TextView tripSubtitle = new TextView(this);
                    SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy 'at' h:mm a", Locale.getDefault());
                    tripSubtitle.setText(sdf.format(new Date(trip.getStartTime())));
                    tripSubtitle.setTextSize(14);
                    tripSubtitle.setTextColor(0xFF6C757D);
                    tripInfo.addView(tripSubtitle);
                    
                    tripHeader.addView(tripInfo);
                    
                    // Action buttons
                    LinearLayout actionButtons = new LinearLayout(this);
                    actionButtons.setOrientation(LinearLayout.HORIZONTAL);
                    
                    Button editButton = new Button(this);
                    editButton.setText("✏️");
                    editButton.setTextSize(16);
                    editButton.setBackgroundColor(0xFF667eea);
                    editButton.setTextColor(0xFFFFFFFF);
                    editButton.setPadding(10, 5, 10, 5);
                    editButton.setOnClickListener(v -> showEditTripDialog(trip));
                    actionButtons.addView(editButton);
                    
                    Button deleteButton = new Button(this);
                    deleteButton.setText("🗑️");
                    deleteButton.setTextSize(16);
                    deleteButton.setBackgroundColor(0xFFdc3545);
                    deleteButton.setTextColor(0xFFFFFFFF);
                    deleteButton.setPadding(10, 5, 10, 5);
                    deleteButton.setOnClickListener(v -> showDeleteConfirmation(trip));
                    actionButtons.addView(deleteButton);
                    
                    tripHeader.addView(actionButtons);
                    tripCard.addView(tripHeader);
                    
                    // Trip details
                    TextView tripDetails = new TextView(this);
                    tripDetails.setText(String.format("From: %s\nTo: %s", 
                        trip.getStartLocation(), 
                        trip.getEndLocation()));
                    tripDetails.setTextSize(14);
                    tripDetails.setTextColor(0xFF495057);
                    tripDetails.setPadding(0, 10, 0, 10);
                    tripCard.addView(tripDetails);
                    
                    if (!trip.getClientName().isEmpty() || !trip.getNotes().isEmpty()) {
                        TextView extraInfo = new TextView(this);
                        StringBuilder extraText = new StringBuilder();
                        if (!trip.getClientName().isEmpty()) {
                            extraText.append("Client: ").append(trip.getClientName()).append("\n");
                        }
                        if (!trip.getNotes().isEmpty()) {
                            extraText.append("Notes: ").append(trip.getNotes());
                        }
                        extraInfo.setText(extraText.toString());
                        extraInfo.setTextSize(12);
                        extraInfo.setTextColor(0xFF6C757D);
                        tripCard.addView(extraInfo);
                    }
                    
                    tripsContainer.addView(tripCard);
                }
            }

            private void showDeleteConfirmation(Trip trip) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Delete Trip");
                builder.setMessage("Are you sure you want to delete this trip?");
                builder.setPositiveButton("Delete", (dialog, which) -> {
                    tripStorage.deleteTrip(trip.getId());
                    updateStats();
                    updateRecentTrips();
                    if (currentTabButton == tripsTab) {
                        loadTrips();
                    }
                    Toast.makeText(this, "Trip deleted", Toast.LENGTH_SHORT).show();
                });
                builder.setNegativeButton("Cancel", null);
                builder.show();
            }

            private void showEditTripDialog(Trip trip) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Edit Trip");
                
                LinearLayout dialogLayout = new LinearLayout(this);
                dialogLayout.setOrientation(LinearLayout.VERTICAL);
                dialogLayout.setPadding(20, 20, 20, 20);
                
                // Start location
                TextView startLabel = new TextView(this);
                startLabel.setText("Start Location:");
                startLabel.setTextSize(14);
                startLabel.setTextColor(0xFF495057);
                dialogLayout.addView(startLabel);
                
                EditText startLocationEdit = new EditText(this);
                startLocationEdit.setText(trip.getStartLocation());
                startLocationEdit.setHint("Enter start location");
                dialogLayout.addView(startLocationEdit);
                
                // End location
                TextView endLabel = new TextView(this);
                endLabel.setText("End Location:");
                endLabel.setTextSize(14);
                endLabel.setTextColor(0xFF495057);
                endLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(endLabel);
                
                EditText endLocationEdit = new EditText(this);
                endLocationEdit.setText(trip.getEndLocation());
                endLocationEdit.setHint("Enter end location");
                dialogLayout.addView(endLocationEdit);
                
                // Distance
                TextView distanceLabel = new TextView(this);
                distanceLabel.setText("Distance (miles):");
                distanceLabel.setTextSize(14);
                distanceLabel.setTextColor(0xFF495057);
                distanceLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(distanceLabel);
                
                EditText distanceEdit = new EditText(this);
                distanceEdit.setText(String.valueOf(trip.getDistance()));
                distanceEdit.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                distanceEdit.setHint("Enter distance");
                dialogLayout.addView(distanceEdit);
                
                // Category
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category:");
                categoryLabel.setTextSize(14);
                categoryLabel.setTextColor(0xFF495057);
                categoryLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(categoryLabel);
                
                EditText categoryEdit = new EditText(this);
                categoryEdit.setText(trip.getCategory());
                categoryEdit.setHint("Business, Personal, Medical, Charity");
                dialogLayout.addView(categoryEdit);
                
                // Client name
                TextView clientLabel = new TextView(this);
                clientLabel.setText("Client Name:");
                clientLabel.setTextSize(14);
                clientLabel.setTextColor(0xFF495057);
                clientLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(clientLabel);
                
                EditText clientEdit = new EditText(this);
                clientEdit.setText(trip.getClientName());
                clientEdit.setHint("Enter client name (optional)");
                dialogLayout.addView(clientEdit);
                
                // Notes
                TextView notesLabel = new TextView(this);
                notesLabel.setText("Notes:");
                notesLabel.setTextSize(14);
                notesLabel.setTextColor(0xFF495057);
                notesLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(notesLabel);
                
                EditText notesEdit = new EditText(this);
                notesEdit.setText(trip.getNotes());
                notesEdit.setHint("Enter notes (optional)");
                dialogLayout.addView(notesEdit);
                
                builder.setView(dialogLayout);
                builder.setPositiveButton("Save", (dialog, which) -> {
                    try {
                        String startLocation = startLocationEdit.getText().toString().trim();
                        String endLocation = endLocationEdit.getText().toString().trim();
                        double distance = Double.parseDouble(distanceEdit.getText().toString());
                        String category = categoryEdit.getText().toString().trim();
                        String clientName = clientEdit.getText().toString().trim();
                        String notes = notesEdit.getText().toString().trim();
                        
                        if (startLocation.isEmpty() || endLocation.isEmpty()) {
                            Toast.makeText(this, "Please fill in start and end locations", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        if (distance <= 0) {
                            Toast.makeText(this, "Distance must be greater than 0", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        if (category.isEmpty()) {
                            category = "Personal";
                        }
                        
                        // Update trip
                        trip.setStartLocation(startLocation);
                        trip.setEndLocation(endLocation);
                        trip.setDistance(distance);
                        trip.setCategory(category);
                        trip.setClientName(clientName);
                        trip.setNotes(notes);
                        
                        // Save updated trip
                        tripStorage.deleteTrip(trip.getId());
                        tripStorage.saveTrip(trip);
                        
                        updateStats();
                        updateRecentTrips();
                        if (currentTabButton == tripsTab) {
                            loadTrips();
                        }
                        
                        Toast.makeText(this, "Trip updated successfully", Toast.LENGTH_SHORT).show();
                        
                    } catch (NumberFormatException e) {
                        Toast.makeText(this, "Please enter a valid distance", Toast.LENGTH_SHORT).show();
                    }
                });
                builder.setNegativeButton("Cancel", null);
                builder.show();
            }

            private void showAddTripDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Add Manual Trip");
                
                LinearLayout dialogLayout = new LinearLayout(this);
                dialogLayout.setOrientation(LinearLayout.VERTICAL);
                dialogLayout.setPadding(20, 20, 20, 20);
                
                // Start location
                TextView startLabel = new TextView(this);
                startLabel.setText("Start Location:");
                startLabel.setTextSize(14);
                startLabel.setTextColor(0xFF495057);
                dialogLayout.addView(startLabel);
                
                EditText startLocationEdit = new EditText(this);
                startLocationEdit.setHint("Enter start location");
                dialogLayout.addView(startLocationEdit);
                
                // End location
                TextView endLabel = new TextView(this);
                endLabel.setText("End Location:");
                endLabel.setTextSize(14);
                endLabel.setTextColor(0xFF495057);
                endLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(endLabel);
                
                EditText endLocationEdit = new EditText(this);
                endLocationEdit.setHint("Enter end location");
                dialogLayout.addView(endLocationEdit);
                
                // Distance
                TextView distanceLabel = new TextView(this);
                distanceLabel.setText("Distance (miles):");
                distanceLabel.setTextSize(14);
                distanceLabel.setTextColor(0xFF495057);
                distanceLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(distanceLabel);
                
                EditText distanceEdit = new EditText(this);
                distanceEdit.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                distanceEdit.setHint("Enter distance");
                dialogLayout.addView(distanceEdit);
                
                // Category
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category:");
                categoryLabel.setTextSize(14);
                categoryLabel.setTextColor(0xFF495057);
                categoryLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(categoryLabel);
                
                EditText categoryEdit = new EditText(this);
                categoryEdit.setText("Business");
                categoryEdit.setHint("Business, Personal, Medical, Charity");
                dialogLayout.addView(categoryEdit);
                
                // Client name
                TextView clientLabel = new TextView(this);
                clientLabel.setText("Client Name:");
                clientLabel.setTextSize(14);
                clientLabel.setTextColor(0xFF495057);
                clientLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(clientLabel);
                
                EditText clientEdit = new EditText(this);
                clientEdit.setHint("Enter client name (optional)");
                dialogLayout.addView(clientEdit);
                
                // Notes
                TextView notesLabel = new TextView(this);
                notesLabel.setText("Notes:");
                notesLabel.setTextSize(14);
                notesLabel.setTextColor(0xFF495057);
                notesLabel.setPadding(0, 10, 0, 0);
                dialogLayout.addView(notesLabel);
                
                EditText notesEdit = new EditText(this);
                notesEdit.setHint("Enter notes (optional)");
                dialogLayout.addView(notesEdit);
                
                builder.setView(dialogLayout);
                builder.setPositiveButton("Add Trip", (dialog, which) -> {
                    try {
                        String startLocation = startLocationEdit.getText().toString().trim();
                        String endLocation = endLocationEdit.getText().toString().trim();
                        double distance = Double.parseDouble(distanceEdit.getText().toString());
                        String category = categoryEdit.getText().toString().trim();
                        String clientName = clientEdit.getText().toString().trim();
                        String notes = notesEdit.getText().toString().trim();
                        
                        if (startLocation.isEmpty() || endLocation.isEmpty()) {
                            Toast.makeText(this, "Please fill in start and end locations", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        if (distance <= 0) {
                            Toast.makeText(this, "Distance must be greater than 0", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        if (category.isEmpty()) {
                            category = "Personal";
                        }
                        
                        // Create new trip
                        long currentTime = System.currentTimeMillis();
                        Trip newTrip = new Trip(
                            startLocation,
                            endLocation,
                            distance,
                            currentTime - (60 * 60 * 1000), // 1 hour ago
                            currentTime,
                            category,
                            clientName,
                            notes,
                            false, // manual trip
                            deviceId,
                            userId
                        );
                        
                        tripStorage.saveTrip(newTrip);
                        updateStats();
                        updateRecentTrips();
                        
                        Toast.makeText(this, "Trip added successfully", Toast.LENGTH_SHORT).show();
                        
                    } catch (NumberFormatException e) {
                        Toast.makeText(this, "Please enter a valid distance", Toast.LENGTH_SHORT).show();
                    }
                });
                builder.setNegativeButton("Cancel", null);
                builder.show();
            }

            private void showExportDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Export Trips");
                
                String[] options = {"Export All Trips (CSV)", "Export All Trips (TXT)"};
                builder.setItems(options, (dialog, which) -> {
                    boolean isCSV = which == 0;
                    exportTrips(isCSV);
                });
                
                builder.setNegativeButton("Cancel", null);
                builder.show();
            }

            private void exportTrips(boolean isCSV) {
                try {
                    List<Trip> trips = tripStorage.getAllTrips();
                    if (trips.isEmpty()) {
                        Toast.makeText(this, "No trips to export", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    String content = isCSV ? generateCSVContent(trips) : generateTXTContent(trips);
                    String filename = isCSV ? "miletracker_trips.csv" : "miletracker_trips.txt";
                    
                    // Save to file
                    File exportFile = new File(getFilesDir(), filename);
                    FileWriter writer = new FileWriter(exportFile);
                    writer.write(content);
                    writer.close();
                    
                    // Share file
                    Uri fileUri = FileProvider.getUriForFile(this, "com.miletrackerpro.app.fileprovider", exportFile);
                    Intent shareIntent = new Intent(Intent.ACTION_SEND);
                    shareIntent.setType(isCSV ? "text/csv" : "text/plain");
                    shareIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                    shareIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro Export");
                    shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                    
                    startActivity(Intent.createChooser(shareIntent, "Export Trips"));
                    
                } catch (IOException e) {
                    Toast.makeText(this, "Error exporting trips: " + e.getMessage(), Toast.LENGTH_SHORT).show();
                }
            }

            private String generateCSVContent(List<Trip> trips) {
                StringBuilder csv = new StringBuilder();
                csv.append("Date,Start Location,End Location,Distance (Miles),Category,Client,Notes,Type\n");
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                double totalMiles = 0;
                
                for (Trip trip : trips) {
                    totalMiles += trip.getDistance();
                    csv.append(dateFormat.format(new Date(trip.getStartTime()))).append(",");
                    csv.append("\"").append(trip.getStartLocation()).append("\",");
                    csv.append("\"").append(trip.getEndLocation()).append("\",");
                    csv.append(String.format("%.2f", trip.getDistance())).append(",");
                    csv.append(trip.getCategory()).append(",");
                    csv.append("\"").append(trip.getClientName()).append("\",");
                    csv.append("\"").append(trip.getNotes()).append("\",");
                    csv.append(trip.isAutoDetected() ? "Auto" : "Manual").append("\n");
                }
                
                // Summary
                csv.append("\nSUMMARY\n");
                csv.append("Total Trips,").append(trips.size()).append("\n");
                csv.append("Total Miles,").append(String.format("%.2f", totalMiles)).append("\n");
                csv.append("Business Deduction (IRS $").append(String.format("%.2f", getIrsBusinessRate())).append("/mi),\"$").append(String.format("%.2f", totalMiles * getIrsBusinessRate())).append("\"\n");
                
                return csv.toString();
            }
            
            private String generateTXTContent(List<Trip> trips) {
                StringBuilder txt = new StringBuilder();
                txt.append("MILETRACKER PRO - TRIP EXPORT\n");
                txt.append("================================\n\n");
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                double totalMiles = 0;
                
                for (Trip trip : trips) {
                    totalMiles += trip.getDistance();
                    txt.append("Date: ").append(dateFormat.format(new Date(trip.getStartTime()))).append("\n");
                    txt.append("From: ").append(trip.getStartLocation()).append("\n");
                    txt.append("To: ").append(trip.getEndLocation()).append("\n");
                    txt.append("Distance: ").append(String.format("%.2f", trip.getDistance())).append(" miles\n");
                    txt.append("Category: ").append(trip.getCategory()).append("\n");
                    if (!trip.getClientName().isEmpty()) {
                        txt.append("Client: ").append(trip.getClientName()).append("\n");
                    }
                    if (!trip.getNotes().isEmpty()) {
                        txt.append("Notes: ").append(trip.getNotes()).append("\n");
                    }
                    txt.append("Type: ").append(trip.isAutoDetected() ? "Auto-detected" : "Manual entry").append("\n");
                    txt.append("---\n\n");
                }
                
                // Summary
                txt.append("SUMMARY\n");
                txt.append("=======\n");
                txt.append("Total Trips: ").append(trips.size()).append("\n");
                txt.append("Total Miles: ").append(String.format("%.2f", totalMiles)).append("\n");
                txt.append("Business Deduction (IRS $").append(String.format("%.2f", getIrsBusinessRate())).append("/mi): $").append(String.format("%.2f", totalMiles * getIrsBusinessRate())).append("\n");
                
                return txt.toString();
            }

            private void checkLocationPermission() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);
                }
            }

            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                        // Permission granted
                        Toast.makeText(this, "Location permission granted", Toast.LENGTH_SHORT).show();
                    } else {
                        // Permission denied
                        Toast.makeText(this, "Location permission is required for trip tracking", Toast.LENGTH_LONG).show();
                    }
                }
            }

            private void startTrip() {
                if (isTracking) {
                    Toast.makeText(this, "Trip already in progress", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "Location permission required", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                isTracking = true;
                tripStartTime = System.currentTimeMillis();
                tripLocations = new ArrayList<>();
                
                // Update UI
                startButton.setEnabled(false);
                stopButton.setEnabled(true);
                startButton.setText("🔄 TRACKING...");
                
                // Start location tracking
                try {
                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 5, locationListener);
                } catch (SecurityException e) {
                    Toast.makeText(this, "Location permission error", Toast.LENGTH_SHORT).show();
                }
                
                Toast.makeText(this, "Trip started", Toast.LENGTH_SHORT).show();
            }

            private void stopTrip() {
                if (!isTracking) {
                    Toast.makeText(this, "No trip in progress", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                isTracking = false;
                locationManager.removeUpdates(locationListener);
                
                // Update UI
                startButton.setEnabled(true);
                stopButton.setEnabled(false);
                startButton.setText("▶️ START");
                
                // Calculate trip distance
                double distance = calculateTripDistance();
                
                // Create trip record
                String startLocation = tripStartLocation != null ? 
                    String.format("%.4f, %.4f", tripStartLocation.getLatitude(), tripStartLocation.getLongitude()) : 
                    "Unknown";
                String endLocation = lastLocation != null ? 
                    String.format("%.4f, %.4f", lastLocation.getLatitude(), lastLocation.getLongitude()) : 
                    "Unknown";
                
                Trip trip = new Trip(
                    startLocation,
                    endLocation,
                    distance,
                    tripStartTime,
                    System.currentTimeMillis(),
                    "Business",
                    "",
                    "",
                    false, // manual trip
                    deviceId,
                    userId
                );
                
                tripStorage.saveTrip(trip);
                updateStats();
                updateRecentTrips();
                
                Toast.makeText(this, String.format("Trip saved: %.2f miles", distance), Toast.LENGTH_SHORT).show();
            }

            private double calculateTripDistance() {
                if (tripLocations == null || tripLocations.size() < 2) {
                    return 0.0;
                }
                
                double distance = 0.0;
                for (int i = 1; i < tripLocations.size(); i++) {
                    Location prev = tripLocations.get(i - 1);
                    Location curr = tripLocations.get(i);
                    distance += prev.distanceTo(curr);
                }
                
                // Convert from meters to miles
                return distance * 0.000621371;
            }

            private void toggleAutoDetection() {
                try {
                    autoDetectionEnabled = !autoDetectionEnabled;
                    updateAutoToggleText();
                    
                    if (autoDetectionEnabled) {
                        startAutoDetection();
                        Toast.makeText(this, "Auto detection enabled", Toast.LENGTH_SHORT).show();
                    } else {
                        stopAutoDetection();
                        Toast.makeText(this, "Auto detection disabled", Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error toggling auto detection: " + e.getMessage(), e);
                }
            }

            private void startAutoDetection() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    Toast.makeText(this, "Location permission required", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                try {
                    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 10000, 10, autoLocationListener);
                } catch (SecurityException e) {
                    Toast.makeText(this, "Location permission error", Toast.LENGTH_SHORT).show();
                }
            }

            private void stopAutoDetection() {
                locationManager.removeUpdates(autoLocationListener);
            }

            private LocationListener locationListener = new LocationListener() {
                @Override
                public void onLocationChanged(Location location) {
                    lastLocation = location;
                    if (tripStartLocation == null) {
                        tripStartLocation = location;
                    }
                    if (tripLocations != null) {
                        tripLocations.add(location);
                    }
                }

                @Override
                public void onStatusChanged(String provider, int status, Bundle extras) {}

                @Override
                public void onProviderEnabled(String provider) {}

                @Override
                public void onProviderDisabled(String provider) {}
            };

            private LocationListener autoLocationListener = new LocationListener() {
                @Override
                public void onLocationChanged(Location location) {
                    // Simple auto-detection logic
                    if (lastLocation != null) {
                        float distance = lastLocation.distanceTo(location);
                        float speed = location.getSpeed();
                        
                        // If moving fast enough, could be a trip
                        if (speed > 3.0f && distance > 50) { // 3 m/s ~ 7 mph
                            // Could trigger auto trip start
                            Log.d(TAG, "Auto detection: possible trip detected");
                        }
                    }
                    lastLocation = location;
                }

                @Override
                public void onStatusChanged(String provider, int status, Bundle extras) {}

                @Override
                public void onProviderEnabled(String provider) {}

                @Override
                public void onProviderDisabled(String provider) {}
            };

            private void showSettingsDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("⚙️ Settings");
                
                // Create dialog layout
                LinearLayout dialogLayout = new LinearLayout(this);
                dialogLayout.setOrientation(LinearLayout.VERTICAL);
                dialogLayout.setPadding(30, 20, 30, 20);
                
                // Account Information Section
                TextView accountHeader = new TextView(this);
                accountHeader.setText("👤 Account Information");
                accountHeader.setTextSize(16);
                accountHeader.setTextColor(0xFF495057);
                accountHeader.setTypeface(null, Typeface.BOLD);
                accountHeader.setPadding(0, 0, 0, 10);
                dialogLayout.addView(accountHeader);
                
                TextView userInfo = new TextView(this);
                UserAuthManager authManager = new UserAuthManager(this);
                String userEmail = authManager.getCurrentUserEmail();
                if (userEmail == null || userEmail.isEmpty()) {
                    userEmail = "Not authenticated";
                }
                userInfo.setText("✅ " + userEmail + "\nEnterprise Admin Access");
                userInfo.setTextSize(14);
                userInfo.setTextColor(0xFF1976D2);
                userInfo.setPadding(10, 5, 10, 15);
                userInfo.setBackgroundColor(0xFFE8F5E8);
                dialogLayout.addView(userInfo);
                
                // Backup Status Section
                TextView backupHeader = new TextView(this);
                backupHeader.setText("☁️ Backup Status");
                backupHeader.setTextSize(16);
                backupHeader.setTextColor(0xFF495057);
                backupHeader.setTypeface(null, Typeface.BOLD);
                backupHeader.setPadding(0, 15, 0, 10);
                dialogLayout.addView(backupHeader);
                
                String apiStatus = this.tripStorage.isApiSyncEnabled() ? "Active" : "Disabled";
                String autoStatus = this.autoDetectionEnabled ? "Active" : "Disabled";
                
                TextView backupInfo = new TextView(this);
                backupInfo.setText("Auto Detection: " + autoStatus);
                backupInfo.setTextSize(14);
                backupInfo.setTextColor(0xFF2E7D32);
                backupInfo.setPadding(10, 5, 10, 5);
                backupInfo.setBackgroundColor(0xFFF8F9FA);
                dialogLayout.addView(backupInfo);
                
                // Cloud Backup Toggle Button
                Button cloudBackupToggle = new Button(this);
                if (this.tripStorage.isApiSyncEnabled()) {
                    cloudBackupToggle.setText("☁️ Cloud Backup: ON");
                    cloudBackupToggle.setBackgroundColor(0xFF28a745);
                } else {
                    cloudBackupToggle.setText("☁️ Cloud Backup: OFF");
                    cloudBackupToggle.setBackgroundColor(0xFF6c757d);
                }
                cloudBackupToggle.setTextColor(0xFFFFFFFF);
                cloudBackupToggle.setTextSize(14);
                cloudBackupToggle.setPadding(20, 10, 20, 10);
                cloudBackupToggle.setOnClickListener(v -> {
                    this.tripStorage.setApiSyncEnabled(!this.tripStorage.isApiSyncEnabled());
                    Toast.makeText(this, "Cloud backup " + (this.tripStorage.isApiSyncEnabled() ? "enabled" : "disabled"), Toast.LENGTH_SHORT).show();
                });
                dialogLayout.addView(cloudBackupToggle);
                
                // App Information Section
                TextView appHeader = new TextView(this);
                appHeader.setText("📱 App Information");
                appHeader.setTextSize(16);
                appHeader.setTextColor(0xFF495057);
                appHeader.setTypeface(null, Typeface.BOLD);
                appHeader.setPadding(0, 15, 0, 10);
                dialogLayout.addView(appHeader);
                
                TextView appInfo = new TextView(this);
                appInfo.setText("MileTracker Pro v4.9.94\nBuild: " + new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date()) + "\nEnterprise Edition");
                appInfo.setTextSize(14);
                appInfo.setTextColor(0xFF6C757D);
                appInfo.setPadding(10, 5, 10, 15);
                appInfo.setBackgroundColor(0xFFF8F9FA);
                dialogLayout.addView(appInfo);
                
                // IRS Tax Rates Section
                TextView irsHeader = new TextView(this);
                irsHeader.setText("💰 IRS Tax Rates (2025)");
                irsHeader.setTextSize(16);
                irsHeader.setTextColor(0xFF495057);
                irsHeader.setTypeface(null, Typeface.BOLD);
                irsHeader.setPadding(0, 15, 0, 10);
                dialogLayout.addView(irsHeader);
                
                TextView ratesInfo = new TextView(this);
                ratesInfo.setText(String.format("Business: $%.2f/mi\nMedical: $%.2f/mi\nCharity: $%.2f/mi\n\nTap 'Update IRS Rates' to modify for your country or yearly updates.", 
                    getIrsBusinessRate(), getIrsMedicalRate(), getIrsCharityRate()));
                ratesInfo.setTextSize(14);
                ratesInfo.setTextColor(0xFF2E7D32);
                ratesInfo.setPadding(10, 5, 10, 15);
                ratesInfo.setBackgroundColor(0xFFF8F9FA);
                dialogLayout.addView(ratesInfo);
                
                // Update IRS Rates Button
                Button updateRatesButton = new Button(this);
                updateRatesButton.setText("📊 Update IRS Rates");
                updateRatesButton.setBackgroundColor(0xFF667eea);
                updateRatesButton.setTextColor(0xFFFFFFFF);
                updateRatesButton.setTextSize(14);
                updateRatesButton.setPadding(20, 10, 20, 10);
                updateRatesButton.setOnClickListener(v -> showIrsRatesDialog());
                dialogLayout.addView(updateRatesButton);
                
                builder.setView(dialogLayout);
                builder.setPositiveButton("Close", null);
                builder.show();
            }

            private void showIrsRatesDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("💰 Update IRS Tax Rates");
                
                LinearLayout dialogLayout = new LinearLayout(this);
                dialogLayout.setOrientation(LinearLayout.VERTICAL);
                dialogLayout.setPadding(30, 20, 30, 20);
                
                TextView helpText = new TextView(this);
                helpText.setText("Update these rates annually or for your country's tax system. Default values are US IRS 2025 rates.");
                helpText.setTextSize(14);
                helpText.setTextColor(0xFF6C757D);
                helpText.setPadding(0, 0, 0, 20);
                dialogLayout.addView(helpText);
                
                // Business Rate
                TextView businessLabel = new TextView(this);
                businessLabel.setText("Business Rate ($/mile):");
                businessLabel.setTextSize(16);
                businessLabel.setTextColor(0xFF495057);
                businessLabel.setPadding(0, 0, 0, 5);
                dialogLayout.addView(businessLabel);
                
                EditText businessInput = new EditText(this);
                businessInput.setText(String.format("%.2f", getIrsBusinessRate()));
                businessInput.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                businessInput.setHint("0.70");
                dialogLayout.addView(businessInput);
                
                // Medical Rate
                TextView medicalLabel = new TextView(this);
                medicalLabel.setText("Medical Rate ($/mile):");
                medicalLabel.setTextSize(16);
                medicalLabel.setTextColor(0xFF495057);
                medicalLabel.setPadding(0, 15, 0, 5);
                dialogLayout.addView(medicalLabel);
                
                EditText medicalInput = new EditText(this);
                medicalInput.setText(String.format("%.2f", getIrsMedicalRate()));
                medicalInput.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                medicalInput.setHint("0.21");
                dialogLayout.addView(medicalInput);
                
                // Charity Rate
                TextView charityLabel = new TextView(this);
                charityLabel.setText("Charity Rate ($/mile):");
                charityLabel.setTextSize(16);
                charityLabel.setTextColor(0xFF495057);
                charityLabel.setPadding(0, 15, 0, 5);
                dialogLayout.addView(charityLabel);
                
                EditText charityInput = new EditText(this);
                charityInput.setText(String.format("%.2f", getIrsCharityRate()));
                charityInput.setInputType(InputType.TYPE_CLASS_NUMBER | InputType.TYPE_NUMBER_FLAG_DECIMAL);
                charityInput.setHint("0.14");
                dialogLayout.addView(charityInput);
                
                builder.setView(dialogLayout);
                builder.setPositiveButton("Save", (dialog, which) -> {
                    try {
                        double businessRate = Double.parseDouble(businessInput.getText().toString());
                        double medicalRate = Double.parseDouble(medicalInput.getText().toString());
                        double charityRate = Double.parseDouble(charityInput.getText().toString());
                        
                        // Save to shared preferences
                        SharedPreferences prefs = getSharedPreferences("miletracker_settings", Context.MODE_PRIVATE);
                        SharedPreferences.Editor editor = prefs.edit();
                        editor.putFloat("irs_business_rate", (float) businessRate);
                        editor.putFloat("irs_medical_rate", (float) medicalRate);
                        editor.putFloat("irs_charity_rate", (float) charityRate);
                        editor.apply();
                        
                        Toast.makeText(this, "IRS rates updated successfully!", Toast.LENGTH_SHORT).show();
                        updateStats(); // Refresh statistics with new rates
                    } catch (NumberFormatException e) {
                        Toast.makeText(this, "Invalid number format. Please enter valid decimal numbers.", Toast.LENGTH_LONG).show();
                    }
                });
                builder.setNegativeButton("Cancel", null);
                builder.show();
            }

            private String formatMiles(double miles) {
                if (miles >= 100000) {
                    return String.format("%.0fK+ mi", miles / 1000);
                } else if (miles >= 10000) {
                    return String.format("%.1fK+ mi", miles / 1000);
                } else if (miles >= 1000) {
                    return String.format("%.1fK+ mi", miles / 1000);
                } else {
                    return String.format("%.1f mi", miles);
                }
            }

            // IRS mileage rates - loaded from user preferences (default 2025 rates)
            private double getIrsBusinessRate() {
                return getSharedPreferences("miletracker_settings", Context.MODE_PRIVATE)
                    .getFloat("irs_business_rate", 0.70f);
            }
            
            private double getIrsMedicalRate() {
                return getSharedPreferences("miletracker_settings", Context.MODE_PRIVATE)
                    .getFloat("irs_medical_rate", 0.21f);
            }
            
            private double getIrsCharityRate() {
                return getSharedPreferences("miletracker_settings", Context.MODE_PRIVATE)
                    .getFloat("irs_charity_rate", 0.14f);
            }
            
            private void updateStats() {
                try {
                    List<Trip> trips = getTripsForCurrentPeriod();
                    double totalMiles = 0;
                    double businessMiles = 0;
                    double personalMiles = 0;
                    double medicalMiles = 0;
                    double charityMiles = 0;

                    for (Trip trip : trips) {
                        totalMiles += trip.getDistance();
                        String category = trip.getCategory().toLowerCase();
                        
                        if (category.contains("business")) {
                            businessMiles += trip.getDistance();
                        } else if (category.contains("personal")) {
                            personalMiles += trip.getDistance();
                        } else if (category.contains("medical")) {
                            medicalMiles += trip.getDistance();
                        } else if (category.contains("charity")) {
                            charityMiles += trip.getDistance();
                        }
                    }

                    double businessDeduction = businessMiles * getIrsBusinessRate();
                    double personalDeduction = 0.00; // Personal trips are not tax deductible
                    double medicalDeduction = medicalMiles * getIrsMedicalRate();
                    double charityDeduction = charityMiles * getIrsCharityRate();
                    double totalDeduction = businessDeduction + personalDeduction + medicalDeduction + charityDeduction;

                    String apiStatus = tripStorage.isApiSyncEnabled() ? "API ON" : "API OFF";
                    String autoStatus = autoDetectionEnabled ? "ON" : "OFF";

                    // Update dashboard statistics
                    if (totalTripsText != null) {
                        totalTripsText.setText("• Total Trips: " + trips.size());
                    }
                    if (totalMilesText != null) {
                        totalMilesText.setText("• Total Miles: " + formatMiles(totalMiles));
                    }
                    if (totalDeductionsText != null) {
                        totalDeductionsText.setText("• Total Deductions: $" + String.format("%.2f", totalDeduction));
                    }

                } catch (Exception e) {
                    Log.e(TAG, "Error updating stats: " + e.getMessage(), e);
                }
            }

            private List<Trip> getTripsForCurrentPeriod() {
                // For now, return all trips. Could be filtered by date range in the future
                return tripStorage.getAllTrips();
            }

            @Override
            protected void onResume() {
                super.onResume();
                updateStats();
                updateRecentTrips();
            }

            @Override
            protected void onDestroy() {
                super.onDestroy();
                if (locationManager != null) {
                    locationManager.removeUpdates(locationListener);
                    locationManager.removeUpdates(autoLocationListener);
                }
                if (handler != null) {
                    handler.removeCallbacksAndMessages(null);
                }
                if (blinkHandler != null) {
                    blinkHandler.removeCallbacksAndMessages(null);
                }
            }
        }
        EOF

    - name: Create Android manifest
      run: |
        mkdir -p android-app/src/main
        cat > android-app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />

            <application
                android:allowBackup="true"
                android:icon="@android:drawable/ic_menu_mylocation"
                android:label="MileTracker Pro"
                android:theme="@style/Theme.AppCompat.Light.NoActionBar"
                android:requestLegacyExternalStorage="true">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>

                <provider
                    android:name="androidx.core.content.FileProvider"
                    android:authorities="com.miletrackerpro.app.fileprovider"
                    android:exported="false"
                    android:grantUriPermissions="true">
                    <meta-data
                        android:name="android.support.FILE_PROVIDER_PATHS"
                        android:resource="@xml/file_paths" />
                </provider>

            </application>

        </manifest>
        EOF

    - name: Create file provider paths
      run: |
        mkdir -p android-app/src/main/res/xml
        cat > android-app/src/main/res/xml/file_paths.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <paths xmlns:android="http://schemas.android.com/apk/res/android">
            <files-path name="my_files" path="." />
        </paths>
        EOF

    - name: Create build.gradle
      run: |
        cat > android-app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'

        android {
            compileSdkVersion 34
            buildToolsVersion "34.0.0"

            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdkVersion 21
                targetSdkVersion 34
                versionCode 109
                versionName "4.9.94"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.core:core:1.12.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'com.google.android.material:material:1.11.0'
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF

    - name: Create settings.gradle
      run: |
        cat > android-app/settings.gradle << 'EOF'
        rootProject.name = 'MileTrackerPro'
        EOF

    - name: Create project build.gradle
      run: |
        cat > android-app/gradle.properties << 'EOF'
        android.useAndroidX=true
        android.enableJetifier=true
        EOF

    - name: Create top-level build.gradle
      run: |
        cat > android-app/build.gradle.root << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.1.4'
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        EOF
        mv android-app/build.gradle.root android-app/build.gradle.project

    - name: Build Android APK
      run: |
        cd android-app
        # Create gradle wrapper
        gradle wrapper --gradle-version 8.4
        
        # Build the project
        chmod +x gradlew
        ./gradlew clean
        ./gradlew assembleRelease
        
    - name: Sign APK
      run: |
        cd android-app
        # Generate keystore
        keytool -genkey -v -keystore release-key.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=MileTracker, OU=Dev, O=MileTracker, L=City, S=State, C=US"
        
        # Sign APK
        jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore release-key.keystore -storepass android -keypass android build/outputs/apk/release/app-release-unsigned.apk miletracker
        
        # Align APK
        zipalign -v 4 build/outputs/apk/release/app-release-unsigned.apk build/outputs/apk/release/app-release-signed.apk
        
    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: MileTracker-Pro-v4.9.94
        path: android-app/build/outputs/apk/release/app-release-signed.apk
