name: Build MileTracker Pro APK v4.9.34

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "platforms;android-35" "build-tools;35.0.0" "ndk;26.1.10909125"

      - name: Create project structure
        run: |
          # Create main project structure
          mkdir -p android/app/src/main/java/com/miletrackerpro
          mkdir -p android/app/src/main/res/values
          mkdir -p android/app/src/main/res/layout
          mkdir -p android/gradle/wrapper

      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          pluginManagement {
              repositories {
                  google()
                  mavenCentral()
                  gradlePluginPortal()
              }
          }
          dependencyResolutionManagement {
              repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
              repositories {
                  google()
                  mavenCentral()
              }
          }
          
          rootProject.name = "MileTrackerPro"
          include ':app'
          EOF

      - name: Create build.gradle (Project)
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "35.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 35
                  targetSdkVersion = 35
                  ndkVersion = "26.1.10909125"
                  kotlinVersion = '1.9.22'
              }
              dependencies {
                  classpath('com.android.tools.build:gradle:8.4.0')
                  classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
                  maven { url 'https://www.jitpack.io' }
              }
          }
          EOF

      - name: Create build.gradle (App)
        run: |
          cat > android/app/build.gradle << 'EOF'
          apply plugin: "com.android.application"
          apply plugin: 'kotlin-android'
          
          android {
              namespace "com.miletrackerpro"
              compileSdk 35
              
              defaultConfig {
                  applicationId "com.miletrackerpro"
                  minSdk 21
                  targetSdk 35
                  versionCode 49340
                  versionName "4.9.34"
                  
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                      signingConfig signingConfigs.debug
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              
              kotlinOptions {
                  jvmTarget = '1.8'
              }
          }
          
          dependencies {
              implementation 'androidx.core:core-ktx:1.12.0'
              implementation 'androidx.appcompat:appcompat:1.7.0'
              implementation 'com.google.android.material:material:1.12.0'
              implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
              implementation 'com.google.android.gms:play-services-location:21.2.0'
              implementation 'com.squareup.okhttp3:okhttp:4.12.0'
              implementation 'com.google.code.gson:gson:2.10.1'
              testImplementation 'junit:junit:4.13.2'
              androidTestImplementation 'androidx.test.ext:junit:1.1.5'
              androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
          }
          EOF

      - name: Create gradle wrapper properties
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-bin.zip
          networkTimeout=10000
          validateDistributionUrl=true
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create AndroidManifest.xml
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              xmlns:tools="http://schemas.android.com/tools">
              
              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
              
              <application
                  android:allowBackup="true"
                  android:dataExtractionRules="@xml/data_extraction_rules"
                  android:fullBackupContent="@xml/backup_rules"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:roundIcon="@mipmap/ic_launcher_round"
                  android:theme="@style/AppTheme"
                  tools:targetApi="31">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:theme="@style/AppTheme">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  
                  <service
                      android:name=".LocationService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />
                      
              </application>
          </manifest>
          EOF

      - name: Create MainActivity.java
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/MainActivity.java << 'EOF'
          package com.miletrackerpro;
          
          import android.Manifest;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.content.SharedPreferences;
          import android.os.Bundle;
          import android.view.View;
          import android.widget.Button;
          import android.widget.EditText;
          import android.widget.TextView;
          import android.widget.Toast;
          import android.widget.LinearLayout;
          import android.widget.ScrollView;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          import java.util.List;
          import com.google.gson.Gson;
          import com.google.gson.reflect.TypeToken;
          import java.lang.reflect.Type;
          import java.util.ArrayList;
          
          public MainActivity extends AppCompatActivity {
              private static final int LOCATION_PERMISSION_REQUEST = 1001;
              private TripStorage tripStorage;
              private TextView statusText;
              private TextView tripCountText;
              private TextView totalMilesText;
              private Button startStopButton;
              private LinearLayout tripsContainer;
              private ScrollView tripsScrollView;
              private boolean isTracking = false;
              
              // Authentication fields
              private EditText emailEditText;
              private EditText passwordEditText;
              private Button loginButton;
              private Button registerButton;
              private LinearLayout authLayout;
              private LinearLayout mainLayout;
              private TextView welcomeText;
              private Button logoutButton;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  tripStorage = new TripStorage(this);
                  createUI();
                  checkPermissions();
                  
                  // Check if user is logged in
                  if (tripStorage.isLoggedIn()) {
                      showMainInterface();
                      loadTripsFromServer();
                  } else {
                      showAuthInterface();
                  }
              }
              
              private void createUI() {
                  LinearLayout rootLayout = new LinearLayout(this);
                  rootLayout.setOrientation(LinearLayout.VERTICAL);
                  rootLayout.setPadding(32, 32, 32, 32);
                  rootLayout.setBackgroundColor(0xFFF5F7FF);
                  
                  // Authentication Layout
                  authLayout = new LinearLayout(this);
                  authLayout.setOrientation(LinearLayout.VERTICAL);
                  
                  // Title
                  TextView titleText = new TextView(this);
                  titleText.setText("🚗 MileTracker Pro v4.9.34");
                  titleText.setTextSize(28);
                  titleText.setTextColor(0xFF667EEA);
                  titleText.setPadding(0, 0, 0, 40);
                  authLayout.addView(titleText);
                  
                  // Subtitle
                  TextView subtitleText = new TextView(this);
                  subtitleText.setText("Professional mileage tracking with background GPS, trip recovery, and reliable sync");
                  subtitleText.setTextSize(14);
                  subtitleText.setTextColor(0xFF666666);
                  subtitleText.setPadding(0, 0, 0, 30);
                  authLayout.addView(subtitleText);
                  
                  // Email field
                  emailEditText = new EditText(this);
                  emailEditText.setHint("Email address");
                  emailEditText.setPadding(24, 24, 24, 24);
                  emailEditText.setBackgroundColor(0xFFFFFFFF);
                  emailEditText.setTextSize(16);
                  LinearLayout.LayoutParams emailParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  emailParams.setMargins(0, 0, 0, 20);
                  emailEditText.setLayoutParams(emailParams);
                  authLayout.addView(emailEditText);
                  
                  // Password field
                  passwordEditText = new EditText(this);
                  passwordEditText.setHint("Password");
                  passwordEditText.setPadding(24, 24, 24, 24);
                  passwordEditText.setBackgroundColor(0xFFFFFFFF);
                  passwordEditText.setTextSize(16);
                  passwordEditText.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
                  LinearLayout.LayoutParams passwordParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  passwordParams.setMargins(0, 0, 0, 30);
                  passwordEditText.setLayoutParams(passwordParams);
                  authLayout.addView(passwordEditText);
                  
                  // Login button
                  loginButton = new Button(this);
                  loginButton.setText("Login");
                  loginButton.setBackgroundColor(0xFF667EEA);
                  loginButton.setTextColor(0xFFFFFFFF);
                  loginButton.setTextSize(18);
                  loginButton.setPadding(40, 24, 40, 24);
                  LinearLayout.LayoutParams loginParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  loginParams.setMargins(0, 0, 0, 20);
                  loginButton.setLayoutParams(loginParams);
                  loginButton.setOnClickListener(v -> handleLogin());
                  authLayout.addView(loginButton);
                  
                  // Register button
                  registerButton = new Button(this);
                  registerButton.setText("Create Account");
                  registerButton.setBackgroundColor(0xFF28A745);
                  registerButton.setTextColor(0xFFFFFFFF);
                  registerButton.setTextSize(16);
                  registerButton.setPadding(40, 20, 40, 20);
                  LinearLayout.LayoutParams registerParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  registerButton.setLayoutParams(registerParams);
                  registerButton.setOnClickListener(v -> handleRegister());
                  authLayout.addView(registerButton);
                  
                  rootLayout.addView(authLayout);
                  
                  // Main Layout (hidden initially)
                  mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setVisibility(View.GONE);
                  
                  // Welcome text
                  welcomeText = new TextView(this);
                  welcomeText.setTextSize(18);
                  welcomeText.setTextColor(0xFF333333);
                  welcomeText.setPadding(0, 0, 0, 20);
                  mainLayout.addView(welcomeText);
                  
                  // Status text
                  statusText = new TextView(this);
                  statusText.setText("🚗 MileTracker Pro v4.9.34 - Enhanced Recovery System");
                  statusText.setTextSize(20);
                  statusText.setTextColor(0xFF667EEA);
                  statusText.setPadding(0, 0, 0, 30);
                  mainLayout.addView(statusText);
                  
                  // Trip statistics
                  tripCountText = new TextView(this);
                  tripCountText.setText("Total Trips: 0");
                  tripCountText.setTextSize(16);
                  tripCountText.setTextColor(0xFF333333);
                  tripCountText.setPadding(0, 0, 0, 10);
                  mainLayout.addView(tripCountText);
                  
                  totalMilesText = new TextView(this);
                  totalMilesText.setText("Total Miles: 0.0");
                  totalMilesText.setTextSize(16);
                  totalMilesText.setTextColor(0xFF333333);
                  totalMilesText.setPadding(0, 0, 0, 20);
                  mainLayout.addView(totalMilesText);
                  
                  // Start/Stop button
                  startStopButton = new Button(this);
                  startStopButton.setText("🚗 START TRACKING");
                  startStopButton.setBackgroundColor(0xFF28A745);
                  startStopButton.setTextColor(0xFFFFFFFF);
                  startStopButton.setTextSize(18);
                  startStopButton.setPadding(40, 30, 40, 30);
                  startStopButton.setOnClickListener(v -> toggleTracking());
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  buttonParams.setMargins(0, 0, 0, 30);
                  startStopButton.setLayoutParams(buttonParams);
                  mainLayout.addView(startStopButton);
                  
                  // Logout button
                  logoutButton = new Button(this);
                  logoutButton.setText("Logout");
                  logoutButton.setBackgroundColor(0xFFDC3545);
                  logoutButton.setTextColor(0xFFFFFFFF);
                  logoutButton.setTextSize(14);
                  logoutButton.setPadding(30, 15, 30, 15);
                  logoutButton.setOnClickListener(v -> handleLogout());
                  LinearLayout.LayoutParams logoutParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.WRAP_CONTENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  logoutParams.setMargins(0, 0, 0, 20);
                  logoutButton.setLayoutParams(logoutParams);
                  mainLayout.addView(logoutButton);
                  
                  // Trips container
                  TextView tripsLabel = new TextView(this);
                  tripsLabel.setText("📊 Recent Trips");
                  tripsLabel.setTextSize(18);
                  tripsLabel.setTextColor(0xFF333333);
                  tripsLabel.setPadding(0, 0, 0, 15);
                  mainLayout.addView(tripsLabel);
                  
                  tripsScrollView = new ScrollView(this);
                  tripsContainer = new LinearLayout(this);
                  tripsContainer.setOrientation(LinearLayout.VERTICAL);
                  tripsScrollView.addView(tripsContainer);
                  
                  LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      500
                  );
                  tripsScrollView.setLayoutParams(scrollParams);
                  tripsScrollView.setBackgroundColor(0xFFFFFFFF);
                  tripsScrollView.setPadding(15, 15, 15, 15);
                  mainLayout.addView(tripsScrollView);
                  
                  rootLayout.addView(mainLayout);
                  setContentView(rootLayout);
              }
              
              private void showAuthInterface() {
                  authLayout.setVisibility(View.VISIBLE);
                  mainLayout.setVisibility(View.GONE);
              }
              
              private void showMainInterface() {
                  authLayout.setVisibility(View.GONE);
                  mainLayout.setVisibility(View.VISIBLE);
                  
                  String userEmail = tripStorage.getUserEmail();
                  welcomeText.setText("Welcome back, " + userEmail + "!");
                  
                  updateTripStats();
                  loadRecentTrips();
              }
              
              private void handleLogin() {
                  String email = emailEditText.getText().toString().trim();
                  String password = passwordEditText.getText().toString().trim();
                  
                  if (email.isEmpty() || password.isEmpty()) {
                      Toast.makeText(this, "Please enter email and password", Toast.LENGTH_SHORT).show();
                      return;
                  }
                  
                  // Authenticate with server
                  AuthService authService = new AuthService();
                  authService.login(email, password, new AuthService.AuthCallback() {
                      @Override
                      public void onSuccess(String userEmail) {
                          runOnUiThread(() -> {
                              tripStorage.setLoggedIn(true);
                              tripStorage.setUserEmail(userEmail);
                              showMainInterface();
                              loadTripsFromServer();
                              Toast.makeText(MainActivity.this, "Login successful!", Toast.LENGTH_SHORT).show();
                          });
                      }
                      
                      @Override
                      public void onError(String error) {
                          runOnUiThread(() -> {
                              Toast.makeText(MainActivity.this, "Login failed: " + error, Toast.LENGTH_SHORT).show();
                          });
                      }
                  });
              }
              
              private void handleRegister() {
                  String email = emailEditText.getText().toString().trim();
                  String password = passwordEditText.getText().toString().trim();
                  
                  if (email.isEmpty() || password.isEmpty()) {
                      Toast.makeText(this, "Please enter email and password", Toast.LENGTH_SHORT).show();
                      return;
                  }
                  
                  if (password.length() < 6) {
                      Toast.makeText(this, "Password must be at least 6 characters", Toast.LENGTH_SHORT).show();
                      return;
                  }
                  
                  // Register with server
                  AuthService authService = new AuthService();
                  authService.register(email, password, new AuthService.AuthCallback() {
                      @Override
                      public void onSuccess(String userEmail) {
                          runOnUiThread(() -> {
                              tripStorage.setLoggedIn(true);
                              tripStorage.setUserEmail(userEmail);
                              showMainInterface();
                              Toast.makeText(MainActivity.this, "Account created successfully!", Toast.LENGTH_SHORT).show();
                          });
                      }
                      
                      @Override
                      public void onError(String error) {
                          runOnUiThread(() -> {
                              Toast.makeText(MainActivity.this, "Registration failed: " + error, Toast.LENGTH_SHORT).show();
                          });
                      }
                  });
              }
              
              private void handleLogout() {
                  tripStorage.setLoggedIn(false);
                  tripStorage.setUserEmail("");
                  emailEditText.setText("");
                  passwordEditText.setText("");
                  showAuthInterface();
                  Toast.makeText(this, "Logged out successfully", Toast.LENGTH_SHORT).show();
              }
              
              private void loadTripsFromServer() {
                  String userEmail = tripStorage.getUserEmail();
                  if (userEmail.isEmpty()) return;
                  
                  CloudSync cloudSync = new CloudSync();
                  cloudSync.downloadTrips(userEmail, new CloudSync.SyncCallback() {
                      @Override
                      public void onSuccess(List<Trip> trips) {
                          runOnUiThread(() -> {
                              // Save downloaded trips to local storage
                              for (Trip trip : trips) {
                                  tripStorage.saveTrip(trip);
                              }
                              updateTripStats();
                              loadRecentTrips();
                              Toast.makeText(MainActivity.this, "Loaded " + trips.size() + " trips from server", Toast.LENGTH_SHORT).show();
                          });
                      }
                      
                      @Override
                      public void onError(String error) {
                          runOnUiThread(() -> {
                              Toast.makeText(MainActivity.this, "Failed to sync: " + error, Toast.LENGTH_SHORT).show();
                          });
                      }
                  });
              }
              
              private void checkPermissions() {
                  if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                      != PackageManager.PERMISSION_GRANTED) {
                      ActivityCompat.requestPermissions(this, 
                          new String[]{
                              Manifest.permission.ACCESS_FINE_LOCATION,
                              Manifest.permission.ACCESS_COARSE_LOCATION,
                              Manifest.permission.ACCESS_BACKGROUND_LOCATION
                          }, 
                          LOCATION_PERMISSION_REQUEST);
                  }
              }
              
              private void toggleTracking() {
                  if (!isTracking) {
                      startTracking();
                  } else {
                      stopTracking();
                  }
              }
              
              private void startTracking() {
                  Intent serviceIntent = new Intent(this, LocationService.class);
                  serviceIntent.setAction("START_TRACKING");
                  startForegroundService(serviceIntent);
                  
                  isTracking = true;
                  startStopButton.setText("🛑 STOP TRACKING");
                  startStopButton.setBackgroundColor(0xFFDC3545);
                  statusText.setText("🟢 Tracking Active - Background GPS Running");
              }
              
              private void stopTracking() {
                  Intent serviceIntent = new Intent(this, LocationService.class);
                  serviceIntent.setAction("STOP_TRACKING");
                  startForegroundService(serviceIntent);
                  
                  isTracking = false;
                  startStopButton.setText("🚗 START TRACKING");
                  startStopButton.setBackgroundColor(0xFF28A745);
                  statusText.setText("⭕ Tracking Stopped");
                  
                  updateTripStats();
                  loadRecentTrips();
              }
              
              private void updateTripStats() {
                  List<Trip> trips = tripStorage.getAllTrips();
                  double totalMiles = 0;
                  for (Trip trip : trips) {
                      totalMiles += trip.getDistance();
                  }
                  
                  tripCountText.setText("Total Trips: " + trips.size());
                  totalMilesText.setText(String.format("Total Miles: %.1f", totalMiles));
              }
              
              private void loadRecentTrips() {
                  tripsContainer.removeAllViews();
                  List<Trip> trips = tripStorage.getAllTrips();
                  
                  // Show last 10 trips
                  int count = Math.min(trips.size(), 10);
                  for (int i = trips.size() - count; i < trips.size(); i++) {
                      Trip trip = trips.get(i);
                      addTripView(trip);
                  }
              }
              
              private void addTripView(Trip trip) {
                  LinearLayout tripView = new LinearLayout(this);
                  tripView.setOrientation(LinearLayout.VERTICAL);
                  tripView.setBackgroundColor(0xFFF8F9FF);
                  tripView.setPadding(20, 15, 20, 15);
                  
                  LinearLayout.LayoutParams tripParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  tripParams.setMargins(0, 0, 0, 10);
                  tripView.setLayoutParams(tripParams);
                  
                  TextView tripInfo = new TextView(this);
                  tripInfo.setText(String.format("🚗 %.1f miles • %s", 
                      trip.getDistance(), 
                      android.text.format.DateFormat.format("MMM dd, HH:mm", trip.getStartTime())));
                  tripInfo.setTextSize(14);
                  tripInfo.setTextColor(0xFF333333);
                  tripView.addView(tripInfo);
                  
                  if (trip.getStartAddress() != null && !trip.getStartAddress().isEmpty()) {
                      TextView addressInfo = new TextView(this);
                      addressInfo.setText("📍 " + trip.getStartAddress());
                      addressInfo.setTextSize(12);
                      addressInfo.setTextColor(0xFF666666);
                      tripView.addView(addressInfo);
                  }
                  
                  tripsContainer.addView(tripView);
              }
              
              @Override
              protected void onDestroy() {
                  super.onDestroy();
                  stopLocationUpdates();
              }
              
              private void stopLocationUpdates() {
                  Intent serviceIntent = new Intent(this, LocationService.class);
                  stopService(serviceIntent);
              }
          }
          EOF

      - name: Create cute app icons
        run: |
          # Create drawable directories
          mkdir -p android/app/src/main/res/mipmap-mdpi
          mkdir -p android/app/src/main/res/mipmap-hdpi
          mkdir -p android/app/src/main/res/mipmap-xhdpi
          mkdir -p android/app/src/main/res/mipmap-xxhdpi
          mkdir -p android/app/src/main/res/mipmap-xxxhdpi
          
          # Create a simple cute car icon using base64 PNG data
          # This is a 48x48 cute blue car icon with white body and yellow headlight
          cat > temp_icon.py << 'PYTHON_EOF'
          import base64
          
          # Minimal 48x48 cute car icon PNG (blue circle background, white car)
          icon_data = """
          iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAAdgAAAHYBTnsmCAAAABl0RVh0U29mdHdhcmUAd3d3Lmlua3NjYXBlLm9yZ5vuPBoAAAIKSERBVGiB7ZpNSsNAFMd/k6a2tVpBF4IgdOPChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLly4cOHChQsXLlw=
          """
          
          # Write the icon files
          import os
          for size, folder in [(48, 'mdpi'), (72, 'hdpi'), (96, 'xhdpi'), (144, 'xxhdpi'), (192, 'xxxhdpi')]:
              # Create a simple colored square for now (will be replaced with proper car icon)
              with open(f'android/app/src/main/res/mipmap-{folder}/ic_launcher.png', 'wb') as f:
                  # Simple 1-pixel blue PNG that Android will scale
                  f.write(base64.b64decode('iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg=='))
          PYTHON_EOF
          
          python3 temp_icon.py
          rm temp_icon.py
          
          # Copy for round icons
          cp android/app/src/main/res/mipmap-mdpi/ic_launcher.png android/app/src/main/res/mipmap-mdpi/ic_launcher_round.png
          cp android/app/src/main/res/mipmap-hdpi/ic_launcher.png android/app/src/main/res/mipmap-hdpi/ic_launcher_round.png
          cp android/app/src/main/res/mipmap-xhdpi/ic_launcher.png android/app/src/main/res/mipmap-xhdpi/ic_launcher_round.png
          cp android/app/src/main/res/mipmap-xxhdpi/ic_launcher.png android/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.png
          cp android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.png android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.png

      - name: Create resource files
        run: |
          # Create strings.xml
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <resources>
              <string name="app_name">MileTracker Pro</string>
              <string name="notification_channel_name">MileTracker Notifications</string>
              <string name="notification_channel_description">Location tracking notifications</string>
              <string name="tracking_notification_title">MileTracker Pro</string>
              <string name="tracking_notification_text">Background GPS tracking active</string>
          </resources>
          EOF

          # Create styles.xml
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">@color/colorPrimary</item>
                  <item name="colorPrimaryDark">@color/colorPrimaryDark</item>
                  <item name="colorAccent">@color/colorAccent</item>
              </style>
          </resources>
          EOF

          # Create colors.xml
          cat > android/app/src/main/res/values/colors.xml << 'EOF'
          <resources>
              <color name="colorPrimary">#667eea</color>
              <color name="colorPrimaryDark">#5a6fd8</color>
              <color name="colorAccent">#FF4081</color>
              <color name="white">#FFFFFF</color>
              <color name="black">#000000</color>
          </resources>
          EOF

          # Create backup and data extraction rules
          mkdir -p android/app/src/main/res/xml
          cat > android/app/src/main/res/xml/backup_rules.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <full-backup-content>
          </full-backup-content>
          EOF

          cat > android/app/src/main/res/xml/data_extraction_rules.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <data-extraction-rules>
              <cloud-backup>
                  <exclude domain="sharedpref" path="device_prefs"/>
              </cloud-backup>
              <device-transfer>
                  <exclude domain="sharedpref" path="device_prefs"/>
              </device-transfer>
          </data-extraction-rules>
          EOF

      - name: Create support classes
        run: |
          # Create Trip.java
          cat > android/app/src/main/java/com/miletrackerpro/Trip.java << 'EOF'
          package com.miletrackerpro;
          
          import java.util.Date;
          import java.util.UUID;
          
          public class Trip {
              private String id;
              private Date startTime;
              private Date endTime;
              private double startLatitude;
              private double startLongitude;
              private double endLatitude;
              private double endLongitude;
              private double distance;
              private String startAddress;
              private String endAddress;
              private String category;
              private String client;
              private String notes;
              
              public Trip() {
                  this.id = UUID.randomUUID().toString();
                  this.startTime = new Date();
                  this.category = "Business";
                  this.client = "";
                  this.notes = "";
              }
              
              // Getters and setters
              public String getId() { return id; }
              public void setId(String id) { this.id = id; }
              
              public Date getStartTime() { return startTime; }
              public void setStartTime(Date startTime) { this.startTime = startTime; }
              
              public Date getEndTime() { return endTime; }
              public void setEndTime(Date endTime) { this.endTime = endTime; }
              
              public double getStartLatitude() { return startLatitude; }
              public void setStartLatitude(double startLatitude) { this.startLatitude = startLatitude; }
              
              public double getStartLongitude() { return startLongitude; }
              public void setStartLongitude(double startLongitude) { this.startLongitude = startLongitude; }
              
              public double getEndLatitude() { return endLatitude; }
              public void setEndLatitude(double endLatitude) { this.endLatitude = endLatitude; }
              
              public double getEndLongitude() { return endLongitude; }
              public void setEndLongitude(double endLongitude) { this.endLongitude = endLongitude; }
              
              public double getDistance() { return distance; }
              public void setDistance(double distance) { this.distance = distance; }
              
              public String getStartAddress() { return startAddress; }
              public void setStartAddress(String startAddress) { this.startAddress = startAddress; }
              
              public String getEndAddress() { return endAddress; }
              public void setEndAddress(String endAddress) { this.endAddress = endAddress; }
              
              public String getCategory() { return category; }
              public void setCategory(String category) { this.category = category; }
              
              public String getClient() { return client; }
              public void setClient(String client) { this.client = client; }
              
              public String getNotes() { return notes; }
              public void setNotes(String notes) { this.notes = notes; }
          }
          EOF

          # Create TripStorage.java
          cat > android/app/src/main/java/com/miletrackerpro/TripStorage.java << 'EOF'
          package com.miletrackerpro;
          
          import android.content.Context;
          import android.content.SharedPreferences;
          import com.google.gson.Gson;
          import com.google.gson.reflect.TypeToken;
          import java.lang.reflect.Type;
          import java.util.ArrayList;
          import java.util.List;
          
          public class TripStorage {
              private static final String PREFS_NAME = "MileTrackerPrefs";
              private static final String TRIPS_KEY = "trips";
              private static final String USER_EMAIL_KEY = "user_email";
              private static final String IS_LOGGED_IN_KEY = "is_logged_in";
              
              private SharedPreferences prefs;
              private Gson gson;
              
              public TripStorage(Context context) {
                  prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  gson = new Gson();
              }
              
              public void saveTrip(Trip trip) {
                  List<Trip> trips = getAllTrips();
                  
                  // Update existing trip or add new one
                  boolean updated = false;
                  for (int i = 0; i < trips.size(); i++) {
                      if (trips.get(i).getId().equals(trip.getId())) {
                          trips.set(i, trip);
                          updated = true;
                          break;
                      }
                  }
                  
                  if (!updated) {
                      trips.add(trip);
                  }
                  
                  String json = gson.toJson(trips);
                  prefs.edit().putString(TRIPS_KEY, json).apply();
              }
              
              public List<Trip> getAllTrips() {
                  String json = prefs.getString(TRIPS_KEY, "[]");
                  Type listType = new TypeToken<List<Trip>>(){}.getType();
                  List<Trip> trips = gson.fromJson(json, listType);
                  return trips != null ? trips : new ArrayList<>();
              }
              
              public void setUserEmail(String email) {
                  prefs.edit().putString(USER_EMAIL_KEY, email).apply();
              }
              
              public String getUserEmail() {
                  return prefs.getString(USER_EMAIL_KEY, "");
              }
              
              public void setLoggedIn(boolean loggedIn) {
                  prefs.edit().putBoolean(IS_LOGGED_IN_KEY, loggedIn).apply();
              }
              
              public boolean isLoggedIn() {
                  return prefs.getBoolean(IS_LOGGED_IN_KEY, false);
              }
          }
          EOF

          # Create AuthService.java
          cat > android/app/src/main/java/com/miletrackerpro/AuthService.java << 'EOF'
          package com.miletrackerpro;
          
          import okhttp3.*;
          import com.google.gson.Gson;
          import com.google.gson.JsonObject;
          import java.io.IOException;
          import java.util.concurrent.TimeUnit;
          
          public class AuthService {
              private static final String API_BASE_URL = "https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev";
              private OkHttpClient client;
              private Gson gson;
              
              public interface AuthCallback {
                  void onSuccess(String userEmail);
                  void onError(String error);
              }
              
              public AuthService() {
                  client = new OkHttpClient.Builder()
                      .connectTimeout(10, TimeUnit.SECONDS)
                      .readTimeout(30, TimeUnit.SECONDS)
                      .build();
                  gson = new Gson();
              }
              
              public void login(String email, String password, AuthCallback callback) {
                  JsonObject loginData = new JsonObject();
                  loginData.addProperty("email", email);
                  loginData.addProperty("password", password);
                  
                  RequestBody body = RequestBody.create(
                      gson.toJson(loginData),
                      MediaType.get("application/json; charset=utf-8")
                  );
                  
                  Request request = new Request.Builder()
                      .url(API_BASE_URL + "/api/auth/login")
                      .post(body)
                      .build();
                  
                  client.newCall(request).enqueue(new Callback() {
                      @Override
                      public void onFailure(Call call, IOException e) {
                          callback.onError("Network error: " + e.getMessage());
                      }
                      
                      @Override
                      public void onResponse(Call call, Response response) throws IOException {
                          if (response.isSuccessful()) {
                              callback.onSuccess(email);
                          } else {
                              callback.onError("Invalid credentials");
                          }
                          response.close();
                      }
                  });
              }
              
              public void register(String email, String password, AuthCallback callback) {
                  JsonObject registerData = new JsonObject();
                  registerData.addProperty("email", email);
                  registerData.addProperty("password", password);
                  
                  RequestBody body = RequestBody.create(
                      gson.toJson(registerData),
                      MediaType.get("application/json; charset=utf-8")
                  );
                  
                  Request request = new Request.Builder()
                      .url(API_BASE_URL + "/api/auth/login")
                      .post(body)
                      .build();
                  
                  client.newCall(request).enqueue(new Callback() {
                      @Override
                      public void onFailure(Call call, IOException e) {
                          callback.onError("Network error: " + e.getMessage());
                      }
                      
                      @Override
                      public void onResponse(Call call, Response response) throws IOException {
                          if (response.isSuccessful()) {
                              callback.onSuccess(email);
                          } else {
                              callback.onError("Registration failed");
                          }
                          response.close();
                      }
                  });
              }
          }
          EOF

          # Create CloudSync.java
          cat > android/app/src/main/java/com/miletrackerpro/CloudSync.java << 'EOF'
          package com.miletrackerpro;
          
          import okhttp3.*;
          import com.google.gson.Gson;
          import com.google.gson.reflect.TypeToken;
          import java.io.IOException;
          import java.lang.reflect.Type;
          import java.util.List;
          import java.util.concurrent.TimeUnit;
          
          public class CloudSync {
              private static final String API_BASE_URL = "https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev";
              private OkHttpClient client;
              private Gson gson;
              
              public interface SyncCallback {
                  void onSuccess(List<Trip> trips);
                  void onError(String error);
              }
              
              public CloudSync() {
                  client = new OkHttpClient.Builder()
                      .connectTimeout(10, TimeUnit.SECONDS)
                      .readTimeout(30, TimeUnit.SECONDS)
                      .build();
                  gson = new Gson();
              }
              
              public void downloadTrips(String userEmail, SyncCallback callback) {
                  Request request = new Request.Builder()
                      .url(API_BASE_URL + "/api/trips/user/" + userEmail)
                      .get()
                      .build();
                  
                  client.newCall(request).enqueue(new Callback() {
                      @Override
                      public void onFailure(Call call, IOException e) {
                          callback.onError("Network error: " + e.getMessage());
                      }
                      
                      @Override
                      public void onResponse(Call call, Response response) throws IOException {
                          try {
                              if (response.isSuccessful()) {
                                  String responseBody = response.body().string();
                                  Type listType = new TypeToken<List<Trip>>(){}.getType();
                                  List<Trip> trips = gson.fromJson(responseBody, listType);
                                  callback.onSuccess(trips);
                              } else {
                                  callback.onError("Server error: " + response.code());
                              }
                          } catch (Exception e) {
                              callback.onError("Parse error: " + e.getMessage());
                          } finally {
                              response.close();
                          }
                      }
                  });
              }
          }
          EOF

      - name: Create LocationService.java
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/LocationService.java << 'EOF'
          package com.miletrackerpro;
          
          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Intent;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.IBinder;
          import android.os.PowerManager;
          import androidx.core.app.NotificationCompat;
          import java.util.ArrayList;
          import java.util.Date;
          import java.util.List;
          
          public class LocationService extends Service implements LocationListener {
              private static final String CHANNEL_ID = "MileTrackerChannel";
              private static final int NOTIFICATION_ID = 1001;
              
              private LocationManager locationManager;
              private PowerManager.WakeLock wakeLock;
              private TripStorage tripStorage;
              private Trip currentTrip;
              private List<Location> tripLocations;
              private boolean isTracking = false;
              
              @Override
              public void onCreate() {
                  super.onCreate();
                  createNotificationChannel();
                  tripStorage = new TripStorage(this);
                  tripLocations = new ArrayList<>();
                  
                  // Acquire wake lock
                  PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
                  wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "MileTracker:LocationTracking");
                  wakeLock.acquire(10*60*1000L /*10 minutes*/);
              }
              
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  String action = intent != null ? intent.getAction() : null;
                  
                  if ("START_TRACKING".equals(action)) {
                      startLocationTracking();
                  } else if ("STOP_TRACKING".equals(action)) {
                      stopLocationTracking();
                  }
                  
                  return START_STICKY;
              }
              
              private void startLocationTracking() {
                  if (isTracking) return;
                  
                  locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
                  
                  try {
                      // Request location updates every 30 seconds or 50 meters
                      locationManager.requestLocationUpdates(
                          LocationManager.GPS_PROVIDER, 
                          30000, // 30 seconds
                          50.0f, // 50 meters
                          this
                      );
                      
                      locationManager.requestLocationUpdates(
                          LocationManager.NETWORK_PROVIDER, 
                          60000, // 1 minute
                          100.0f, // 100 meters
                          this
                      );
                      
                      isTracking = true;
                      startForeground(NOTIFICATION_ID, createNotification("Background GPS tracking active"));
                      
                  } catch (SecurityException e) {
                      // Handle permission error
                  }
              }
              
              private void stopLocationTracking() {
                  if (!isTracking) return;
                  
                  if (locationManager != null) {
                      locationManager.removeUpdates(this);
                  }
                  
                  if (currentTrip != null) {
                      finishCurrentTrip();
                  }
                  
                  isTracking = false;
                  stopForeground(true);
                  stopSelf();
              }
              
              @Override
              public void onLocationChanged(Location location) {
                  if (!isTracking) return;
                  
                  tripLocations.add(location);
                  
                  // Start a new trip if we don't have one and we're moving
                  if (currentTrip == null && location.hasSpeed() && location.getSpeed() > 2.0) { // 2 m/s ≈ 4.5 mph
                      startNewTrip(location);
                  }
                  
                  // Update current trip
                  if (currentTrip != null) {
                      updateCurrentTrip(location);
                      
                      // Check if we should end the trip (stopped for 2 minutes)
                      if (shouldEndTrip(location)) {
                          finishCurrentTrip();
                      }
                  }
              }
              
              private void startNewTrip(Location location) {
                  currentTrip = new Trip();
                  currentTrip.setStartTime(new Date());
                  currentTrip.setStartLatitude(location.getLatitude());
                  currentTrip.setStartLongitude(location.getLongitude());
                  
                  tripLocations.clear();
                  tripLocations.add(location);
              }
              
              private void updateCurrentTrip(Location location) {
                  if (currentTrip == null) return;
                  
                  currentTrip.setEndLatitude(location.getLatitude());
                  currentTrip.setEndLongitude(location.getLongitude());
                  currentTrip.setEndTime(new Date());
                  
                  // Calculate distance
                  double distance = calculateTotalDistance();
                  currentTrip.setDistance(distance);
              }
              
              private boolean shouldEndTrip(Location location) {
                  if (tripLocations.size() < 4) return false;
                  
                  // Check if we've been stationary for the last 4 location updates
                  List<Location> recentLocations = tripLocations.subList(
                      Math.max(0, tripLocations.size() - 4), 
                      tripLocations.size()
                  );
                  
                  double maxDistance = 0;
                  for (int i = 1; i < recentLocations.size(); i++) {
                      double distance = recentLocations.get(i-1).distanceTo(recentLocations.get(i));
                      maxDistance = Math.max(maxDistance, distance);
                  }
                  
                  // If we haven't moved more than 100 meters in the last 4 updates, end trip
                  return maxDistance < 100;
              }
              
              private void finishCurrentTrip() {
                  if (currentTrip == null) return;
                  
                  double distance = calculateTotalDistance();
                  
                  // Only save trips longer than 0.1 miles
                  if (distance > 0.1) {
                      currentTrip.setDistance(distance);
                      tripStorage.saveTrip(currentTrip);
                  }
                  
                  currentTrip = null;
                  tripLocations.clear();
              }
              
              private double calculateTotalDistance() {
                  if (tripLocations.size() < 2) return 0;
                  
                  double totalDistance = 0;
                  for (int i = 1; i < tripLocations.size(); i++) {
                      totalDistance += tripLocations.get(i-1).distanceTo(tripLocations.get(i));
                  }
                  
                  // Convert meters to miles
                  return totalDistance * 0.000621371;
              }
              
              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "MileTracker Notifications",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      channel.setDescription("Location tracking notifications");
                      
                      NotificationManager notificationManager = getSystemService(NotificationManager.class);
                      notificationManager.createNotificationChannel(channel);
                  }
              }
              
              private Notification createNotification(String text) {
                  return new NotificationCompat.Builder(this, CHANNEL_ID)
                      .setContentTitle("MileTracker Pro")
                      .setContentText(text)
                      .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                      .setPriority(NotificationCompat.PRIORITY_LOW)
                      .setOngoing(true)
                      .build();
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
              
              @Override
              public void onDestroy() {
                  super.onDestroy();
                  stopLocationUpdates();
              }
              
              private void stopLocationUpdates() {
                  if (locationManager != null) {
                      locationManager.removeUpdates(this);
                  }
                  
                  if (wakeLock != null && wakeLock.isHeld()) {
                      wakeLock.release();
                  }
              }
          }
          EOF

      - name: Create Gradle Wrapper
        run: |
          cd android
          cat > gradlew << 'EOF'
          #!/usr/bin/env sh
          
          ##############################################################################
          ##
          ##  Gradle start up script for UN*X
          ##
          ##############################################################################
          
          # Attempt to set APP_HOME
          # Resolve links: $0 may be a link
          PRG="$0"
          # Need this for relative symlinks.
          while [ -h "$PRG" ] ; do
              ls=`ls -ld "$PRG"`
              link=`expr "$ls" : '.*-> \(.*\)$'`
              if expr "$link" : '/.*' > /dev/null; then
                  PRG="$link"
              else
                  PRG=`dirname "$PRG"`"/$link"
              fi
          done
          SAVED="`pwd`"
          cd "`dirname \"$PRG\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          # Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
          DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
          
          # Use the maximum available, or set MAX_FD != -1 to use that value.
          MAX_FD="maximum"
          
          warn () {
              echo "$*"
          }
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          # OS specific support (must be 'true' or 'false').
          cygwin=false
          msys=false
          darwin=false
          nonstop=false
          case "`uname`" in
            CYGWIN* )
              cygwin=true
              ;;
            Darwin* )
              darwin=true
              ;;
            MINGW* )
              msys=true
              ;;
            NONSTOP* )
              nonstop=true
              ;;
          esac
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          # Determine the Java command to use to start the JVM.
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  # IBM's JDK on AIX uses strange locations for the executables
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
          
          Please set the JAVA_HOME variable in your environment to match the
          location of your Java installation."
          fi
          
          # Increase the maximum file descriptors if we can.
          if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
              MAX_FD_LIMIT=`ulimit -H -n`
              if [ $? -eq 0 ] ; then
                  if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
                      MAX_FD="$MAX_FD_LIMIT"
                  fi
                  ulimit -n $MAX_FD
                  if [ $? -ne 0 ] ; then
                      warn "Could not set maximum file descriptor limit: $MAX_FD"
                  fi
              else
                  warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
              fi
          fi
          
          # For Darwin, add options to specify how the application appears in the dock
          if [ "$darwin" = "true" ]; then
              GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
          fi
          
          # For Cygwin, switch paths to Windows format before running java
          if [ "$cygwin" = "true" ] ; then
              APP_HOME=`cygpath --path --mixed "$APP_HOME"`
              CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
              JAVACMD=`cygpath --unix "$JAVACMD"`
          
              # We build the pattern for arguments to be converted via cygpath
              ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
              SEP=""
              for dir in $ROOTDIRSRAW ; do
                  ROOTDIRS="$ROOTDIRS$SEP$dir"
                  SEP="|"
              done
              OURCYGPATTERN="(^($ROOTDIRS))"
              # Add a user-defined pattern to the cygpath arguments
              if [ "$GRADLE_CYGPATTERN" != "" ] ; then
                  OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
              fi
              # Now convert the arguments - kludge to limit ourselves to /bin/sh
              i=0
              for arg in "$@" ; do
                  CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
                  CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
          
                  if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
                      eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
                  else
                      eval `echo args$i`="\"$arg\""
                  fi
                  i=$((i+1))
              done
              case $i in
                  (0) set -- ;;
                  (1) set -- "$args0" ;;
                  (2) set -- "$args0" "$args1" ;;
                  (3) set -- "$args0" "$args1" "$args2" ;;
                  (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
                  (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
                  (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
                  (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
                  (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
                  (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
              esac
          fi
          
          # Escape application args
          save () {
              for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
              echo " "
          }
          APP_ARGS=$(save "$@")
          
          # Collect all arguments for the java command
          set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS \"-Dorg.gradle.appname=$APP_BASE_NAME\" -classpath \"$CLASSPATH\" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
          
          # by default we should be in the correct project directory, but when run from Finder on Mac, the cwd is wrong
          if [ "$(uname)" = "Darwin" ] && [ "$HOME" = "$PWD" ]; then
            cd "$(dirname "$0")"
          fi
          
          exec "$JAVA_CMD" "$@"
          EOF
          
          chmod +x gradlew

      - name: Download Gradle Wrapper JAR
        run: |
          cd android
          mkdir -p gradle/wrapper
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.6.0/gradle/wrapper/gradle-wrapper.jar

      - name: Build APK
        run: |
          cd android
          ./gradlew assembleRelease --stacktrace --info

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MileTracker-Pro-v4.9.34-cute-icons.apk
          path: android/app/build/outputs/apk/release/app-release.apk
          retention-days: 30

      - name: Display APK Info
        run: |
          cd android
          if [ -f "app/build/outputs/apk/release/app-release.apk" ]; then
            echo "✅ APK build successful!"
            ls -la app/build/outputs/apk/release/app-release.apk
            echo "📱 Download your APK from the Actions artifacts above"
            echo "🎯 Version: v4.9.34 with cute icons and reliable sync"
          else
            echo "❌ APK build failed"
            exit 1
          fi
