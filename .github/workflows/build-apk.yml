name: Enhanced MileTracker Pro with Stoplight Fix

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Create project structure
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
        mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/drawable

    - name: Create build.gradle (Project level)
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.2.2'
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }
        EOF

    - name: Create build.gradle (App level)
      run: |
        cat > android/app/build.gradle << 'EOF'
        plugins {
            id 'com.android.application'
        }

        android {
            namespace 'com.miletrackerpro.app'
            compileSdk 35

            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdk 24
                targetSdk 35
                versionCode 1
                versionName "4.2"
            }

            buildTypes {
                release {
                    minifyEnabled false
                }
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.core:core:1.12.0'
            implementation 'com.google.android.gms:play-services-location:21.0.1'
        }
        EOF

    - name: Create settings.gradle
      run: |
        cat > android/settings.gradle << 'EOF'
        include ':app'
        EOF

    - name: Create gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        android.useAndroidX=true
        android.enableJetifier=true
        org.gradle.jvmargs=-Xmx2048m
        EOF

    - name: Create AndroidManifest.xml
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            xmlns:tools="http://schemas.android.com/tools">

            <!-- Location permissions -->
            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            
            <!-- Background service permissions -->
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            
            <!-- Network access for address lookup -->
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            
            <application
                android:allowBackup="true"
                android:icon="@drawable/ic_launcher"
                android:label="MileTracker Pro"
                android:theme="@style/AppTheme">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:launchMode="singleTop">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <!-- Enhanced Auto Detection Service with Stoplight Fix -->
                <service
                    android:name=".services.AutoDetectionService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="location" />
                
            </application>
        </manifest>
        EOF

    - name: Create app resources
      run: |
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">#667eea</item>
                <item name="colorPrimaryDark">#4c63d2</item>
                <item name="colorAccent">#667eea</item>
            </style>
        </resources>
        EOF
        
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">MileTracker Pro</string>
            <string name="auto_detection_notification">Auto trip detection active</string>
            <string name="trip_in_progress_notification">Trip in progress</string>
        </resources>
        EOF
        
        # Create colors.xml
        cat > android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="primary">#667eea</color>
            <color name="primary_dark">#4c63d2</color>
            <color name="accent">#667eea</color>
            <color name="white">#FFFFFF</color>
            <color name="black">#000000</color>
        </resources>
        EOF

    - name: Create Enhanced AutoDetectionService with Stoplight Fix
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/services/AutoDetectionService.java << 'EOF'
        package com.miletrackerpro.app.services;

        import android.Manifest;
        import android.app.Notification;
        import android.app.NotificationChannel;
        import android.app.NotificationManager;
        import android.app.Service;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.location.Geocoder;
        import android.location.Address;
        import android.os.Build;
        import android.os.IBinder;
        import android.os.PowerManager;
        import androidx.core.app.ActivityCompat;
        import androidx.core.app.NotificationCompat;
        import com.miletrackerpro.app.R;
        import com.miletrackerpro.app.storage.TripStorage;

        import java.util.List;
        import java.util.ArrayList;
        import java.util.Date;
        import java.util.Locale;

        public class AutoDetectionService extends Service implements LocationListener {
            private static final String CHANNEL_ID = "TRIP_DETECTION_CHANNEL";
            private static final int NOTIFICATION_ID = 1001;
            
            // CRITICAL STOPLIGHT FIX - Enhanced trip detection parameters
            private static final double MIN_TRIP_DISTANCE_MILES = 0.5; // Filter out stoplight trips
            private static final double SPEED_THRESHOLD_START_MPH = 8.0; // Start trip detection
            private static final double SPEED_THRESHOLD_STOP_MPH = 3.0;  // Stop trip detection
            private static final int CONSECUTIVE_READINGS_START = 3;     // Readings to start trip
            private static final int CONSECUTIVE_READINGS_STOP = 4;      // Readings to stop trip
            private static final long MIN_TRIP_DURATION_MS = 120000;     // Minimum 2 minutes
            
            private LocationManager locationManager;
            private PowerManager.WakeLock wakeLock;
            private TripStorage tripStorage;
            private Geocoder geocoder;
            
            // Trip detection state
            private boolean isAutoMode = false;
            private boolean isManualTrip = false;
            private TripData currentTrip = null;
            private List<Location> speedReadings = new ArrayList<>();
            private int consecutiveMovingReadings = 0;
            private int consecutiveStationaryReadings = 0;
            
            // Enhanced trip data structure
            private static class TripData {
                public String id;
                public Date startTime;
                public Date endTime;
                public Location startLocation;
                public Location endLocation;
                public String startAddress;
                public String endAddress;
                public List<Location> pathPoints;
                public double totalDistance;
                public boolean isAutoDetected;
                public boolean isValid;
                
                public TripData() {
                    this.id = String.valueOf(System.currentTimeMillis());
                    this.pathPoints = new ArrayList<>();
                    this.isValid = false;
                }
            }

            @Override
            public void onCreate() {
                super.onCreate();
                
                locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
                tripStorage = new TripStorage(this);
                geocoder = new Geocoder(this, Locale.getDefault());
                
                createNotificationChannel();
                acquireWakeLock();
            }

            @Override
            public int onStartCommand(Intent intent, int flags, int startId) {
                if (intent != null) {
                    String action = intent.getAction();
                    
                    if ("START_AUTO_DETECTION".equals(action)) {
                        startAutoDetection();
                    } else if ("STOP_AUTO_DETECTION".equals(action)) {
                        stopAutoDetection();
                    } else if ("START_MANUAL_TRIP".equals(action)) {
                        startManualTrip();
                    } else if ("STOP_MANUAL_TRIP".equals(action)) {
                        stopManualTrip();
                    }
                }
                
                return START_STICKY;
            }

            private void startAutoDetection() {
                isAutoMode = true;
                startLocationUpdates();
                showNotification("Auto detection active - Monitoring for trips", false);
            }

            private void stopAutoDetection() {
                isAutoMode = false;
                stopLocationUpdates();
                
                // Complete any active auto-detected trip
                if (currentTrip != null && currentTrip.isAutoDetected) {
                    completeCurrentTrip();
                }
                
                stopForeground(true);
            }

            private void startManualTrip() {
                if (currentTrip != null) return; // Already in trip
                
                isManualTrip = true;
                currentTrip = new TripData();
                currentTrip.isAutoDetected = false;
                currentTrip.startTime = new Date();
                
                startLocationUpdates();
                showNotification("Manual trip in progress", true);
            }

            private void stopManualTrip() {
                if (currentTrip != null && !currentTrip.isAutoDetected) {
                    completeCurrentTrip();
                }
                
                isManualTrip = false;
                stopLocationUpdates();
                stopForeground(true);
            }

            private void startLocationUpdates() {
                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                    != PackageManager.PERMISSION_GRANTED) {
                    return;
                }

                // High accuracy GPS for trip detection
                locationManager.requestLocationUpdates(
                    LocationManager.GPS_PROVIDER,
                    5000,  // 5 second intervals
                    10,    // 10 meter minimum distance
                    this
                );
                
                // Network backup for indoor/poor GPS areas
                locationManager.requestLocationUpdates(
                    LocationManager.NETWORK_PROVIDER,
                    10000, // 10 second intervals
                    25,    // 25 meter minimum distance
                    this
                );
            }

            private void stopLocationUpdates() {
                locationManager.removeUpdates(this);
            }

            @Override
            public void onLocationChanged(Location location) {
                if (location == null) return;
                
                // Process location for trip detection
                processLocationUpdate(location);
                
                // Add to current trip path if trip is active
                if (currentTrip != null) {
                    currentTrip.pathPoints.add(location);
                    
                    // Set start location if not set
                    if (currentTrip.startLocation == null) {
                        currentTrip.startLocation = location;
                        getAddressAsync(location, true);
                    }
                }
            }

            private void processLocationUpdate(Location location) {
                if (!isAutoMode || isManualTrip) return;
                
                // Calculate speed in MPH
                double speedMph = location.hasSpeed() ? 
                    location.getSpeed() * 2.237 : calculateSpeedFromDistance(location);
                
                // Add to speed readings buffer
                speedReadings.add(location);
                if (speedReadings.size() > 10) {
                    speedReadings.remove(0);
                }
                
                // Calculate average speed from recent readings
                double avgSpeed = calculateAverageSpeed();
                
                // ENHANCED TRIP DETECTION WITH STOPLIGHT FIX
                if (avgSpeed > SPEED_THRESHOLD_START_MPH) {
                    consecutiveMovingReadings++;
                    consecutiveStationaryReadings = 0;
                    
                    // Start trip if moving consistently and no current trip
                    if (currentTrip == null && consecutiveMovingReadings >= CONSECUTIVE_READINGS_START) {
                        startAutoTrip(location);
                    }
                } else if (avgSpeed < SPEED_THRESHOLD_STOP_MPH) {
                    consecutiveStationaryReadings++;
                    consecutiveMovingReadings = 0;
                    
                    // End trip if stationary consistently and trip is active
                    if (currentTrip != null && currentTrip.isAutoDetected && 
                        consecutiveStationaryReadings >= CONSECUTIVE_READINGS_STOP) {
                        endAutoTrip(location);
                    }
                }
            }

            private double calculateSpeedFromDistance(Location location) {
                if (speedReadings.isEmpty()) return 0.0;
                
                Location lastLocation = speedReadings.get(speedReadings.size() - 1);
                float distance = location.distanceTo(lastLocation); // meters
                long timeDiff = location.getTime() - lastLocation.getTime(); // milliseconds
                
                if (timeDiff > 0) {
                    double speedMps = distance / (timeDiff / 1000.0); // meters per second
                    return speedMps * 2.237; // convert to MPH
                }
                
                return 0.0;
            }

            private double calculateAverageSpeed() {
                if (speedReadings.size() < 2) return 0.0;
                
                double totalSpeed = 0.0;
                int validReadings = 0;
                
                for (int i = 1; i < speedReadings.size(); i++) {
                    Location current = speedReadings.get(i);
                    Location previous = speedReadings.get(i - 1);
                    
                    double speed = current.hasSpeed() ? 
                        current.getSpeed() * 2.237 : 
                        calculateSpeedBetweenPoints(previous, current);
                    
                    if (speed >= 0 && speed < 150) { // Filter out unrealistic speeds
                        totalSpeed += speed;
                        validReadings++;
                    }
                }
                
                return validReadings > 0 ? totalSpeed / validReadings : 0.0;
            }

            private double calculateSpeedBetweenPoints(Location loc1, Location loc2) {
                float distance = loc1.distanceTo(loc2);
                long timeDiff = loc2.getTime() - loc1.getTime();
                
                if (timeDiff > 0) {
                    double speedMps = distance / (timeDiff / 1000.0);
                    return speedMps * 2.237; // MPH
                }
                
                return 0.0;
            }

            private void startAutoTrip(Location location) {
                currentTrip = new TripData();
                currentTrip.isAutoDetected = true;
                currentTrip.startTime = new Date();
                currentTrip.startLocation = location;
                
                showNotification("Trip started automatically", true);
                getAddressAsync(location, true);
            }

            private void endAutoTrip(Location location) {
                if (currentTrip == null) return;
                
                currentTrip.endTime = new Date();
                currentTrip.endLocation = location;
                
                // Calculate trip metrics
                calculateTripMetrics();
                
                // CRITICAL STOPLIGHT FIX - Apply filters before saving
                if (isValidTrip()) {
                    getAddressAsync(location, false);
                    // Trip will be saved after address lookup completes
                } else {
                    // Trip too short - discard
                    showNotification("Trip too short - Continuing monitoring", false);
                    currentTrip = null;
                    resetDetectionCounters();
                }
            }

            private void calculateTripMetrics() {
                if (currentTrip == null || currentTrip.pathPoints.size() < 2) {
                    currentTrip.totalDistance = 0.0;
                    return;
                }
                
                double totalDistance = 0.0;
                
                for (int i = 1; i < currentTrip.pathPoints.size(); i++) {
                    Location prev = currentTrip.pathPoints.get(i - 1);
                    Location curr = currentTrip.pathPoints.get(i);
                    totalDistance += prev.distanceTo(curr); // meters
                }
                
                // Convert to miles
                currentTrip.totalDistance = totalDistance * 0.000621371;
            }

            private boolean isValidTrip() {
                if (currentTrip == null) return false;
                
                // Check minimum distance (STOPLIGHT FIX)
                if (currentTrip.totalDistance < MIN_TRIP_DISTANCE_MILES) {
                    return false;
                }
                
                // Check minimum duration
                if (currentTrip.startTime != null && currentTrip.endTime != null) {
                    long duration = currentTrip.endTime.getTime() - currentTrip.startTime.getTime();
                    if (duration < MIN_TRIP_DURATION_MS) {
                        return false;
                    }
                }
                
                // Check minimum path points
                if (currentTrip.pathPoints.size() < 5) {
                    return false;
                }
                
                return true;
            }

            private void completeCurrentTrip() {
                if (currentTrip == null) return;
                
                // Calculate final metrics if not done
                if (currentTrip.totalDistance == 0.0) {
                    calculateTripMetrics();
                }
                
                // Apply validation filters
                if (isValidTrip()) {
                    // Save trip to storage
                    tripStorage.saveTrip(
                        currentTrip.id,
                        currentTrip.startTime,
                        currentTrip.endTime,
                        currentTrip.startAddress != null ? currentTrip.startAddress : "Unknown Location",
                        currentTrip.endAddress != null ? currentTrip.endAddress : "Unknown Location",
                        currentTrip.totalDistance,
                        "Personal", // Default to Personal category - user can reclassify later
                        currentTrip.isAutoDetected
                    );
                    
                    showNotification(String.format("Trip saved: %.1f miles", currentTrip.totalDistance), false);
                } else {
                    showNotification("Trip discarded - Too short for tracking", false);
                }
                
                currentTrip = null;
                resetDetectionCounters();
            }

            private void resetDetectionCounters() {
                consecutiveMovingReadings = 0;
                consecutiveStationaryReadings = 0;
                speedReadings.clear();
            }

            private void getAddressAsync(Location location, boolean isStartAddress) {
                new Thread(() -> {
                    try {
                        List<Address> addresses = geocoder.getFromLocation(
                            location.getLatitude(), 
                            location.getLongitude(), 
                            1
                        );
                        
                        if (addresses != null && !addresses.isEmpty()) {
                            Address address = addresses.get(0);
                            String addressText = formatAddress(address);
                            
                            if (currentTrip != null) {
                                if (isStartAddress) {
                                    currentTrip.startAddress = addressText;
                                } else {
                                    currentTrip.endAddress = addressText;
                                    // End address lookup complete - save trip
                                    completeCurrentTrip();
                                }
                            }
                        }
                    } catch (Exception e) {
                        // Fallback to coordinates
                        String coords = String.format("%.4f, %.4f", 
                            location.getLatitude(), location.getLongitude());
                        
                        if (currentTrip != null) {
                            if (isStartAddress) {
                                currentTrip.startAddress = coords;
                            } else {
                                currentTrip.endAddress = coords;
                                completeCurrentTrip();
                            }
                        }
                    }
                }).start();
            }

            private String formatAddress(Address address) {
                StringBuilder sb = new StringBuilder();
                
                if (address.getSubThoroughfare() != null) {
                    sb.append(address.getSubThoroughfare()).append(" ");
                }
                if (address.getThoroughfare() != null) {
                    sb.append(address.getThoroughfare()).append(", ");
                }
                if (address.getLocality() != null) {
                    sb.append(address.getLocality());
                }
                
                return sb.length() > 0 ? sb.toString() : "Unknown Location";
            }

            private void showNotification(String message, boolean isTripActive) {
                Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                    .setContentTitle("MileTracker Pro")
                    .setContentText(message)
                    .setSmallIcon(R.drawable.ic_launcher)
                    .setOngoing(true)
                    .setPriority(NotificationCompat.PRIORITY_LOW)
                    .build();

                startForeground(NOTIFICATION_ID, notification);
            }

            private void createNotificationChannel() {
                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                    NotificationChannel channel = new NotificationChannel(
                        CHANNEL_ID,
                        "Trip Detection",
                        NotificationManager.IMPORTANCE_LOW
                    );
                    channel.setDescription("Background trip detection service");
                    
                    NotificationManager manager = getSystemService(NotificationManager.class);
                    if (manager != null) {
                        manager.createNotificationChannel(channel);
                    }
                }
            }

            private void acquireWakeLock() {
                PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
                if (powerManager != null) {
                    wakeLock = powerManager.newWakeLock(
                        PowerManager.PARTIAL_WAKE_LOCK,
                        "MileTracker::TripDetection"
                    );
                    wakeLock.acquire();
                }
            }

            @Override
            public void onDestroy() {
                super.onDestroy();
                
                stopLocationUpdates();
                
                if (wakeLock != null && wakeLock.isHeld()) {
                    wakeLock.release();
                }
                
                // Save any active trip before shutdown
                if (currentTrip != null) {
                    completeCurrentTrip();
                }
            }

            @Override
            public IBinder onBind(Intent intent) {
                return null;
            }

            // Required LocationListener methods
            @Override
            public void onStatusChanged(String provider, int status, android.os.Bundle extras) {}

            @Override
            public void onProviderEnabled(String provider) {}

            @Override
            public void onProviderDisabled(String provider) {}
        }
        EOF

    - name: Create MainActivity.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;
        
        import android.Manifest;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.graphics.Color;
        import android.os.Bundle;
        import android.view.Gravity;
        import android.view.View;
        import android.widget.Button;
        import android.widget.LinearLayout;
        import android.widget.TextView;
        import android.widget.Toast;
        import android.widget.CompoundButton;
        import android.widget.Switch;
        import android.widget.ScrollView;
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import com.miletrackerpro.app.services.AutoDetectionService;
        import com.miletrackerpro.app.storage.TripStorage;
        
        public class MainActivity extends AppCompatActivity {
            private static final int LOCATION_PERMISSION_REQUEST = 1001;
            private TextView statusText;
            private TextView tripsCountText;
            private TextView tripsListText;
            private Button startManualButton;
            private Button stopManualButton;
            private Switch autoModeSwitch;
            private TripStorage tripStorage;
            private boolean isManualTripActive = false;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                
                tripStorage = new TripStorage(this);
                
                // Create UI programmatically
                createUI();
                
                // Request permissions
                requestLocationPermissions();
                
                // Update trip display
                updateTripDisplay();
            }
            
            private void createUI() {
                ScrollView scrollView = new ScrollView(this);
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setPadding(40, 60, 40, 40);
                mainLayout.setBackgroundColor(Color.parseColor("#f8fafc"));
                
                // Header
                TextView headerText = new TextView(this);
                headerText.setText("MileTracker Pro v4.2");
                headerText.setTextSize(28);
                headerText.setTextColor(Color.parseColor("#667eea"));
                headerText.setGravity(Gravity.CENTER);
                headerText.setPadding(0, 0, 0, 20);
                mainLayout.addView(headerText);
                
                TextView subtitleText = new TextView(this);
                subtitleText.setText("Enhanced Auto-Detection + Manual Controls\nWith Stoplight Fix • 4 Categories: Business/Medical/Charity/Personal");
                subtitleText.setTextSize(14);
                subtitleText.setTextColor(Color.parseColor("#718096"));
                subtitleText.setGravity(Gravity.CENTER);
                subtitleText.setPadding(0, 0, 0, 40);
                mainLayout.addView(subtitleText);
                
                // Auto-detection panel
                LinearLayout autoPanel = createPanel();
                
                TextView autoTitle = new TextView(this);
                autoTitle.setText("🚗 Auto-Detection");
                autoTitle.setTextSize(18);
                autoTitle.setTextColor(Color.parseColor("#1a202c"));
                autoTitle.setPadding(0, 0, 0, 15);
                autoPanel.addView(autoTitle);
                
                LinearLayout switchLayout = new LinearLayout(this);
                switchLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                TextView switchLabel = new TextView(this);
                switchLabel.setText("Enable Auto Trip Detection");
                switchLabel.setTextSize(16);
                switchLabel.setTextColor(Color.parseColor("#4a5568"));
                switchLabel.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));
                switchLayout.addView(switchLabel);
                
                autoModeSwitch = new Switch(this);
                autoModeSwitch.setOnCheckedChangeListener(this::toggleAutoMode);
                switchLayout.addView(autoModeSwitch);
                
                autoPanel.addView(switchLayout);
                mainLayout.addView(autoPanel);
                
                // Manual controls panel
                LinearLayout manualPanel = createPanel();
                
                TextView manualTitle = new TextView(this);
                manualTitle.setText("✋ Manual Controls");
                manualTitle.setTextSize(18);
                manualTitle.setTextColor(Color.parseColor("#1a202c"));
                manualTitle.setPadding(0, 0, 0, 15);
                manualPanel.addView(manualTitle);
                
                LinearLayout buttonLayout = new LinearLayout(this);
                buttonLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                startManualButton = createButton("🚀 START TRIP", Color.parseColor("#48bb78"));
                startManualButton.setOnClickListener(v -> startManualTrip());
                startManualButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));
                buttonLayout.addView(startManualButton);
                
                View spacer = new View(this);
                spacer.setLayoutParams(new LinearLayout.LayoutParams(20, LinearLayout.LayoutParams.WRAP_CONTENT));
                buttonLayout.addView(spacer);
                
                stopManualButton = createButton("🛑 STOP TRIP", Color.parseColor("#f56565"));
                stopManualButton.setOnClickListener(v -> stopManualTrip());
                stopManualButton.setEnabled(false);
                stopManualButton.setLayoutParams(new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1));
                buttonLayout.addView(stopManualButton);
                
                manualPanel.addView(buttonLayout);
                mainLayout.addView(manualPanel);
                
                // Status panel
                LinearLayout statusPanel = createPanel();
                
                TextView statusTitle = new TextView(this);
                statusTitle.setText("📍 Status");
                statusTitle.setTextSize(18);
                statusTitle.setTextColor(Color.parseColor("#1a202c"));
                statusTitle.setPadding(0, 0, 0, 15);
                statusPanel.addView(statusTitle);
                
                statusText = new TextView(this);
                statusText.setText("GPS permissions not granted");
                statusText.setTextSize(14);
                statusText.setTextColor(Color.parseColor("#718096"));
                statusText.setPadding(20, 15, 20, 15);
                statusText.setBackgroundColor(Color.parseColor("#edf2f7"));
                statusPanel.addView(statusText);
                
                mainLayout.addView(statusPanel);
                
                // Trip summary panel
                LinearLayout tripsPanel = createPanel();
                
                TextView tripsTitle = new TextView(this);
                tripsTitle.setText("📊 Trip History");
                tripsTitle.setTextSize(18);
                tripsTitle.setTextColor(Color.parseColor("#1a202c"));
                tripsTitle.setPadding(0, 0, 0, 15);
                tripsPanel.addView(tripsTitle);
                
                tripsCountText = new TextView(this);
                tripsCountText.setTextSize(16);
                tripsCountText.setTextColor(Color.parseColor("#667eea"));
                tripsCountText.setPadding(0, 0, 0, 10);
                tripsPanel.addView(tripsCountText);
                
                tripsListText = new TextView(this);
                tripsListText.setTextSize(14);
                tripsListText.setTextColor(Color.parseColor("#4a5568"));
                tripsListText.setPadding(20, 15, 20, 15);
                tripsListText.setBackgroundColor(Color.parseColor("#f7fafc"));
                tripsPanel.addView(tripsListText);
                
                mainLayout.addView(tripsPanel);
                
                scrollView.addView(mainLayout);
                setContentView(scrollView);
            }
            
            private LinearLayout createPanel() {
                LinearLayout panel = new LinearLayout(this);
                panel.setOrientation(LinearLayout.VERTICAL);
                panel.setBackgroundColor(Color.parseColor("#ffffff"));
                panel.setPadding(25, 25, 25, 25);
                
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT,
                    LinearLayout.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 0, 0, 20);
                panel.setLayoutParams(params);
                
                return panel;
            }
            
            private Button createButton(String text, int color) {
                Button button = new Button(this);
                button.setText(text);
                button.setTextColor(Color.WHITE);
                button.setBackgroundColor(color);
                button.setTextSize(16);
                button.setPadding(30, 20, 30, 20);
                return button;
            }
            
            private void requestLocationPermissions() {
                String[] permissions = {
                    Manifest.permission.ACCESS_FINE_LOCATION,
                    Manifest.permission.ACCESS_COARSE_LOCATION,
                    Manifest.permission.ACCESS_BACKGROUND_LOCATION
                };
                
                boolean allGranted = true;
                for (String permission : permissions) {
                    if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                        allGranted = false;
                        break;
                    }
                }
                
                if (!allGranted) {
                    ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST);
                } else {
                    statusText.setText("GPS permissions ready - Choose auto or manual mode");
                }
            }
            
            private void toggleAutoMode(CompoundButton buttonView, boolean isChecked) {
                if (isChecked) {
                    Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                    serviceIntent.setAction("START_AUTO_DETECTION");
                    startForegroundService(serviceIntent);
                    statusText.setText("Auto detection active - Will capture trips automatically");
                    startManualButton.setEnabled(false);
                } else {
                    Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                    serviceIntent.setAction("STOP_AUTO_DETECTION");
                    startService(serviceIntent);
                    statusText.setText("Auto detection stopped - Manual mode available");
                    startManualButton.setEnabled(true);
                }
            }
            
            private void startManualTrip() {
                if (!isManualTripActive) {
                    Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                    serviceIntent.setAction("START_MANUAL_TRIP");
                    startForegroundService(serviceIntent);
                    
                    isManualTripActive = true;
                    startManualButton.setEnabled(false);
                    stopManualButton.setEnabled(true);
                    autoModeSwitch.setEnabled(false);
                    statusText.setText("Manual trip started - Drive and press STOP when complete");
                }
            }
            
            private void stopManualTrip() {
                if (isManualTripActive) {
                    Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                    serviceIntent.setAction("STOP_MANUAL_TRIP");
                    startService(serviceIntent);
                    
                    isManualTripActive = false;
                    startManualButton.setEnabled(true);
                    stopManualButton.setEnabled(false);
                    autoModeSwitch.setEnabled(true);
                    statusText.setText("Manual trip completed and saved");
                    
                    updateTripDisplay();
                }
            }
            
            private void updateTripDisplay() {
                int tripCount = tripStorage.getTripCount();
                tripsCountText.setText("Total Trips: " + tripCount);
                
                String recentTrips = tripStorage.getRecentTripsText(5);
                if (recentTrips.isEmpty()) {
                    tripsListText.setText("No trips recorded yet.\n\nEnable auto-detection or start a manual trip to begin tracking your mileage.");
                } else {
                    tripsListText.setText(recentTrips);
                }
            }
            
            @Override
            protected void onResume() {
                super.onResume();
                updateTripDisplay();
            }
        }
        EOF

    - name: Create TripStorage.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
        package com.miletrackerpro.app.storage;

        import android.content.Context;
        import android.content.SharedPreferences;
        import java.text.SimpleDateFormat;
        import java.util.Date;
        import java.util.Locale;

        public class TripStorage {
            private static final String PREFS_NAME = "MileTrackerTrips";
            private static final String TRIP_COUNT_KEY = "trip_count";
            private static final String TRIP_PREFIX = "trip_";
            
            private SharedPreferences prefs;
            private SimpleDateFormat dateFormat;
            
            public TripStorage(Context context) {
                prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                dateFormat = new SimpleDateFormat("MMM dd, HH:mm", Locale.getDefault());
            }
            
            public void saveTrip(String tripId, Date startTime, Date endTime, 
                               String startLocation, String endLocation, 
                               double distance, String category, boolean isAutoDetected) {
                
                SharedPreferences.Editor editor = prefs.edit();
                
                int tripCount = getTripCount();
                tripCount++;
                
                String tripKey = TRIP_PREFIX + tripCount;
                String tripData = String.format(Locale.getDefault(),
                    "%s|%s|%s|%s|%.2f|%s|%s",
                    dateFormat.format(startTime),
                    startLocation,
                    endLocation,
                    category,
                    distance,
                    isAutoDetected ? "Auto" : "Manual",
                    tripId
                );
                
                editor.putString(tripKey, tripData);
                editor.putInt(TRIP_COUNT_KEY, tripCount);
                editor.apply();
            }
            
            public int getTripCount() {
                return prefs.getInt(TRIP_COUNT_KEY, 0);
            }
            
            public String getRecentTripsText(int maxTrips) {
                StringBuilder sb = new StringBuilder();
                int tripCount = getTripCount();
                int displayCount = Math.min(maxTrips, tripCount);
                
                for (int i = tripCount; i > tripCount - displayCount; i--) {
                    String tripKey = TRIP_PREFIX + i;
                    String tripData = prefs.getString(tripKey, null);
                    
                    if (tripData != null) {
                        String[] parts = tripData.split("\\|");
                        if (parts.length >= 6) {
                            sb.append(String.format(Locale.getDefault(),
                                "%s • %.1f mi • %s\nFrom: %s\nTo: %s\n\n",
                                parts[0], // date
                                Double.parseDouble(parts[4]), // distance
                                parts[5], // auto/manual
                                parts[1], // start location
                                parts[2]  // end location
                            ));
                        }
                    }
                }
                
                return sb.toString().trim();
            }
        }
        EOF

    - name: Create app icon
      run: |
        # Create a simple app icon (placeholder)
        cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="24dp"
            android:height="24dp"
            android:viewportWidth="24"
            android:viewportHeight="24">
            <path
                android:fillColor="#667eea"
                android:pathData="M18.92,6.01C18.72,5.42 18.16,5 17.5,5h-11C5.84,5 5.28,5.42 5.08,6.01L3,12v8c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-1h12v1c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-8L18.92,6.01zM6.5,16C5.67,16 5,15.33 5,14.5S5.67,13 6.5,13S8,13.67 8,14.5S7.33,16 6.5,16zM17.5,16c-0.83,0 -1.5,-0.67 -1.5,-1.5s0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5S18.33,16 17.5,16zM5,11l1.5,-4.5h11L19,11H5z"/>
        </vector>
        EOF

    - name: Build APK
      run: |
        cd android
        chmod +x gradlew
        ./gradlew assembleRelease --no-daemon --stacktrace

    - name: Upload APK
      uses: actions/upload-artifact@v3
      with:
        name: MileTracker-Pro-Enhanced-v4.2
        path: android/app/build/outputs/apk/release/app-release.apk

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v4.2-enhanced
        release_name: MileTracker Pro v4.2 - Enhanced with Stoplight Fix
        body: |
          ## MileTracker Pro v4.2 - Enhanced Auto-Detection + Manual Controls
          
          **🎯 STOPLIGHT FIX IMPLEMENTED:**
          - ✅ Minimum trip distance: 0.5 miles (applies to TOTAL trip, not segments)
          - ✅ Minimum trip duration: 2 minutes (prevents false triggers)
          - ✅ Enhanced speed averaging (filters GPS noise)
          - ✅ Consecutive reading requirements (3 to start, 4 to stop)
          - ✅ Stoplight delays don't end trips - only final destinations do
          
          **Trip Categories:**
          - ✅ Business, Medical, Charity, Personal (default: Personal for easy reclassification)
          
          **Features:**
          - ✅ Auto-detection toggle with professional algorithm
          - ✅ Manual start/stop controls for full user control
          - ✅ Real address lookup using Android Geocoder
          - ✅ Trip history viewing with scrollable list
          - ✅ Background GPS service with notifications
          - ✅ Battery-optimized location tracking
          
          **How Stoplight Fix Works:**
          - Tracks continuously during your drive (including stoplight delays)
          - Only applies distance filter when trip ends (at your destination)
          - Short stops don't trigger trip completion - only extended stationary periods
          
          **Technical:**
          - Native Android GPS service with foreground notifications
          - Professional trip validation and filtering
          - Enhanced UI with both auto and manual modes
          - Local storage using Android SharedPreferences
          
          **Installation:**
          Download and install the APK file on your Android device.
        draft: false
        prerelease: false
