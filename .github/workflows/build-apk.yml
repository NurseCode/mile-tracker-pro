name: FUNCTIONAL APP WITH OKHTTP AUTH - v4.9.91

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean and create Android project structure
        run: |
          rm -rf android
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/{auth,storage,services,utils,models}
          mkdir -p android/app/src/main/res/{layout,values,xml,mipmap-hdpi,mipmap-mdpi,mipmap-xhdpi,mipmap-xxhdpi,mipmap-xxxhdpi}
          mkdir -p android/gradle/wrapper

      - name: Create Gradle wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create Gradle wrapper JAR
        run: |
          mkdir -p android/gradle/wrapper
          curl -L https://github.com/gradle/gradle/raw/v8.6.0/gradle/wrapper/gradle-wrapper.jar -o android/gradle/wrapper/gradle-wrapper.jar

      - name: Create gradlew script
        run: |
          cat > android/gradlew << 'EOF'
          #!/bin/sh

          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`

          DEFAULT_JVM_OPTS="-Xmx1024m -Xms256m"

          die () {
              echo
              echo "$*"
              echo
              exit 1
          }

          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
          fi

          SAVED="`pwd`"
          cd "`dirname \"$0\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null

          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar

          exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF

          chmod +x android/gradlew

      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerPro'
          include ':app'
          EOF

      - name: Create gradle.properties
        run: |
          cat > android/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.enableR8.fullMode=false
          EOF

      - name: Create root build.gradle
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 24
                  compileSdkVersion = 34
                  targetSdkVersion = 34
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.1.4")
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create consistent signing keystore
        run: |
          cd android/app
          keytool -genkey -v -keystore miletracker.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 -storepass miletracker123 -keypass miletracker123 -dname "CN=MileTracker Pro, OU=Development, O=MileTracker, L=City, S=State, C=US"

      - name: Create app/build.gradle with OkHttp dependency
        run: |
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 34

              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 34
                  versionCode 49091
                  versionName "4.9.91-okhttp-auth"
              }

              signingConfigs {
                  release {
                      storeFile file("miletracker.keystore")
                      storePassword "miletracker123"
                      keyAlias "miletracker"
                      keyPassword "miletracker123"
                  }
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      debuggable false
                      signingConfig signingConfigs.release
                  }
              }

              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }

              packagingOptions {
                  pickFirst '**/kotlin-stdlib-*.jar'
                  pickFirst '**/kotlin-stdlib-jdk*.jar'
                  exclude 'META-INF/kotlin-stdlib.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk7.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk8.kotlin_module'
              }
          }

          configurations.all {
              resolutionStrategy {
                  force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.android.gms:play-services-location:21.0.1'
              implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
              
              // OkHttp for proven authentication functionality
              implementation 'com.squareup.okhttp3:okhttp:4.12.0'
              implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
          }
          EOF

      - name: Create AndroidManifest.xml
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">

              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              <uses-permission android:name="android.permission.READ_PHONE_STATE" />

              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="MileTracker Pro"
                  android:theme="@style/AppTheme"
                  android:usesCleartextTraffic="false">

                  <activity
                      android:name=".auth.AuthActivity"
                      android:exported="true"
                      android:launchMode="singleTop"
                      android:screenOrientation="portrait">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>

                  <activity
                      android:name=".MainActivity"
                      android:exported="false"
                      android:launchMode="singleTop"
                      android:screenOrientation="portrait">
                  </activity>

                  <activity
                      android:name=".auth.DataRecoveryActivity"
                      android:exported="false"
                      android:launchMode="singleTop"
                      android:screenOrientation="portrait">
                  </activity>

                  <service
                      android:name=".services.AutoDetectionService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />

                  <service
                      android:name=".services.ManualTripService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />

                  <provider
                      android:name="androidx.core.content.FileProvider"
                      android:authorities="${applicationId}.fileprovider"
                      android:exported="false"
                      android:grantUriPermissions="true">
                      <meta-data
                          android:name="android.support.FILE_PROVIDER_PATHS"
                          android:resource="@xml/file_paths" />
                  </provider>

              </application>
          </manifest>
          EOF

      - name: Create file paths config
        run: |
          mkdir -p android/app/src/main/res/xml
          cat > android/app/src/main/res/xml/file_paths.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <paths xmlns:android="http://schemas.android.com/apk/res/android">
              <files-path name="files" path="." />
              <cache-path name="cache" path="." />
              <external-files-path name="external_files" path="." />
              <external-cache-path name="external_cache" path="." />
          </paths>
          EOF

      - name: Create app resources
        run: |
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667eea</item>
                  <item name="colorPrimaryDark">#5a6fd8</item>
                  <item name="colorAccent">#667eea</item>
              </style>
          </resources>
          EOF

          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
              <string name="auto_detection_notification">Auto trip detection active</string>
              <string name="trip_in_progress_notification">Trip in progress</string>
              <string name="manual_trip_notification">Manual trip recording</string>
          </resources>
          EOF

          cat > android/app/src/main/res/values/colors.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <color name="primary">#667eea</color>
              <color name="primary_dark">#5a6fd8</color>
              <color name="accent">#667eea</color>
              <color name="white">#FFFFFF</color>
              <color name="black">#000000</color>
              <color name="success">#28a745</color>
              <color name="danger">#dc3545</color>
              <color name="warning">#ffc107</color>
              <color name="tab_active">#667eea</color>
              <color name="tab_inactive">#9CA3AF</color>
              <color name="background">#f5f5f5</color>
              <color name="card_background">#ffffff</color>
              <color name="text_primary">#495057</color>
              <color name="text_secondary">#6C757D</color>
          </resources>
          EOF

      - name: Create DeviceIdentification utility
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/utils/DeviceIdentification.java << 'EOF'
          package com.miletrackerpro.app.utils;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.os.Build;
          import android.provider.Settings;
          import android.util.Log;

          import java.security.MessageDigest;
          import java.util.UUID;

          public class DeviceIdentification {
              private static final String TAG = "DeviceIdentification";
              private static final String PREFS_NAME = "DeviceIdentificationPrefs";
              private static final String STABLE_DEVICE_ID_KEY = "stable_device_id";
              private static final String USER_ID_KEY = "user_id";

              public static String getStableDeviceId(Context context) {
                  SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  String stableId = prefs.getString(STABLE_DEVICE_ID_KEY, null);

                  if (stableId == null) {
                      stableId = generateStableDeviceId(context);
                      prefs.edit().putString(STABLE_DEVICE_ID_KEY, stableId).apply();
                      Log.d(TAG, "Generated new stable device ID: " + stableId);
                  }

                  return stableId;
              }

              public static String getUserId(Context context) {
                  SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  String userId = prefs.getString(USER_ID_KEY, null);

                  if (userId == null) {
                      userId = generateUserId(context);
                      prefs.edit().putString(USER_ID_KEY, userId).apply();
                      Log.d(TAG, "Generated new user ID: " + userId);
                  }

                  return userId;
              }

              private static String generateStableDeviceId(Context context) {
                  try {
                      String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                      String deviceInfo = androidId + "-" + Build.MODEL + "-" + Build.MANUFACTURER;

                      MessageDigest digest = MessageDigest.getInstance("SHA-256");
                      byte[] hash = digest.digest(deviceInfo.getBytes());

                      StringBuilder hexString = new StringBuilder();
                      for (byte b : hash) {
                          String hex = Integer.toHexString(0xff & b);
                          if (hex.length() == 1) {
                              hexString.append('0');
                          }
                          hexString.append(hex);
                      }

                      return "device-" + hexString.toString().substring(0, 16);

                  } catch (Exception e) {
                      Log.e(TAG, "Error generating stable device ID", e);
                      return "device-" + UUID.randomUUID().toString().replace("-", "").substring(0, 16);
                  }
              }

              private static String generateUserId(Context context) {
                  try {
                      String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                      String userInfo = androidId + "-user-" + Build.MODEL;

                      MessageDigest digest = MessageDigest.getInstance("SHA-256");
                      byte[] hash = digest.digest(userInfo.getBytes());

                      StringBuilder hexString = new StringBuilder();
                      for (byte b : hash) {
                          String hex = Integer.toHexString(0xff & b);
                          if (hex.length() == 1) {
                              hexString.append('0');
                          }
                          hexString.append(hex);
                      }

                      return "user-" + hexString.toString().substring(0, 12);

                  } catch (Exception e) {
                      Log.e(TAG, "Error generating user ID", e);
                      return "user-" + UUID.randomUUID().toString().replace("-", "").substring(0, 12);
                  }
              }
          }
          EOF

      - name: Create red car icon
        run: |
          mkdir -p android/app/src/main/res/drawable
          cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="24dp"
              android:height="24dp"
              android:viewportWidth="24.0"
              android:viewportHeight="24.0">
              <path
                  android:fillColor="#dc3545"
                  android:pathData="M18.92,6.01C18.72,5.42 18.16,5 17.5,5h-11C5.84,5 5.28,5.42 5.08,6.01L3,12v8c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-1h12v1c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-8L18.92,6.01zM6.5,16C5.67,16 5,15.33 5,14.5S5.67,13 6.5,13S8,13.67 8,14.5S7.33,16 6.5,16zM17.5,16c-0.83,0 -1.5,-0.67 -1.5,-1.5s0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5S18.33,16 17.5,16zM5,11l1.5,-4.5h11L19,11H5z"/>
          </vector>
          EOF

      - name: Create OkHttp-based UserAuthManager (proven working)
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/auth/UserAuthManager.java << 'EOF'
          package com.miletrackerpro.app.auth;
          
          import android.content.Context;
          import android.content.SharedPreferences;
          import android.net.ConnectivityManager;
          import android.net.NetworkInfo;
          import android.util.Log;
          import java.io.*;
          import java.net.HttpURLConnection;
          import java.net.URL;
          import org.json.JSONObject;
          
          // OkHttp imports
          import okhttp3.*;
          import okhttp3.logging.HttpLoggingInterceptor;
          import java.util.concurrent.TimeUnit;
          
          public class UserAuthManager {
              private static final String TAG = "UserAuthManager";
              private static final String PREFS_NAME = "MileTrackerAuth";
              private static final String KEY_USER_EMAIL = "user_email";
              private static final String KEY_AUTH_TOKEN = "auth_token";
              private static final String KEY_USER_ID = "user_id";
              
              private Context context;
              private SharedPreferences prefs;
              private OkHttpClient okHttpClient;
              
              // API endpoints - corrected production URL
              private static final String API_BASE_URL = "https://mileage-tracker-codenurse.replit.app";
              private static final String LOGIN_ENDPOINT = "/api/auth/login";
              private static final String REGISTER_ENDPOINT = "/api/register";
              
              public UserAuthManager(Context context) {
                  this.context = context;
                  this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  
                  // Initialize OkHttp with logging
                  HttpLoggingInterceptor logging = new HttpLoggingInterceptor(message -> {
                      Log.d(TAG, "OkHttp: " + message);
                  });
                  logging.setLevel(HttpLoggingInterceptor.Level.HEADERS);
                  
                  this.okHttpClient = new OkHttpClient.Builder()
                      .addInterceptor(logging)
                      .connectTimeout(15, TimeUnit.SECONDS)
                      .readTimeout(15, TimeUnit.SECONDS)
                      .writeTimeout(15, TimeUnit.SECONDS)
                      .build();
              }
              
              public boolean loginWithOkHttp(String email, String password) {
                  Log.d(TAG, "🔐 OKHTTP LOGIN for: '" + email + "'");
                  Log.d(TAG, "Password received: '" + password + "' (length: " + (password != null ? password.length() : "null") + ")");
                  Log.d(TAG, "Target URL: " + API_BASE_URL + LOGIN_ENDPOINT);
                  
                  // Log network state
                  logNetworkState();
                  
                  try {
                      // Create JSON payload
                      JSONObject loginData = new JSONObject();
                      loginData.put("email", email);
                      loginData.put("password", password);
                      Log.d(TAG, "JSON payload: " + loginData.toString());
                      
                      // Create request body
                      RequestBody body = RequestBody.create(
                          loginData.toString(), 
                          MediaType.get("application/json; charset=utf-8")
                      );
                      
                      // Build request
                      Request request = new Request.Builder()
                          .url(API_BASE_URL + LOGIN_ENDPOINT)
                          .post(body)
                          .addHeader("Content-Type", "application/json")
                          .addHeader("User-Agent", "MileTrackerPro-OkHttp/4.9.91 (Android)")
                          .addHeader("X-HTTP-Stack", "OkHttp")
                          .build();
                      
                      Log.d(TAG, "🌐 OkHttp Request URL: " + request.url());
                      Log.d(TAG, "🌐 OkHttp Request Headers: " + request.headers());
                      
                      // Execute request
                      try (Response response = okHttpClient.newCall(request).execute()) {
                          Log.d(TAG, "🌐 OkHttp Response code: " + response.code());
                          Log.d(TAG, "🌐 OkHttp Response message: " + response.message());
                          Log.d(TAG, "🌐 OkHttp Response headers: " + response.headers());
                          
                          if (response.isSuccessful()) {
                              String responseString = response.body().string();
                              Log.d(TAG, "🌐 OkHttp Response body: " + responseString);
                              
                              // Parse response
                              JSONObject responseJson = new JSONObject(responseString);
                              boolean success = responseJson.optBoolean("success", false);
                              Log.d(TAG, "OkHttp response success field: " + success);
                              
                              if (success) {
                                  // Save authentication data
                                  String token = responseJson.optString("token", "");
                                  JSONObject userObj = responseJson.optJSONObject("user");
                                  String userId = userObj != null ? userObj.optString("id", "") : "";
                                  
                                  Log.d(TAG, "OkHttp token received: " + (token.isEmpty() ? "empty" : "[" + token.length() + " chars]"));
                                  Log.d(TAG, "OkHttp user ID: '" + userId + "'");
                                  
                                  prefs.edit()
                                       .putString(KEY_USER_EMAIL, email)
                                       .putString(KEY_AUTH_TOKEN, token)
                                       .putString(KEY_USER_ID, userId)
                                       .apply();
                                  
                                  Log.d(TAG, "✅ OKHTTP login successful for: " + email);
                                  return true;
                              } else {
                                  String message = responseJson.optString("message", "Unknown error");
                                  Log.d(TAG, "❌ OKHTTP login failed - success=false, message: " + message);
                              }
                          } else {
                              String errorBody = "";
                              try {
                                  errorBody = response.body().string();
                              } catch (Exception ex) {
                                  Log.d(TAG, "Could not read OkHttp error response: " + ex.getMessage());
                              }
                              Log.d(TAG, "❌ OKHTTP login failed - HTTP " + response.code() + ", Error body: " + errorBody);
                          }
                      }
                      
                      return false;
                      
                  } catch (Exception e) {
                      Log.e(TAG, "OKHTTP login exception: " + e.getClass().getSimpleName() + ": " + e.getMessage(), e);
                      return false;
                  }
              }
              
              public boolean registerWithOkHttp(String email, String password, String name) {
                  Log.d(TAG, "📝 OKHTTP registration for: " + email);
                  
                  try {
                      // Create JSON payload
                      JSONObject registerData = new JSONObject();
                      registerData.put("email", email);
                      registerData.put("password", password);
                      registerData.put("name", name);
                      
                      // Create request body
                      RequestBody body = RequestBody.create(
                          registerData.toString(), 
                          MediaType.get("application/json; charset=utf-8")
                      );
                      
                      // Build request
                      Request request = new Request.Builder()
                          .url(API_BASE_URL + REGISTER_ENDPOINT)
                          .post(body)
                          .addHeader("Content-Type", "application/json")
                          .addHeader("User-Agent", "MileTrackerPro-OkHttp/4.9.91 (Android)")
                          .addHeader("X-HTTP-Stack", "OkHttp")
                          .build();
                      
                      // Execute request
                      try (Response response = okHttpClient.newCall(request).execute()) {
                          Log.d(TAG, "OKHTTP registration response code: " + response.code());
                          
                          if (response.isSuccessful()) {
                              String responseString = response.body().string();
                              Log.d(TAG, "OKHTTP registration response: " + responseString);
                              
                              // Parse response
                              JSONObject responseJson = new JSONObject(responseString);
                              if (responseJson.optBoolean("success", false)) {
                                  // Save authentication data
                                  String token = responseJson.optString("token", "");
                                  JSONObject userObj = responseJson.optJSONObject("user");
                                  String userId = userObj != null ? userObj.optString("id", "") : "";
                                  
                                  prefs.edit()
                                       .putString(KEY_USER_EMAIL, email)
                                       .putString(KEY_AUTH_TOKEN, token)
                                       .putString(KEY_USER_ID, userId)
                                       .apply();
                                  
                                  Log.d(TAG, "✅ OKHTTP registration successful for: " + email);
                                  return true;
                              }
                          }
                          
                          Log.d(TAG, "❌ OKHTTP registration failed - HTTP " + response.code());
                          return false;
                      }
                      
                  } catch (Exception e) {
                      Log.e(TAG, "OKHTTP registration error: " + e.getMessage(), e);
                      return false;
                  }
              }
              
              public String getNetworkDiagnostics() {
                  StringBuilder info = new StringBuilder();
                  try {
                      ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                      NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
                      
                      if (activeNetwork != null) {
                          info.append("Network Type: ").append(activeNetwork.getTypeName()).append("\n");
                          info.append("Connected: ").append(activeNetwork.isConnected()).append("\n");
                          info.append("Available: ").append(activeNetwork.isAvailable()).append("\n");
                          info.append("HTTP Stack: OkHttp enabled\n");
                      } else {
                          info.append("No active network");
                      }
                  } catch (Exception e) {
                      info.append("Network check failed: ").append(e.getMessage());
                  }
                  return info.toString();
              }
              
              private void logNetworkState() {
                  try {
                      ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
                      NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
                      
                      if (activeNetwork != null) {
                          Log.d(TAG, "🌐 Network Type: " + activeNetwork.getTypeName());
                          Log.d(TAG, "🌐 Network State: " + activeNetwork.getState());
                          Log.d(TAG, "🌐 Network Connected: " + activeNetwork.isConnected());
                          Log.d(TAG, "🌐 Network Available: " + activeNetwork.isAvailable());
                          Log.d(TAG, "🌐 HTTP Stack: OkHttp v4.12.0");
                      } else {
                          Log.d(TAG, "🌐 No active network detected");
                      }
                  } catch (Exception e) {
                      Log.d(TAG, "🌐 Network state check failed: " + e.getMessage());
                  }
              }
              
              public boolean isLoggedIn() {
                  String email = prefs.getString(KEY_USER_EMAIL, "");
                  String token = prefs.getString(KEY_AUTH_TOKEN, "");
                  boolean loggedIn = !email.isEmpty() && !token.isEmpty();
                  Log.d(TAG, "isLoggedIn check: email=" + (!email.isEmpty()) + ", token=" + (!token.isEmpty()) + " -> " + loggedIn);
                  return loggedIn;
              }
              
              public String getCurrentUserEmail() {
                  return prefs.getString(KEY_USER_EMAIL, "");
              }
              
              public String getAuthToken() {
                  return prefs.getString(KEY_AUTH_TOKEN, "");
              }
              
              public String getUserId() {
                  return prefs.getString(KEY_USER_ID, "");
              }
              
              public void logout() {
                  Log.d(TAG, "Logging out user");
                  prefs.edit().clear().apply();
              }
          }
          EOF

      - name: Create AuthActivity with OkHttp authentication
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/auth/AuthActivity.java << 'EOF'
          package com.miletrackerpro.app.auth;
          
          import android.content.Intent;
          import android.os.Bundle;
          import android.util.Log;
          import android.view.View;
          import android.widget.*;
          import androidx.appcompat.app.AppCompatActivity;
          import com.miletrackerpro.app.MainActivity;
          
          public class AuthActivity extends AppCompatActivity {
              private static final String TAG = "AuthActivity";
              
              private UserAuthManager authManager;
              private EditText emailInput;
              private EditText passwordInput;
              private Button loginButton;
              private Button registerButton;
              private Button debugButton;
              private TextView statusText;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  Log.d(TAG, "🚗 MileTracker Pro v4.9.91 Starting (OkHttp Auth)");
                  
                  // Initialize authentication manager
                  authManager = new UserAuthManager(this);
                  
                  // Check if user is already authenticated
                  if (authManager.isLoggedIn()) {
                      String currentUserEmail = authManager.getCurrentUserEmail();
                      Log.d(TAG, "User already authenticated: " + currentUserEmail);
                      goToMainApp();
                      return;
                  }
                  
                  Log.d(TAG, "User not authenticated, showing login screen");
                  createAuthenticationInterface();
              }
              
              private void createAuthenticationInterface() {
                  // Create main layout
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(40, 60, 40, 40);
                  mainLayout.setBackgroundColor(0xFFF8F9FA);
                  
                  // App title
                  TextView titleText = new TextView(this);
                  titleText.setText("🚗 MileTracker Pro");
                  titleText.setTextSize(28);
                  titleText.setTextColor(0xFF667eea);
                  titleText.setGravity(android.view.Gravity.CENTER);
                  LinearLayout.LayoutParams titleParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  titleParams.setMargins(0, 0, 0, 30);
                  titleText.setLayoutParams(titleParams);
                  mainLayout.addView(titleText);
                  
                  // Subtitle
                  TextView subtitleText = new TextView(this);
                  subtitleText.setText("Professional Mileage Tracking\nOkHttp Authentication v4.9.91\nProven working authentication");
                  subtitleText.setTextSize(16);
                  subtitleText.setTextColor(0xFF6C757D);
                  subtitleText.setGravity(android.view.Gravity.CENTER);
                  LinearLayout.LayoutParams subtitleParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  subtitleParams.setMargins(0, 0, 0, 40);
                  subtitleText.setLayoutParams(subtitleParams);
                  mainLayout.addView(subtitleText);
                  
                  // Email input
                  emailInput = new EditText(this);
                  emailInput.setHint("Email Address");
                  emailInput.setText("pcates@catesconsultinggroup.com");
                  emailInput.setInputType(android.text.InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
                  emailInput.setPadding(20, 20, 20, 20);
                  emailInput.setBackgroundColor(0xFFFFFFFF);
                  LinearLayout.LayoutParams emailParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  emailParams.setMargins(0, 0, 0, 15);
                  emailInput.setLayoutParams(emailParams);
                  mainLayout.addView(emailInput);
                  
                  // Password input
                  passwordInput = new EditText(this);
                  passwordInput.setHint("Password");
                  passwordInput.setText("password123");
                  passwordInput.setInputType(android.text.InputType.TYPE_CLASS_TEXT | android.text.InputType.TYPE_TEXT_VARIATION_PASSWORD);
                  passwordInput.setPadding(20, 20, 20, 20);
                  passwordInput.setBackgroundColor(0xFFFFFFFF);
                  LinearLayout.LayoutParams passwordParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  passwordParams.setMargins(0, 0, 0, 25);
                  passwordInput.setLayoutParams(passwordParams);
                  mainLayout.addView(passwordInput);
                  
                  // Login button
                  loginButton = new Button(this);
                  loginButton.setText("🔑 Login (OkHttp)");
                  loginButton.setBackgroundColor(0xFF667eea);
                  loginButton.setTextColor(0xFFFFFFFF);
                  loginButton.setTextSize(18);
                  LinearLayout.LayoutParams loginParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  loginParams.setMargins(0, 0, 0, 15);
                  loginButton.setLayoutParams(loginParams);
                  loginButton.setOnClickListener(v -> handleLogin());
                  mainLayout.addView(loginButton);
                  
                  // Register button
                  registerButton = new Button(this);
                  registerButton.setText("📝 Create Account");
                  registerButton.setBackgroundColor(0xFF28a745);
                  registerButton.setTextColor(0xFFFFFFFF);
                  registerButton.setTextSize(16);
                  LinearLayout.LayoutParams registerParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  registerParams.setMargins(0, 0, 0, 20);
                  registerButton.setLayoutParams(registerParams);
                  registerButton.setOnClickListener(v -> handleRegistration());
                  mainLayout.addView(registerButton);
                  
                  // Debug button
                  debugButton = new Button(this);
                  debugButton.setText("🔍 Show Network Info");
                  debugButton.setBackgroundColor(0xFF17a2b8);
                  debugButton.setTextColor(0xFFFFFFFF);
                  debugButton.setTextSize(14);
                  LinearLayout.LayoutParams debugParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  debugParams.setMargins(0, 20, 0, 10);
                  debugButton.setLayoutParams(debugParams);
                  debugButton.setOnClickListener(v -> showNetworkInfo());
                  mainLayout.addView(debugButton);
                  
                  // Status text
                  statusText = new TextView(this);
                  statusText.setText("Ready for authentication");
                  statusText.setTextSize(14);
                  statusText.setTextColor(0xFF6C757D);
                  statusText.setGravity(android.view.Gravity.CENTER);
                  LinearLayout.LayoutParams statusParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  statusParams.setMargins(0, 20, 0, 0);
                  statusText.setLayoutParams(statusParams);
                  mainLayout.addView(statusText);
                  
                  setContentView(mainLayout);
              }
              
              private void handleLogin() {
                  String email = emailInput.getText().toString().trim();
                  String password = passwordInput.getText().toString().trim();
                  
                  if (email.isEmpty() || password.isEmpty()) {
                      Toast.makeText(this, "Please enter both email and password", Toast.LENGTH_SHORT).show();
                      return;
                  }
                  
                  // Show loading message
                  statusText.setText("OkHttp login attempt...");
                  loginButton.setEnabled(false);
                  
                  // Run login in background thread using OkHttp
                  new Thread(() -> {
                      Log.d(TAG, "Starting OkHttp login thread...");
                      boolean loginResult = authManager.loginWithOkHttp(email, password);
                      Log.d(TAG, "OkHttp login result: " + loginResult);
                      
                      // Update UI on main thread
                      runOnUiThread(() -> {
                          loginButton.setEnabled(true);
                          if (loginResult) {
                              statusText.setText("Login successful! 🚗");
                              Toast.makeText(this, "Welcome back! (OkHttp Success)", Toast.LENGTH_SHORT).show();
                              goToMainApp();
                          } else {
                              statusText.setText("Login failed - check logs");
                              Toast.makeText(this, "Login failed. Check logs for details.", Toast.LENGTH_LONG).show();
                          }
                      });
                  }).start();
              }
              
              private void handleRegistration() {
                  String email = emailInput.getText().toString().trim();
                  String password = passwordInput.getText().toString().trim();
                  
                  if (email.isEmpty() || password.isEmpty()) {
                      Toast.makeText(this, "Please enter both email and password", Toast.LENGTH_SHORT).show();
                      return;
                  }
                  
                  // Show loading message
                  statusText.setText("Creating account (OkHttp)...");
                  registerButton.setEnabled(false);
                  
                  // Run registration in background thread
                  new Thread(() -> {
                      boolean registrationResult = authManager.registerWithOkHttp(email, password, "User");
                      
                      // Update UI on main thread
                      runOnUiThread(() -> {
                          registerButton.setEnabled(true);
                          if (registrationResult) {
                              statusText.setText("Account created! 🎉");
                              Toast.makeText(this, "Account created successfully! (OkHttp)", Toast.LENGTH_SHORT).show();
                              goToMainApp();
                          } else {
                              statusText.setText("Registration failed");
                              Toast.makeText(this, "Registration failed. Check logs.", Toast.LENGTH_LONG).show();
                          }
                      });
                  }).start();
              }
              
              private void showNetworkInfo() {
                  new Thread(() -> {
                      String networkInfo = authManager.getNetworkDiagnostics();
                      runOnUiThread(() -> {
                          statusText.setText(networkInfo);
                          Toast.makeText(this, networkInfo, Toast.LENGTH_LONG).show();
                          Log.d(TAG, "NETWORK INFO: " + networkInfo);
                      });
                  }).start();
              }
              
              private void goToMainApp() {
                  Intent intent = new Intent(this, MainActivity.class);
                  startActivity(intent);
                  finish();
              }
          }
          EOF
      - name: Create MainActivity
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.content.Intent;
          import android.os.Bundle;
          import android.widget.*;
          import androidx.appcompat.app.AppCompatActivity;
          import com.miletrackerpro.app.auth.AuthActivity;
          import com.miletrackerpro.app.auth.UserAuthManager;
          
          public class MainActivity extends AppCompatActivity {
              private static final String TAG = "MainActivity";
              
              private UserAuthManager authManager;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  authManager = new UserAuthManager(this);
                  
                  // Check authentication
                  if (!authManager.isLoggedIn()) {
                      goToAuth();
                      return;
                  }
                  
                  createMainInterface();
              }
              
              private void createMainInterface() {
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(40, 60, 40, 40);
                  mainLayout.setBackgroundColor(0xFFF8F9FA);
                  
                  TextView welcomeText = new TextView(this);
                  welcomeText.setText("Welcome to MileTracker Pro!\\n\\nUser: " + authManager.getCurrentUserEmail() + "\\n\\nOkHttp Auth Successful v4.9.91\\n\\nFull app functionality ready for implementation...");
                  welcomeText.setTextSize(18);
                  welcomeText.setTextColor(0xFF000000);
                  welcomeText.setGravity(android.view.Gravity.CENTER);
                  mainLayout.addView(welcomeText);
                  
                  Button logoutButton = new Button(this);
                  logoutButton.setText("Logout");
                  logoutButton.setBackgroundColor(0xFFDC3545);
                  logoutButton.setTextColor(0xFFFFFFFF);
                  logoutButton.setOnClickListener(v -> {
                      authManager.logout();
                      goToAuth();
                  });
                  
                  LinearLayout.LayoutParams logoutParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  logoutParams.setMargins(0, 40, 0, 0);
                  logoutButton.setLayoutParams(logoutParams);
                  mainLayout.addView(logoutButton);
                  
                  setContentView(mainLayout);
              }
              
              private void goToAuth() {
                  Intent intent = new Intent(this, AuthActivity.class);
                  startActivity(intent);
                  finish();
              }
          }
          EOF

      - name: Create service stubs
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/services/AutoDetectionService.java << 'EOF'
          package com.miletrackerpro.app.services;
          
          import android.app.Service;
          import android.content.Intent;
          import android.os.IBinder;
          import android.util.Log;
          
          public class AutoDetectionService extends Service {
              private static final String TAG = "AutoDetectionService";
              
              @Override
              public void onCreate() {
                  super.onCreate();
                  Log.d(TAG, "AutoDetectionService created");
              }
              
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  Log.d(TAG, "AutoDetectionService started");
                  return START_NOT_STICKY;
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
          }
          EOF

          cat > android/app/src/main/java/com/miletrackerpro/app/services/ManualTripService.java << 'EOF'
          package com.miletrackerpro.app.services;
          
          import android.app.Service;
          import android.content.Intent;
          import android.os.IBinder;
          import android.util.Log;
          
          public class ManualTripService extends Service {
              private static final String TAG = "ManualTripService";
              
              @Override
              public void onCreate() {
                  super.onCreate();
                  Log.d(TAG, "ManualTripService created");
              }
              
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  Log.d(TAG, "ManualTripService started");
                  return START_NOT_STICKY;
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
          }
          EOF

          cat > android/app/src/main/java/com/miletrackerpro/app/auth/DataRecoveryActivity.java << 'EOF'
          package com.miletrackerpro.app.auth;
          
          import android.os.Bundle;
          import android.widget.*;
          import androidx.appcompat.app.AppCompatActivity;
          
          public class DataRecoveryActivity extends AppCompatActivity {
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  TextView text = new TextView(this);
                  text.setText("Data Recovery - Coming Soon");
                  text.setTextSize(20);
                  text.setGravity(android.view.Gravity.CENTER);
                  setContentView(text);
              }
          }
          EOF

      - name: Build Android APK with OkHttp Authentication
        run: |
          cd android
          echo "BUILDING v4.9.91 - FUNCTIONAL APP WITH OKHTTP AUTH"
          echo "✅ OKHTTP: Proven working authentication from BYPASS version"
          echo "✅ BASELINE: Using working v4.9.73 as foundation"
          echo "✅ AUTHENTICATION: Real email/password auth with production API"
          echo "✅ NETWORK: Direct HTTPS connection with proper IP logging"
          echo "✅ READY: Foundation for full app functionality"
          ./gradlew clean assembleRelease --no-daemon --stacktrace

      - name: Upload APK - Functional App with OkHttp Auth
        uses: actions/upload-artifact@v4
        with:
          name: MileTracker-Pro-v4.9.91-OkHttp-Auth.apk
          path: android/app/build/outputs/apk/release/*.apk

      - name: Create Trip model and TripStorage
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/models/Trip.java << 'EOF'
          package com.miletrackerpro.app.models;

          import java.text.SimpleDateFormat;
          import java.util.Date;
          import java.util.Locale;

          public class Trip {
              private String id;
              private String deviceId;
              private String startLocation;
              private String endLocation;
              private double distance;
              private long duration;
              private String category;
              private long startTime;
              private long endTime;
              private boolean autoDetected;
              private String clientName;
              private String notes;

              public Trip() {
                  this.id = String.valueOf(System.currentTimeMillis());
                  this.category = "Business";
                  this.autoDetected = false;
                  this.clientName = "";
                  this.notes = "";
              }

              // Getters and setters
              public String getId() { return id; }
              public void setId(String id) { this.id = id; }

              public String getDeviceId() { return deviceId; }
              public void setDeviceId(String deviceId) { this.deviceId = deviceId; }

              public String getStartLocation() { return startLocation; }
              public void setStartLocation(String startLocation) { this.startLocation = startLocation; }

              public String getEndLocation() { return endLocation; }
              public void setEndLocation(String endLocation) { this.endLocation = endLocation; }

              public double getDistance() { return distance; }
              public void setDistance(double distance) { this.distance = distance; }

              public long getDuration() { return duration; }
              public void setDuration(long duration) { this.duration = duration; }

              public String getCategory() { return category; }
              public void setCategory(String category) { this.category = category; }

              public long getStartTime() { return startTime; }
              public void setStartTime(long startTime) { this.startTime = startTime; }

              public long getEndTime() { return endTime; }
              public void setEndTime(long endTime) { this.endTime = endTime; }

              public boolean isAutoDetected() { return autoDetected; }
              public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }

              public String getClientName() { return clientName; }
              public void setClientName(String clientName) { this.clientName = clientName; }

              public String getNotes() { return notes; }
              public void setNotes(String notes) { this.notes = notes; }

              // Formatted display methods
              public String getFormattedDate() {
                  SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                  return sdf.format(new Date(startTime));
              }

              public String getFormattedDuration() {
                  long minutes = duration / (60 * 1000);
                  if (minutes < 60) {
                      return minutes + "m";
                  } else {
                      long hours = minutes / 60;
                      long remainingMinutes = minutes % 60;
                      return hours + "h " + remainingMinutes + "m";
                  }
              }

              public String getFormattedStartTime() {
                  SimpleDateFormat sdf = new SimpleDateFormat("h:mm a", Locale.getDefault());
                  return sdf.format(new Date(startTime));
              }

              public String getFormattedEndTime() {
                  SimpleDateFormat sdf = new SimpleDateFormat("h:mm a", Locale.getDefault());
                  return sdf.format(new Date(endTime));
              }
          }
          EOF

          cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
          package com.miletrackerpro.app.storage;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.util.Log;
          import com.miletrackerpro.app.models.Trip;
          import org.json.JSONArray;
          import org.json.JSONObject;

          import java.util.ArrayList;
          import java.util.Collections;
          import java.util.List;

          public class TripStorage {
              private static final String TAG = "TripStorage";
              private static final String PREFS_NAME = "MileTrackerPrefs";
              private static final String TRIPS_KEY = "trips";

              private SharedPreferences prefs;
              private Context context;

              public TripStorage(Context context) {
                  this.context = context;
                  this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
              }

              public void saveTrip(Trip trip) {
                  try {
                      List<Trip> trips = getAllTrips();
                      trips.add(trip);
                      saveAllTrips(trips);
                      Log.d(TAG, "Trip saved: " + trip.getId());
                  } catch (Exception e) {
                      Log.e(TAG, "Error saving trip", e);
                  }
              }

              public void updateTrip(Trip trip) {
                  try {
                      List<Trip> trips = getAllTrips();
                      for (int i = 0; i < trips.size(); i++) {
                          if (trips.get(i).getId().equals(trip.getId())) {
                              trips.set(i, trip);
                              break;
                          }
                      }
                      saveAllTrips(trips);
                      Log.d(TAG, "Trip updated: " + trip.getId());
                  } catch (Exception e) {
                      Log.e(TAG, "Error updating trip", e);
                  }
              }

              public void deleteTrip(String tripId) {
                  try {
                      List<Trip> trips = getAllTrips();
                      trips.removeIf(trip -> trip.getId().equals(tripId));
                      saveAllTrips(trips);
                      Log.d(TAG, "Trip deleted: " + tripId);
                  } catch (Exception e) {
                      Log.e(TAG, "Error deleting trip", e);
                  }
              }

              public List<Trip> getAllTrips() {
                  List<Trip> trips = new ArrayList<>();
                  try {
                      String tripsJson = prefs.getString(TRIPS_KEY, "[]");
                      JSONArray array = new JSONArray(tripsJson);
                      
                      for (int i = 0; i < array.length(); i++) {
                          JSONObject obj = array.getJSONObject(i);
                          Trip trip = parseTrip(obj);
                          if (trip != null) {
                              trips.add(trip);
                          }
                      }
                      
                      // Sort by start time (newest first)
                      Collections.sort(trips, (a, b) -> Long.compare(b.getStartTime(), a.getStartTime()));
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Error loading trips", e);
                  }
                  return trips;
              }

              public List<Trip> getRecentTrips(int limit) {
                  List<Trip> allTrips = getAllTrips();
                  if (allTrips.size() <= limit) {
                      return allTrips;
                  }
                  return allTrips.subList(0, limit);
              }

              private void saveAllTrips(List<Trip> trips) {
                  try {
                      JSONArray array = new JSONArray();
                      for (Trip trip : trips) {
                          JSONObject obj = tripToJson(trip);
                          array.put(obj);
                      }
                      
                      prefs.edit().putString(TRIPS_KEY, array.toString()).apply();
                  } catch (Exception e) {
                      Log.e(TAG, "Error saving all trips", e);
                  }
              }

              private JSONObject tripToJson(Trip trip) throws Exception {
                  JSONObject obj = new JSONObject();
                  obj.put("id", trip.getId());
                  obj.put("deviceId", trip.getDeviceId());
                  obj.put("startLocation", trip.getStartLocation());
                  obj.put("endLocation", trip.getEndLocation());
                  obj.put("distance", trip.getDistance());
                  obj.put("duration", trip.getDuration());
                  obj.put("category", trip.getCategory());
                  obj.put("startTime", trip.getStartTime());
                  obj.put("endTime", trip.getEndTime());
                  obj.put("autoDetected", trip.isAutoDetected());
                  obj.put("clientName", trip.getClientName());
                  obj.put("notes", trip.getNotes());
                  return obj;
              }

              private Trip parseTrip(JSONObject obj) {
                  try {
                      Trip trip = new Trip();
                      trip.setId(obj.optString("id"));
                      trip.setDeviceId(obj.optString("deviceId"));
                      trip.setStartLocation(obj.optString("startLocation", ""));
                      trip.setEndLocation(obj.optString("endLocation", ""));
                      trip.setDistance(obj.optDouble("distance", 0.0));
                      trip.setDuration(obj.optLong("duration", 0));
                      trip.setCategory(obj.optString("category", "Business"));
                      trip.setStartTime(obj.optLong("startTime"));
                      trip.setEndTime(obj.optLong("endTime"));
                      trip.setAutoDetected(obj.optBoolean("autoDetected", false));
                      trip.setClientName(obj.optString("clientName", ""));
                      trip.setNotes(obj.optString("notes", ""));
                      return trip;
                  } catch (Exception e) {
                      Log.e(TAG, "Error parsing trip", e);
                      return null;
                  }
              }
          }
          EOF
