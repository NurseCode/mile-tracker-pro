name: Phase 3 + Real Background GPS
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean and create Android project structure
        run: |
          rm -rf android
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
          mkdir -p android/app/src/main/res/layout
          mkdir -p android/app/src/main/res/values
          mkdir -p android/gradle/wrapper

      - name: Create Gradle wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create Gradle wrapper JAR
        run: |
          mkdir -p android/gradle/wrapper
          curl -L https://github.com/gradle/gradle/raw/v8.6.0/gradle/wrapper/gradle-wrapper.jar -o android/gradle/wrapper/gradle-wrapper.jar

      - name: Create gradlew script
        run: |
          cat > android/gradlew << 'EOF'
          #!/bin/sh
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          DEFAULT_JVM_OPTS="-Xmx1024m -Xms256m"
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
          fi
          
          SAVED="`pwd`"
          cd "`dirname \"$0\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF
          
          chmod +x android/gradlew

      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerPro'
          include ':app'
          EOF

      - name: Create gradle.properties
        run: |
          cat > android/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.enableR8.fullMode=false
          EOF

      - name: Create root build.gradle
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 24
                  compileSdkVersion = 34
                  targetSdkVersion = 34
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.1.4")
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create app/build.gradle (with location services)
        run: |
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }
          
          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 34
              
              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 34
                  versionCode 11
                  versionName "3.1-real-background"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      debuggable false
                      signingConfig signingConfigs.debug
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              
              packagingOptions {
                  pickFirst '**/kotlin-stdlib-*.jar'
                  pickFirst '**/kotlin-stdlib-jdk*.jar'
                  exclude 'META-INF/kotlin-stdlib.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk7.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk8.kotlin_module'
              }
          }
          
          configurations.all {
              resolutionStrategy {
                  force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.android.gms:play-services-location:21.0.1'
              
              // Force specific Kotlin version to avoid conflicts
              implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
          }
          EOF

      - name: Create AndroidManifest.xml (with background permissions)
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              
              <!-- Location permissions -->
              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
              
              <!-- Background service permissions -->
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />
              
              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="MileTracker Pro"
                  android:theme="@style/AppTheme">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  
                  <!-- Background GPS Service -->
                  <service
                      android:name=".services.BackgroundGPSService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />
                  
              </application>
          </manifest>
          EOF

      - name: Create BackgroundGPSService (real background tracking)
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/services/BackgroundGPSService.java << 'EOF'
          package com.miletrackerpro.app.services;
          
          import android.Manifest;
          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.IBinder;
          import android.os.PowerManager;
          import androidx.core.app.ActivityCompat;
          import androidx.core.app.NotificationCompat;
          
          public class BackgroundGPSService extends Service implements LocationListener {
              private static final int NOTIFICATION_ID = 1001;
              private static final String CHANNEL_ID = "GPS_TRACKING_CHANNEL";
              
              private LocationManager locationManager;
              private PowerManager.WakeLock wakeLock;
              private NotificationManager notificationManager;
              
              private Location lastLocation;
              private float totalDistance = 0.0f;
              private long tripStartTime = 0;
              private boolean isTracking = false;
              
              @Override
              public void onCreate() {
                  super.onCreate();
                  
                  locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
                  notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
                  
                  // Create wake lock to keep GPS active
                  PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
                  wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, "MileTracker:GPS");
                  
                  createNotificationChannel();
              }
              
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  String action = intent.getStringExtra("action");
                  
                  if ("START_TRACKING".equals(action)) {
                      startBackgroundTracking();
                  } else if ("STOP_TRACKING".equals(action)) {
                      stopBackgroundTracking();
                  }
                  
                  return START_STICKY; // Restart if killed
              }
              
              private void startBackgroundTracking() {
                  if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                      == PackageManager.PERMISSION_GRANTED) {
                      
                      isTracking = true;
                      tripStartTime = System.currentTimeMillis();
                      totalDistance = 0.0f;
                      lastLocation = null;
                      
                      // Acquire wake lock
                      if (!wakeLock.isHeld()) {
                          wakeLock.acquire();
                      }
                      
                      // Start foreground service with notification
                      startForeground(NOTIFICATION_ID, createTrackingNotification());
                      
                      // Request location updates
                      locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 
                          10000, 10, this); // 10 seconds, 10 meters
                      
                      locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 
                          15000, 15, this); // 15 seconds, 15 meters
                  }
              }
              
              private void stopBackgroundTracking() {
                  isTracking = false;
                  
                  // Stop location updates
                  locationManager.removeUpdates(this);
                  
                  // Release wake lock
                  if (wakeLock.isHeld()) {
                      wakeLock.release();
                  }
                  
                  // Stop foreground service
                  stopForeground(true);
                  stopSelf();
              }
              
              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "GPS Tracking",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      channel.setDescription("Background GPS tracking for mileage");
                      notificationManager.createNotificationChannel(channel);
                  }
              }
              
              private Notification createTrackingNotification() {
                  return new NotificationCompat.Builder(this, CHANNEL_ID)
                      .setContentTitle("MileTracker Pro")
                      .setContentText(String.format("Tracking: %.2f miles", totalDistance))
                      .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                      .setOngoing(true)
                      .setPriority(NotificationCompat.PRIORITY_LOW)
                      .build();
              }
              
              private void updateNotification() {
                  if (isTracking) {
                      long elapsed = System.currentTimeMillis() - tripStartTime;
                      String timeText = formatTime(elapsed);
                      
                      Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                          .setContentTitle("MileTracker Pro - Active Trip")
                          .setContentText(String.format("%.2f miles • %s", totalDistance, timeText))
                          .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                          .setOngoing(true)
                          .setPriority(NotificationCompat.PRIORITY_LOW)
                          .build();
                      
                      notificationManager.notify(NOTIFICATION_ID, notification);
                  }
              }
              
              private String formatTime(long milliseconds) {
                  long seconds = milliseconds / 1000;
                  long minutes = seconds / 60;
                  seconds = seconds % 60;
                  return String.format("%02d:%02d", minutes, seconds);
              }
              
              @Override
              public void onLocationChanged(Location location) {
                  if (isTracking && lastLocation != null) {
                      float distance = lastLocation.distanceTo(location) / 1609.34f; // Convert to miles
                      
                      // Filter out GPS noise
                      if (distance > 0.001f && distance < 1.0f) {
                          totalDistance += distance;
                          updateNotification();
                      }
                  }
                  
                  lastLocation = location;
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
              
              @Override
              public void onDestroy() {
                  super.onDestroy();
                  
                  if (wakeLock.isHeld()) {
                      wakeLock.release();
                  }
                  
                  locationManager.removeUpdates(this);
              }
          }
          EOF

      - name: Create MainActivity (with real background service integration)
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.Manifest;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.Bundle;
          import android.os.Handler;
          import android.view.View;
          import android.widget.Button;
          import android.widget.LinearLayout;
          import android.widget.TextView;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          import com.miletrackerpro.app.services.BackgroundGPSService;
          
          public class MainActivity extends AppCompatActivity implements LocationListener {
              private static final int LOCATION_PERMISSION_REQUEST = 1001;
              private static final int BACKGROUND_LOCATION_PERMISSION_REQUEST = 1002;
              
              private TextView statusText;
              private TextView distanceText;
              private TextView timerText;
              private Button startButton;
              private Button stopButton;
              private Button backgroundToggle;
              
              private LocationManager locationManager;
              private boolean isTracking = false;
              private boolean backgroundEnabled = false;
              private Location lastLocation;
              private float totalDistance = 0.0f;
              private long tripStartTime = 0;
              private Handler timerHandler = new Handler();
              private Runnable timerRunnable;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  createLayout();
                  initializeGPS();
                  setupTimerRunnable();
                  requestPermissions();
              }
              
              private void createLayout() {
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(40, 60, 40, 40);
                  mainLayout.setBackgroundColor(0xFFFFFFFF);
                  
                  // Title
                  TextView title = new TextView(this);
                  title.setText("MileTracker Pro");
                  title.setTextSize(28);
                  title.setTextColor(0xFF667eea);
                  title.setPadding(0, 0, 0, 40);
                  mainLayout.addView(title);
                  
                  // Status
                  statusText = new TextView(this);
                  statusText.setText("Ready for real background GPS tracking");
                  statusText.setTextSize(16);
                  statusText.setPadding(0, 0, 0, 20);
                  mainLayout.addView(statusText);
                  
                  // Distance
                  distanceText = new TextView(this);
                  distanceText.setText("Distance: 0.0 miles");
                  distanceText.setTextSize(18);
                  distanceText.setTextColor(0xFF2E7D32);
                  distanceText.setPadding(0, 0, 0, 10);
                  mainLayout.addView(distanceText);
                  
                  // Timer
                  timerText = new TextView(this);
                  timerText.setText("Time: 00:00");
                  timerText.setTextSize(18);
                  timerText.setTextColor(0xFF1976D2);
                  timerText.setPadding(0, 0, 0, 30);
                  mainLayout.addView(timerText);
                  
                  // Background toggle
                  backgroundToggle = new Button(this);
                  backgroundToggle.setText("Real Background Mode: OFF");
                  backgroundToggle.setBackgroundColor(0xFFE0E0E0);
                  backgroundToggle.setPadding(20, 15, 20, 15);
                  backgroundToggle.setOnClickListener(new View.OnClickListener() {
                      @Override
                      public void onClick(View v) {
                          toggleBackgroundMode();
                      }
                  });
                  mainLayout.addView(backgroundToggle);
                  
                  // Add spacing
                  TextView spacer = new TextView(this);
                  spacer.setHeight(30);
                  mainLayout.addView(spacer);
                  
                  // Start button
                  startButton = new Button(this);
                  startButton.setText("START TRIP");
                  startButton.setTextSize(18);
                  startButton.setBackgroundColor(0xFF4CAF50);
                  startButton.setTextColor(0xFFFFFFFF);
                  startButton.setPadding(30, 20, 30, 20);
                  startButton.setOnClickListener(new View.OnClickListener() {
                      @Override
                      public void onClick(View v) {
                          startTrip();
                      }
                  });
                  mainLayout.addView(startButton);
                  
                  // Stop button
                  stopButton = new Button(this);
                  stopButton.setText("STOP TRIP");
                  stopButton.setTextSize(18);
                  stopButton.setBackgroundColor(0xFFF44336);
                  stopButton.setTextColor(0xFFFFFFFF);
                  stopButton.setPadding(30, 20, 30, 20);
                  stopButton.setEnabled(false);
                  stopButton.setOnClickListener(new View.OnClickListener() {
                      @Override
                      public void onClick(View v) {
                          stopTrip();
                      }
                  });
                  mainLayout.addView(stopButton);
                  
                  setContentView(mainLayout);
              }
              
              private void requestPermissions() {
                  // Request basic location permissions first
                  if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                      != PackageManager.PERMISSION_GRANTED) {
                      ActivityCompat.requestPermissions(this,
                          new String[]{
                              Manifest.permission.ACCESS_FINE_LOCATION,
                              Manifest.permission.ACCESS_COARSE_LOCATION
                          },
                          LOCATION_PERMISSION_REQUEST);
                  } else {
                      requestBackgroundLocationPermission();
                  }
              }
              
              private void requestBackgroundLocationPermission() {
                  // Request background location permission for Android 10+
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                      if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) 
                          != PackageManager.PERMISSION_GRANTED) {
                          ActivityCompat.requestPermissions(this,
                              new String[]{Manifest.permission.ACCESS_BACKGROUND_LOCATION},
                              BACKGROUND_LOCATION_PERMISSION_REQUEST);
                      }
                  }
              }
              
              private void toggleBackgroundMode() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                      if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_BACKGROUND_LOCATION) 
                          != PackageManager.PERMISSION_GRANTED) {
                          Toast.makeText(this, "Background location permission required", Toast.LENGTH_LONG).show();
                          requestBackgroundLocationPermission();
                          return;
                      }
                  }
                  
                  backgroundEnabled = !backgroundEnabled;
                  
                  if (backgroundEnabled) {
                      backgroundToggle.setText("Real Background Mode: ON");
                      backgroundToggle.setBackgroundColor(0xFF4CAF50);
                      backgroundToggle.setTextColor(0xFFFFFFFF);
                      statusText.setText("Real background GPS enabled - tracks even when app is closed");
                  } else {
                      backgroundToggle.setText("Real Background Mode: OFF");
                      backgroundToggle.setBackgroundColor(0xFFE0E0E0);
                      backgroundToggle.setTextColor(0xFF000000);
                      statusText.setText("Foreground tracking only - keep app open");
                  }
              }
              
              private void initializeGPS() {
                  locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
              }
              
              private void setupTimerRunnable() {
                  timerRunnable = new Runnable() {
                      @Override
                      public void run() {
                          if (isTracking && !backgroundEnabled) {
                              updateTimer();
                              timerHandler.postDelayed(this, 1000);
                          }
                      }
                  };
              }
              
              private void startTrip() {
                  if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                      == PackageManager.PERMISSION_GRANTED) {
                      
                      isTracking = true;
                      tripStartTime = System.currentTimeMillis();
                      totalDistance = 0.0f;
                      lastLocation = null;
                      
                      startButton.setEnabled(false);
                      stopButton.setEnabled(true);
                      
                      if (backgroundEnabled) {
                          // Start background service
                          Intent serviceIntent = new Intent(this, BackgroundGPSService.class);
                          serviceIntent.putExtra("action", "START_TRACKING");
                          startForegroundService(serviceIntent);
                          
                          statusText.setText("Trip started - REAL background tracking active");
                      } else {
                          // Start foreground tracking
                          statusText.setText("Trip started - foreground tracking (keep app open)");
                          locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 
                              5000, 5, this);
                          timerHandler.post(timerRunnable);
                      }
                  } else {
                      Toast.makeText(this, "Location permission required", Toast.LENGTH_SHORT).show();
                  }
              }
              
              private void stopTrip() {
                  isTracking = false;
                  
                  startButton.setEnabled(true);
                  stopButton.setEnabled(false);
                  
                  if (backgroundEnabled) {
                      // Stop background service
                      Intent serviceIntent = new Intent(this, BackgroundGPSService.class);
                      serviceIntent.putExtra("action", "STOP_TRACKING");
                      startService(serviceIntent);
                  } else {
                      // Stop foreground tracking
                      locationManager.removeUpdates(this);
                      timerHandler.removeCallbacks(timerRunnable);
                  }
                  
                  statusText.setText(String.format("Trip completed: %.2f miles in %s", 
                      totalDistance, formatTime(System.currentTimeMillis() - tripStartTime)));
              }
              
              private void updateTimer() {
                  if (isTracking) {
                      long elapsed = System.currentTimeMillis() - tripStartTime;
                      timerText.setText("Time: " + formatTime(elapsed));
                  }
              }
              
              private String formatTime(long milliseconds) {
                  long seconds = milliseconds / 1000;
                  long minutes = seconds / 60;
                  seconds = seconds % 60;
                  return String.format("%02d:%02d", minutes, seconds);
              }
              
              @Override
              public void onLocationChanged(Location location) {
                  if (lastLocation != null && !backgroundEnabled) {
                      float distance = lastLocation.distanceTo(location) / 1609.34f; // Convert to miles
                      if (distance > 0.001f) { // Filter out GPS noise
                          totalDistance += distance;
                          distanceText.setText(String.format("Distance: %.2f miles", totalDistance));
                      }
                  }
                  lastLocation = location;
              }
              
              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                  
                  if (requestCode == LOCATION_PERMISSION_REQUEST) {
                      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                          statusText.setText("Location permissions granted");
                          requestBackgroundLocationPermission();
                      } else {
                          statusText.setText("Location permissions required for GPS tracking");
                      }
                  } else if (requestCode == BACKGROUND_LOCATION_PERMISSION_REQUEST) {
                      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                          statusText.setText("Background location granted - real background tracking available");
                      } else {
                          statusText.setText("Background permission denied - foreground tracking only");
                      }
                  }
              }
              
              @Override
              public void onStatusChanged(String provider, int status, Bundle extras) {}
              
              @Override
              public void onProviderEnabled(String provider) {}
              
              @Override
              public void onProviderDisabled(String provider) {}
          }
          EOF

      - name: Create app theme and resources
        run: |
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667eea</item>
                  <item name="colorPrimaryDark">#5a67d8</item>
                  <item name="colorAccent">#667eea</item>
              </style>
          </resources>
          EOF
          
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
          </resources>
          EOF

      - name: Create app icon
        run: |
          mkdir -p android/app/src/main/res/drawable
          cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="108dp"
              android:height="108dp"
              android:viewportWidth="108"
              android:viewportHeight="108">
              <path
                  android:fillColor="#667eea"
                  android:pathData="M0,0h108v108h-108z" />
              <path
                  android:fillColor="#ffffff"
                  android:pathData="M30,30h48v48h-48z" />
          </vector>
          EOF

      - name: Build APK
        run: |
          cd android
          ./gradlew clean assembleRelease

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: miletracker-real-background.apk
          path: android/app/build/outputs/apk/release/app-release.apk
