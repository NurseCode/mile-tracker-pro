name: Phase 3 Auto - Automatic Trip Detection

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean and create Android project structure
        run: |
          rm -rf android
          mkdir -p android/app/src/main/java/com/miletrackerpro/app
          mkdir -p android/app/src/main/res/layout
          mkdir -p android/app/src/main/res/values
          mkdir -p android/gradle/wrapper

      - name: Create Gradle wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create Gradle wrapper JAR
        run: |
          mkdir -p android/gradle/wrapper
          curl -L https://github.com/gradle/gradle/raw/v8.6.0/gradle/wrapper/gradle-wrapper.jar -o android/gradle/wrapper/gradle-wrapper.jar

      - name: Create gradlew script
        run: |
          cat > android/gradlew << 'EOF'
          #!/usr/bin/env sh
          APP_HOME="`dirname \"$0\"`"
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          if [ -n "$JAVA_HOME" ] ; then
              JAVACMD="$JAVA_HOME/bin/java"
          else
              JAVACMD="java"
          fi
          exec "$JAVACMD" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF
          chmod +x android/gradlew

      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerPro'
          include ':app'
          EOF

      - name: Create build.gradle
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 21
                  compileSdkVersion = 34
                  targetSdkVersion = 34
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.2.1")
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create app/build.gradle
        run: |
          cat > android/app/build.gradle << 'EOF'
          apply plugin: "com.android.application"
          
          android {
              namespace "com.miletrackerpro.app"
              compileSdkVersion 34
              
              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode 5
                  versionName "5.0"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }
          
          dependencies {
              // Pure Android - no external dependencies
          }
          EOF

      - name: Create strings.xml
        run: |
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <resources>
              <string name="app_name">MileTracker Pro</string>
              <string name="auto_mode">AUTO MODE</string>
              <string name="manual_mode">MANUAL MODE</string>
              <string name="start_trip">START TRIP</string>
              <string name="stop_trip">STOP TRIP</string>
              <string name="view_trips">VIEW TRIPS</string>
          </resources>
          EOF

      - name: Create MainActivity with auto-detection
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.app.Activity;
          import android.os.Bundle;
          import android.widget.LinearLayout;
          import android.widget.TextView;
          import android.widget.Button;
          import android.widget.ScrollView;
          import android.widget.Switch;
          import android.graphics.Color;
          import android.view.Gravity;
          import android.view.ViewGroup;
          import android.widget.Toast;
          import android.content.Context;
          import android.location.LocationManager;
          import android.location.LocationListener;
          import android.location.Location;
          import android.Manifest;
          import android.content.pm.PackageManager;
          import android.os.Build;
          import android.content.SharedPreferences;
          import android.os.Handler;
          import java.text.SimpleDateFormat;
          import java.util.Date;
          import java.util.Locale;
          import java.util.ArrayList;
          import java.util.List;
          import org.json.JSONObject;
          import org.json.JSONArray;
          import org.json.JSONException;
          
          public class MainActivity extends Activity implements LocationListener {
              
              private LocationManager locationManager;
              private SharedPreferences preferences;
              private Handler handler = new Handler();
              
              // Tracking state
              private boolean isAutoMode = true;
              private boolean isMonitoring = false;
              private boolean isActiveTrip = false;
              private Location startLocation;
              private Location lastLocation;
              private long tripStartTime;
              private float totalDistance = 0;
              private int currentView = 0; // 0 = tracking, 1 = trips
              
              // Speed detection
              private List<Float> recentSpeeds = new ArrayList<>();
              private long lastLocationTime = 0;
              private int stationaryCount = 0;
              private int movingCount = 0;
              
              // UI elements
              private TextView statusText;
              private TextView speedText;
              private TextView distanceText;
              private TextView timeText;
              private Button actionButton;
              private Button viewTripsButton;
              private Switch autoModeSwitch;
              private LinearLayout mainLayout;
              private ScrollView tripsScrollView;
              private LinearLayout tripsLayout;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                  preferences = getSharedPreferences("MileTracker", Context.MODE_PRIVATE);
                  isAutoMode = preferences.getBoolean("autoMode", true);
                  
                  createUserInterface();
                  checkLocationPermission();
              }
              
              private void createUserInterface() {
                  // Main container
                  mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setBackgroundColor(Color.parseColor("#667eea"));
                  mainLayout.setPadding(40, 60, 40, 40);
                  
                  // Title
                  TextView title = new TextView(this);
                  title.setText("MileTracker Pro");
                  title.setTextSize(32);
                  title.setTextColor(Color.WHITE);
                  title.setGravity(Gravity.CENTER);
                  title.setPadding(0, 0, 0, 30);
                  mainLayout.addView(title);
                  
                  // Auto/Manual mode switch
                  LinearLayout modeLayout = new LinearLayout(this);
                  modeLayout.setOrientation(LinearLayout.HORIZONTAL);
                  modeLayout.setGravity(Gravity.CENTER);
                  modeLayout.setPadding(0, 0, 0, 20);
                  
                  TextView modeLabel = new TextView(this);
                  modeLabel.setText("Auto Tracking: ");
                  modeLabel.setTextSize(16);
                  modeLabel.setTextColor(Color.WHITE);
                  modeLayout.addView(modeLabel);
                  
                  autoModeSwitch = new Switch(this);
                  autoModeSwitch.setChecked(isAutoMode);
                  autoModeSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
                      isAutoMode = isChecked;
                      preferences.edit().putBoolean("autoMode", isAutoMode).apply();
                      updateModeDisplay();
                      if (isAutoMode) {
                          startMonitoring();
                      } else {
                          stopMonitoring();
                      }
                  });
                  modeLayout.addView(autoModeSwitch);
                  mainLayout.addView(modeLayout);
                  
                  createTrackingInterface();
                  createTripsInterface();
                  
                  setContentView(mainLayout);
                  showTrackingView();
                  updateModeDisplay();
              }
              
              private void createTrackingInterface() {
                  // Status card
                  LinearLayout statusCard = new LinearLayout(this);
                  statusCard.setOrientation(LinearLayout.VERTICAL);
                  statusCard.setBackgroundColor(Color.parseColor("#ffffff"));
                  statusCard.setPadding(30, 30, 30, 30);
                  statusCard.setLayoutParams(new LinearLayout.LayoutParams(
                      ViewGroup.LayoutParams.MATCH_PARENT, 
                      ViewGroup.LayoutParams.WRAP_CONTENT));
                  
                  // Status text
                  statusText = new TextView(this);
                  statusText.setText("Ready to Track");
                  statusText.setTextSize(24);
                  statusText.setTextColor(Color.parseColor("#333333"));
                  statusText.setGravity(Gravity.CENTER);
                  statusText.setPadding(0, 0, 0, 15);
                  statusCard.addView(statusText);
                  
                  // Speed display
                  speedText = new TextView(this);
                  speedText.setText("Speed: 0.0 mph");
                  speedText.setTextSize(16);
                  speedText.setTextColor(Color.parseColor("#666666"));
                  speedText.setGravity(Gravity.CENTER);
                  speedText.setPadding(0, 0, 0, 10);
                  statusCard.addView(speedText);
                  
                  // Distance display
                  distanceText = new TextView(this);
                  distanceText.setText("Distance: 0.0 miles");
                  distanceText.setTextSize(18);
                  distanceText.setTextColor(Color.parseColor("#666666"));
                  distanceText.setGravity(Gravity.CENTER);
                  statusCard.addView(distanceText);
                  
                  // Time display
                  timeText = new TextView(this);
                  timeText.setText("Duration: 00:00");
                  timeText.setTextSize(18);
                  timeText.setTextColor(Color.parseColor("#666666"));
                  timeText.setGravity(Gravity.CENTER);
                  timeText.setPadding(0, 10, 0, 0);
                  statusCard.addView(timeText);
                  
                  mainLayout.addView(statusCard);
                  
                  // Action button (for manual mode)
                  actionButton = new Button(this);
                  actionButton.setText("START TRIP");
                  actionButton.setTextSize(20);
                  actionButton.setTextColor(Color.WHITE);
                  actionButton.setBackgroundColor(Color.parseColor("#10b981"));
                  actionButton.setPadding(40, 30, 40, 30);
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      ViewGroup.LayoutParams.MATCH_PARENT, 
                      ViewGroup.LayoutParams.WRAP_CONTENT);
                  buttonParams.setMargins(0, 40, 0, 20);
                  actionButton.setLayoutParams(buttonParams);
                  
                  actionButton.setOnClickListener(v -> {
                      if (isActiveTrip) {
                          stopTrip();
                      } else {
                          startTrip();
                      }
                  });
                  
                  mainLayout.addView(actionButton);
                  
                  // View trips button
                  viewTripsButton = new Button(this);
                  viewTripsButton.setText("VIEW TRIPS");
                  viewTripsButton.setTextSize(16);
                  viewTripsButton.setTextColor(Color.parseColor("#667eea"));
                  viewTripsButton.setBackgroundColor(Color.WHITE);
                  viewTripsButton.setPadding(40, 20, 40, 20);
                  LinearLayout.LayoutParams viewButtonParams = new LinearLayout.LayoutParams(
                      ViewGroup.LayoutParams.MATCH_PARENT, 
                      ViewGroup.LayoutParams.WRAP_CONTENT);
                  viewButtonParams.setMargins(0, 0, 0, 20);
                  viewTripsButton.setLayoutParams(viewButtonParams);
                  
                  viewTripsButton.setOnClickListener(v -> showTripsView());
                  mainLayout.addView(viewTripsButton);
                  
                  // Feature description
                  TextView features = new TextView(this);
                  features.setText("Auto Mode: Detects driving automatically\nManual Mode: Start/stop trip control");
                  features.setTextSize(14);
                  features.setTextColor(Color.parseColor("#c7d2fe"));
                  features.setGravity(Gravity.CENTER);
                  features.setLineSpacing(4, 1.2f);
                  features.setPadding(0, 20, 0, 0);
                  mainLayout.addView(features);
              }
              
              private void createTripsInterface() {
                  // Trips scroll view
                  tripsScrollView = new ScrollView(this);
                  tripsScrollView.setBackgroundColor(Color.WHITE);
                  tripsScrollView.setLayoutParams(new LinearLayout.LayoutParams(
                      ViewGroup.LayoutParams.MATCH_PARENT, 
                      ViewGroup.LayoutParams.WRAP_CONTENT));
                  tripsScrollView.setPadding(20, 20, 20, 20);
                  
                  tripsLayout = new LinearLayout(this);
                  tripsLayout.setOrientation(LinearLayout.VERTICAL);
                  tripsScrollView.addView(tripsLayout);
                  
                  // Back button
                  Button backButton = new Button(this);
                  backButton.setText("← BACK TO TRACKING");
                  backButton.setTextSize(16);
                  backButton.setTextColor(Color.WHITE);
                  backButton.setBackgroundColor(Color.parseColor("#667eea"));
                  backButton.setPadding(40, 20, 40, 20);
                  LinearLayout.LayoutParams backButtonParams = new LinearLayout.LayoutParams(
                      ViewGroup.LayoutParams.MATCH_PARENT, 
                      ViewGroup.LayoutParams.WRAP_CONTENT);
                  backButtonParams.setMargins(0, 20, 0, 0);
                  backButton.setLayoutParams(backButtonParams);
                  
                  backButton.setOnClickListener(v -> showTrackingView());
                  mainLayout.addView(backButton);
                  mainLayout.addView(tripsScrollView);
              }
              
              private void updateModeDisplay() {
                  if (isAutoMode) {
                      statusText.setText("Auto Mode - Monitoring");
                      actionButton.setVisibility(LinearLayout.GONE);
                  } else {
                      statusText.setText("Manual Mode - Ready");
                      actionButton.setVisibility(LinearLayout.VISIBLE);
                  }
              }
              
              private void showTrackingView() {
                  currentView = 0;
                  tripsScrollView.setVisibility(LinearLayout.GONE);
              }
              
              private void showTripsView() {
                  currentView = 1;
                  tripsScrollView.setVisibility(LinearLayout.VISIBLE);
                  loadTripsHistory();
              }
              
              private void checkLocationPermission() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                      if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                          requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
                          return;
                      }
                  }
                  initializeLocationTracking();
              }
              
              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  if (requestCode == 1) {
                      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                          initializeLocationTracking();
                      } else {
                          Toast.makeText(this, "Location permission required for GPS tracking", Toast.LENGTH_LONG).show();
                      }
                  }
              }
              
              private void initializeLocationTracking() {
                  if (isAutoMode) {
                      startMonitoring();
                  }
                  updateModeDisplay();
              }
              
              private void startMonitoring() {
                  if (isMonitoring) return;
                  
                  try {
                      if (checkSelfPermission(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                          locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 3000, 5, this);
                          locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 3000, 5, this);
                          isMonitoring = true;
                          statusText.setText("Auto Mode - Monitoring");
                      }
                  } catch (SecurityException e) {
                      Toast.makeText(this, "Location permission required", Toast.LENGTH_SHORT).show();
                  }
              }
              
              private void stopMonitoring() {
                  if (!isMonitoring) return;
                  
                  locationManager.removeUpdates(this);
                  isMonitoring = false;
                  recentSpeeds.clear();
                  stationaryCount = 0;
                  movingCount = 0;
                  
                  if (isActiveTrip) {
                      stopTrip();
                  }
              }
              
              private void startTrip() {
                  if (isActiveTrip) return;
                  
                  isActiveTrip = true;
                  tripStartTime = System.currentTimeMillis();
                  totalDistance = 0;
                  startLocation = null;
                  lastLocation = null;
                  
                  statusText.setText(isAutoMode ? "Auto Trip Active" : "Manual Trip Active");
                  
                  if (!isAutoMode) {
                      actionButton.setText("STOP TRIP");
                      actionButton.setBackgroundColor(Color.parseColor("#ef4444"));
                  }
                  
                  updateTimer();
                  Toast.makeText(this, "Trip started - GPS tracking active", Toast.LENGTH_SHORT).show();
              }
              
              private void stopTrip() {
                  if (!isActiveTrip) return;
                  
                  isActiveTrip = false;
                  long tripDuration = System.currentTimeMillis() - tripStartTime;
                  
                  // Save trip to history
                  saveTrip(totalDistance, tripDuration);
                  
                  statusText.setText(isAutoMode ? "Auto Mode - Monitoring" : "Manual Mode - Ready");
                  
                  if (!isAutoMode) {
                      actionButton.setText("START TRIP");
                      actionButton.setBackgroundColor(Color.parseColor("#10b981"));
                  }
                  
                  // Show trip summary
                  String summary = String.format(Locale.US, 
                      "Trip completed!\nDistance: %.2f miles\nDuration: %s", 
                      totalDistance, formatDuration(tripDuration));
                  
                  Toast.makeText(this, summary, Toast.LENGTH_LONG).show();
                  
                  // Reset display
                  distanceText.setText("Distance: 0.0 miles");
                  timeText.setText("Duration: 00:00");
              }
              
              private void updateTimer() {
                  if (isActiveTrip) {
                      long duration = System.currentTimeMillis() - tripStartTime;
                      timeText.setText("Duration: " + formatDuration(duration));
                      
                      // Update every second
                      handler.postDelayed(this::updateTimer, 1000);
                  }
              }
              
              @Override
              public void onLocationChanged(Location location) {
                  // Calculate speed
                  float speed = 0;
                  if (lastLocation != null && location.hasSpeed()) {
                      speed = location.getSpeed() * 2.237f; // Convert m/s to mph
                  } else if (lastLocation != null && lastLocationTime > 0) {
                      long timeDiff = System.currentTimeMillis() - lastLocationTime;
                      if (timeDiff > 0) {
                          float distance = lastLocation.distanceTo(location);
                          speed = (distance / (timeDiff / 1000.0f)) * 2.237f;
                      }
                  }
                  
                  // Update speed display
                  speedText.setText(String.format(Locale.US, "Speed: %.1f mph", speed));
                  
                  // Auto-detection logic
                  if (isAutoMode && isMonitoring) {
                      processAutoDetection(speed, location);
                  }
                  
                  // Update trip distance if active
                  if (isActiveTrip && lastLocation != null) {
                      float distance = lastLocation.distanceTo(location);
                      if (distance > 10) { // Only count significant movement
                          totalDistance += distance * 0.000621371f; // Convert meters to miles
                          distanceText.setText(String.format(Locale.US, "Distance: %.2f miles", totalDistance));
                      }
                  }
                  
                  lastLocation = location;
                  lastLocationTime = System.currentTimeMillis();
              }
              
              private void processAutoDetection(float speed, Location location) {
                  // Add speed to recent readings
                  recentSpeeds.add(speed);
                  if (recentSpeeds.size() > 5) {
                      recentSpeeds.remove(0);
                  }
                  
                  // Check if moving consistently (>5 mph for 3+ readings)
                  if (speed > 5.0f) {
                      movingCount++;
                      stationaryCount = 0;
                      
                      if (movingCount >= 3 && !isActiveTrip) {
                          startTrip();
                          Toast.makeText(this, "Auto trip started - driving detected", Toast.LENGTH_SHORT).show();
                      }
                  } else {
                      stationaryCount++;
                      movingCount = 0;
                      
                      // Stop trip if stationary for 4+ readings (12+ seconds)
                      if (stationaryCount >= 4 && isActiveTrip) {
                          stopTrip();
                          Toast.makeText(this, "Auto trip ended - stationary detected", Toast.LENGTH_SHORT).show();
                      }
                  }
              }
              
              private void saveTrip(float distance, long duration) {
                  try {
                      String tripsJson = preferences.getString("trips", "[]");
                      JSONArray trips = new JSONArray(tripsJson);
                      
                      JSONObject newTrip = new JSONObject();
                      newTrip.put("date", System.currentTimeMillis());
                      newTrip.put("distance", distance);
                      newTrip.put("duration", duration);
                      newTrip.put("method", isAutoMode ? "Auto" : "Manual");
                      
                      trips.put(newTrip);
                      preferences.edit().putString("trips", trips.toString()).apply();
                      
                  } catch (JSONException e) {
                      Toast.makeText(this, "Error saving trip", Toast.LENGTH_SHORT).show();
                  }
              }
              
              private void loadTripsHistory() {
                  tripsLayout.removeAllViews();
                  
                  String tripsJson = preferences.getString("trips", "[]");
                  try {
                      JSONArray trips = new JSONArray(tripsJson);
                      
                      if (trips.length() == 0) {
                          TextView noTrips = new TextView(this);
                          noTrips.setText("No trips recorded yet.\nTry auto mode or start a manual trip!");
                          noTrips.setTextSize(16);
                          noTrips.setTextColor(Color.parseColor("#666666"));
                          noTrips.setGravity(Gravity.CENTER);
                          noTrips.setPadding(20, 40, 20, 40);
                          tripsLayout.addView(noTrips);
                          return;
                      }
                      
                      TextView header = new TextView(this);
                      header.setText("Trip History (" + trips.length() + " trips)");
                      header.setTextSize(20);
                      header.setTextColor(Color.parseColor("#333333"));
                      header.setGravity(Gravity.CENTER);
                      header.setPadding(0, 0, 0, 20);
                      tripsLayout.addView(header);
                      
                      float totalMiles = 0;
                      long totalDuration = 0;
                      
                      for (int i = trips.length() - 1; i >= 0; i--) {
                          JSONObject trip = trips.getJSONObject(i);
                          
                          LinearLayout tripCard = new LinearLayout(this);
                          tripCard.setOrientation(LinearLayout.VERTICAL);
                          tripCard.setBackgroundColor(Color.parseColor("#f8f9fa"));
                          tripCard.setPadding(20, 15, 20, 15);
                          LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                              ViewGroup.LayoutParams.MATCH_PARENT, 
                              ViewGroup.LayoutParams.WRAP_CONTENT);
                          cardParams.setMargins(0, 0, 0, 10);
                          tripCard.setLayoutParams(cardParams);
                          
                          TextView tripInfo = new TextView(this);
                          String dateStr = new SimpleDateFormat("MMM dd 'at' h:mm a", Locale.US)
                              .format(new Date(trip.getLong("date")));
                          float miles = (float) trip.getDouble("distance");
                          String duration = formatDuration(trip.getLong("duration"));
                          String method = trip.optString("method", "Manual");
                          
                          tripInfo.setText(String.format(Locale.US, 
                              "%s (%s)\n%.2f miles • %s", dateStr, method, miles, duration));
                          tripInfo.setTextSize(14);
                          tripInfo.setTextColor(Color.parseColor("#333333"));
                          tripCard.addView(tripInfo);
                          
                          tripsLayout.addView(tripCard);
                          
                          totalMiles += miles;
                          totalDuration += trip.getLong("duration");
                      }
                      
                      // Summary card
                      LinearLayout summaryCard = new LinearLayout(this);
                      summaryCard.setOrientation(LinearLayout.VERTICAL);
                      summaryCard.setBackgroundColor(Color.parseColor("#667eea"));
                      summaryCard.setPadding(20, 20, 20, 20);
                      LinearLayout.LayoutParams summaryParams = new LinearLayout.LayoutParams(
                          ViewGroup.LayoutParams.MATCH_PARENT, 
                          ViewGroup.LayoutParams.WRAP_CONTENT);
                      summaryParams.setMargins(0, 20, 0, 0);
                      summaryCard.setLayoutParams(summaryParams);
                      
                      TextView summaryText = new TextView(this);
                      float deduction = totalMiles * 0.70f; // IRS business rate
                      summaryText.setText(String.format(Locale.US, 
                          "TOTAL SUMMARY\n%.1f miles • %s\nIRS Deduction: $%.2f", 
                          totalMiles, formatDuration(totalDuration), deduction));
                      summaryText.setTextSize(16);
                      summaryText.setTextColor(Color.WHITE);
                      summaryText.setGravity(Gravity.CENTER);
                      summaryCard.addView(summaryText);
                      
                      tripsLayout.addView(summaryCard);
                      
                  } catch (JSONException e) {
                      Toast.makeText(this, "Error loading trips", Toast.LENGTH_SHORT).show();
                  }
              }
              
              private String formatDuration(long milliseconds) {
                  long seconds = milliseconds / 1000;
                  long minutes = seconds / 60;
                  long hours = minutes / 60;
                  
                  if (hours > 0) {
                      return String.format(Locale.US, "%d:%02d:%02d", hours, minutes % 60, seconds % 60);
                  } else {
                      return String.format(Locale.US, "%02d:%02d", minutes, seconds % 60);
                  }
              }
              
              @Override
              public void onStatusChanged(String provider, int status, Bundle extras) {}
              
              @Override
              public void onProviderEnabled(String provider) {}
              
              @Override
              public void onProviderDisabled(String provider) {}
          }
          EOF

      - name: Create AndroidManifest.xml
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.miletrackerpro.app">
              
              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.INTERNET" />
              
              <application
                  android:allowBackup="true"
                  android:label="@string/app_name"
                  android:theme="@android:style/Theme.Material.Light.NoActionBar">
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:screenOrientation="portrait">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
              </application>
          </manifest>
          EOF

      - name: Generate signing keystore
        run: |
          cd android
          keytool -genkey -v -keystore miletracker-release-key.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 -storepass android -keypass android -dname "CN=MileTracker Pro, OU=MileTracker, O=MileTracker, L=City, S=State, C=US"

      - name: Build signed APK
        run: |
          cd android
          chmod +x gradlew
          ./gradlew clean assembleRelease -Pandroid.injected.signing.store.file=$(pwd)/miletracker-release-key.keystore -Pandroid.injected.signing.store.password=android -Pandroid.injected.signing.key.alias=miletracker -Pandroid.injected.signing.key.password=android

      - name: Find and copy APK
        run: |
          find android -name "*.apk" -type f -exec cp {} ./miletracker-pro-auto.apk \;
          ls -la *.apk

      - name: Upload Auto-Tracking APK
        uses: actions/upload-artifact@v4
        with:
          name: miletracker-pro-auto-v5
          path: "*.apk"
          if-no-files-found: warn
