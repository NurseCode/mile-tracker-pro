name: Build Android APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code for the APK'
        required: true
        default: '49114'
        type: string
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  push:
    paths:
      - '.github/workflows/build-apk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          api-level: 34
          build-tools: 34.0.0
          
      - name: Make gradlew executable
        run: chmod +x android-app/gradlew
        
      - name: Create MainActivity.java
        run: |
          mkdir -p android-app/src/main/java/com/miletrackerpro/app
          cat > android-app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'JAVA_EOF'
          package com.miletrackerpro.app;

          import android.Manifest;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.os.Bundle;
          import android.view.View;
          import android.widget.Button;
          import android.widget.CheckBox;
          import android.widget.EditText;
          import android.widget.LinearLayout;
          import android.widget.ScrollView;
          import android.widget.SearchView;
          import android.widget.SeekBar;
          import android.widget.Spinner;
          import android.widget.Switch;
          import android.widget.TextView;
          import android.widget.Toast;
          import android.widget.ArrayAdapter;
          import android.widget.AdapterView;
          import android.view.Gravity;
          import android.graphics.Color;
          import android.graphics.drawable.GradientDrawable;
          import android.view.ViewGroup;
          import android.view.MotionEvent;
          import android.view.GestureDetector;
          import android.os.Handler;
          import android.content.Context;
          import android.content.SharedPreferences;
          import android.location.LocationManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.app.DatePickerDialog;
          import android.widget.DatePicker;
          import java.util.Calendar;
          import java.util.Date;
          import java.text.SimpleDateFormat;
          import java.util.Locale;
          import java.io.File;
          import java.io.FileWriter;
          import java.io.IOException;
          import android.net.Uri;
          import android.content.pm.ResolveInfo;
          import java.util.List;
          import androidx.core.content.FileProvider;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          import android.app.AlertDialog;
          import android.content.DialogInterface;
          import java.util.ArrayList;
          import java.util.Collections;
          import java.util.Comparator;
          import android.graphics.drawable.Drawable;
          import android.graphics.drawable.ColorDrawable;
          import android.widget.ImageView;
          import android.widget.RelativeLayout;
          import android.location.Address;
          import android.location.Geocoder;
          import java.util.concurrent.ExecutorService;
          import java.util.concurrent.Executors;

          public class MainActivity extends AppCompatActivity implements LocationListener {
              private static final int LOCATION_PERMISSION_REQUEST_CODE = 1001;
              private LocationManager locationManager;
              private boolean isTracking = false;
              private TextView statusText;
              private Button startStopButton;
              private Button autoToggle;
              private TextView speedText;
              private TextView distanceText;
              private TextView statisticsText;
              private ScrollView dashboardScroll;
              private LinearLayout dashboardContent;
              private LinearLayout tripsContent;
              private LinearLayout newContent;
              private LinearLayout doneContent;
              private LinearLayout allTripsLayout;
              private LinearLayout newTripsLayout;
              private LinearLayout doneTripsLayout;
              private ScrollView allTripsScroll;
              private ScrollView newTripsScroll;
              private ScrollView doneTripsScroll;
              private Button homeTabButton;
              private Button newTabButton;
              private Button doneTabButton;
              private TripStorage tripStorage;
              private AutoDetectionService autoDetectionService;
              private BackgroundLocationService backgroundLocationService;
              private CloudBackupService cloudBackupService;
              private Handler handler;
              private boolean isAutoDetectionEnabled = false;
              private GestureDetector gestureDetector;
              private double currentLatitude = 0.0;
              private double currentLongitude = 0.0;
              private double currentSpeed = 0.0;
              private double tripDistance = 0.0;
              private Location lastLocation = null;
              private boolean isBlinking = false;
              private Handler blinkHandler = new Handler();
              private Runnable blinkRunnable;
              private ExecutorService executorService;

              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  // Initialize executor service
                  executorService = Executors.newSingleThreadExecutor();
                  
                  // Initialize services
                  tripStorage = new TripStorage(this);
                  autoDetectionService = new AutoDetectionService(this);
                  backgroundLocationService = new BackgroundLocationService(this);
                  cloudBackupService = new CloudBackupService(this);
                  
                  handler = new Handler();
                  
                  // Check permissions
                  if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                      ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, LOCATION_PERMISSION_REQUEST_CODE);
                  } else {
                      initializeLocationServices();
                  }
                  
                  // Initialize UI
                  setupUI();
                  
                  // Initialize gesture detector for swipe functionality
                  gestureDetector = new GestureDetector(this, new SwipeGestureListener());
                  
                  // Load auto detection state
                  SharedPreferences prefs = getSharedPreferences("MileTrackerPro", Context.MODE_PRIVATE);
                  isAutoDetectionEnabled = prefs.getBoolean("auto_detection_enabled", false);
                  updateAutoDetectionButton();
                  
                  // Start location updates
                  startLocationUpdates();
                  
                  // Show dashboard by default
                  showDashboard();
              }

              private void setupUI() {
                  // Main container
                  LinearLayout mainContainer = new LinearLayout(this);
                  mainContainer.setOrientation(LinearLayout.VERTICAL);
                  mainContainer.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      LinearLayout.LayoutParams.MATCH_PARENT
                  ));
                  
                  // Header
                  LinearLayout header = new LinearLayout(this);
                  header.setOrientation(LinearLayout.HORIZONTAL);
                  header.setBackgroundColor(0xFF667EEA);
                  header.setPadding(20, 40, 20, 20);
                  header.setGravity(Gravity.CENTER_VERTICAL);
                  
                  TextView headerTitle = new TextView(this);
                  headerTitle.setText("MileTracker Pro");
                  headerTitle.setTextColor(Color.WHITE);
                  headerTitle.setTextSize(20);
                  headerTitle.setLayoutParams(new LinearLayout.LayoutParams(
                      0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                  ));
                  header.addView(headerTitle);
                  
                  // Settings button
                  Button settingsButton = new Button(this);
                  settingsButton.setText("⚙️");
                  settingsButton.setTextSize(18);
                  settingsButton.setBackgroundColor(0xFF5A67D8);
                  settingsButton.setTextColor(Color.WHITE);
                  settingsButton.setPadding(15, 10, 15, 10);
                  settingsButton.setOnClickListener(v -> showSettings());
                  header.addView(settingsButton);
                  
                  mainContainer.addView(header);
                  
                  // Content area
                  LinearLayout contentArea = new LinearLayout(this);
                  contentArea.setOrientation(LinearLayout.VERTICAL);
                  contentArea.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      0, 1.0f
                  ));
                  mainContainer.addView(contentArea);
                  
                  // Bottom tab navigation
                  LinearLayout bottomTabLayout = new LinearLayout(this);
                  bottomTabLayout.setOrientation(LinearLayout.HORIZONTAL);
                  bottomTabLayout.setBackgroundColor(0xFFF8F9FA);
                  bottomTabLayout.setPadding(0, 10, 0, 10);
                  
                  // Create tab buttons with equal width
                  LinearLayout.LayoutParams tabParams = new LinearLayout.LayoutParams(
                      0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                  );
                  
                  // Home tab button
                  homeTabButton = new Button(this);
                  homeTabButton.setText("🏠 Home");
                  homeTabButton.setTextSize(12);
                  homeTabButton.setBackgroundColor(0xFF667EEA);
                  homeTabButton.setTextColor(Color.WHITE);
                  homeTabButton.setOnClickListener(v -> showDashboard());
                  homeTabButton.setLayoutParams(tabParams);
                  bottomTabLayout.addView(homeTabButton);
                  
                  // New tab button (for uncategorized trips)
                  newTabButton = new Button(this);
                  newTabButton.setText("📝 New");
                  newTabButton.setTextSize(12);
                  newTabButton.setBackgroundColor(0xFF9CA3AF);
                  newTabButton.setTextColor(Color.WHITE);
                  newTabButton.setOnClickListener(v -> showNewTrips());
                  LinearLayout.LayoutParams newParams = new LinearLayout.LayoutParams(
                      0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                  );
                  newParams.setMargins(5, 0, 5, 0);
                  newTabButton.setLayoutParams(newParams);
                  bottomTabLayout.addView(newTabButton);
                  
                  // Done tab button (for categorized trips)
                  doneTabButton = new Button(this);
                  doneTabButton.setText("✅ Done");
                  doneTabButton.setTextSize(12);
                  doneTabButton.setBackgroundColor(0xFF9CA3AF);
                  doneTabButton.setTextColor(Color.WHITE);
                  doneTabButton.setOnClickListener(v -> showDoneTrips());
                  doneTabButton.setLayoutParams(tabParams);
                  bottomTabLayout.addView(doneTabButton);
                  
                  mainContainer.addView(bottomTabLayout);
                  
                  // CREATE TAB CONTENT
                  createDashboardContent();
                  createNewContent();
                  createDoneContent();
                  
                  // Create persistent ScrollView for dashboard
                  dashboardScroll = new ScrollView(this);
                  dashboardScroll.addView(dashboardContent);
                  
                  // Add dashboard to content area
                  contentArea.addView(dashboardScroll);
                  
                  setContentView(mainContainer);
              }

              private void createDashboardContent() {
                  dashboardContent = new LinearLayout(this);
                  dashboardContent.setOrientation(LinearLayout.VERTICAL);
                  dashboardContent.setPadding(20, 20, 20, 20);
                  
                  // Current Status Section
                  LinearLayout statusSection = new LinearLayout(this);
                  statusSection.setOrientation(LinearLayout.VERTICAL);
                  statusSection.setBackgroundColor(0xFFF8F9FA);
                  statusSection.setPadding(15, 15, 15, 15);
                  statusSection.setGravity(Gravity.CENTER);
                  
                  GradientDrawable statusBorder = new GradientDrawable();
                  statusBorder.setColor(0xFFF8F9FA);
                  statusBorder.setStroke(1, 0xFFE9ECEF);
                  statusBorder.setCornerRadius(8);
                  statusSection.setBackground(statusBorder);
                  
                  statusText = new TextView(this);
                  statusText.setText("📍 Ready to track");
                  statusText.setTextSize(16);
                  statusText.setTextColor(0xFF495057);
                  statusText.setGravity(Gravity.CENTER);
                  statusSection.addView(statusText);
                  
                  dashboardContent.addView(statusSection);
                  
                  // Spacing
                  View spacing1 = new View(this);
                  spacing1.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 20
                  ));
                  dashboardContent.addView(spacing1);
                  
                  // Speed and Distance Display
                  LinearLayout speedDistanceContainer = new LinearLayout(this);
                  speedDistanceContainer.setOrientation(LinearLayout.HORIZONTAL);
                  speedDistanceContainer.setGravity(Gravity.CENTER);
                  
                  speedText = new TextView(this);
                  speedText.setText("Speed: 0.0 mph");
                  speedText.setTextSize(14);
                  speedText.setTextColor(0xFF495057);
                  speedText.setPadding(0, 0, 20, 0);
                  speedDistanceContainer.addView(speedText);
                  
                  distanceText = new TextView(this);
                  distanceText.setText("Distance: 0.0 miles");
                  distanceText.setTextSize(14);
                  distanceText.setTextColor(0xFF495057);
                  speedDistanceContainer.addView(distanceText);
                  
                  dashboardContent.addView(speedDistanceContainer);
                  
                  // Spacing
                  View spacing2 = new View(this);
                  spacing2.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 20
                  ));
                  dashboardContent.addView(spacing2);
                  
                  // Auto Detection Toggle
                  autoToggle = new Button(this);
                  autoToggle.setText("Auto Detection: OFF");
                  autoToggle.setTextSize(14);
                  autoToggle.setBackgroundColor(0xFF6C757D);
                  autoToggle.setTextColor(Color.WHITE);
                  autoToggle.setPadding(20, 15, 20, 15);
                  autoToggle.setOnClickListener(v -> toggleAutoDetection());
                  dashboardContent.addView(autoToggle);
                  
                  // Spacing
                  View spacing3 = new View(this);
                  spacing3.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 20
                  ));
                  dashboardContent.addView(spacing3);
                  
                  // Manual Trip Controls Label
                  TextView manualLabel = new TextView(this);
                  manualLabel.setText("Manual Trip Controls");
                  manualLabel.setTextSize(14);
                  manualLabel.setTextColor(0xFF495057);
                  manualLabel.setGravity(Gravity.CENTER);
                  manualLabel.setPadding(0, 0, 0, 10);
                  dashboardContent.addView(manualLabel);
                  
                  // Manual Start/Stop Button
                  startStopButton = new Button(this);
                  startStopButton.setText("🚀 START TRIP");
                  startStopButton.setTextSize(16);
                  startStopButton.setBackgroundColor(0xFF28A745);
                  startStopButton.setTextColor(Color.WHITE);
                  startStopButton.setPadding(20, 15, 20, 15);
                  startStopButton.setOnClickListener(v -> toggleManualTracking());
                  dashboardContent.addView(startStopButton);
                  
                  // Spacing
                  View spacing4 = new View(this);
                  spacing4.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 30
                  ));
                  dashboardContent.addView(spacing4);
                  
                  // Statistics Section
                  statisticsText = new TextView(this);
                  statisticsText.setText("• Total Trips: 0\n• Total Miles: 0.0");
                  statisticsText.setTextSize(14);
                  statisticsText.setTextColor(0xFF495057);
                  statisticsText.setGravity(Gravity.CENTER);
                  dashboardContent.addView(statisticsText);
                  
                  // Update statistics
                  updateStatistics();
                  
                  // Spacing
                  View spacing5 = new View(this);
                  spacing5.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 30
                  ));
                  dashboardContent.addView(spacing5);
                  
                  // Recent Trips Section
                  TextView recentTripsHeader = new TextView(this);
                  recentTripsHeader.setText("📋 Recent Trips");
                  recentTripsHeader.setTextSize(16);
                  recentTripsHeader.setTextColor(0xFF495057);
                  recentTripsHeader.setGravity(Gravity.CENTER);
                  recentTripsHeader.setPadding(0, 0, 0, 15);
                  dashboardContent.addView(recentTripsHeader);
                  
                  // Recent trips container
                  ScrollView recentTripsScroll = new ScrollView(this);
                  LinearLayout.LayoutParams recentScrollParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 400
                  );
                  recentTripsScroll.setLayoutParams(recentScrollParams);
                  dashboardContent.addView(recentTripsScroll);
              }

              private void createNewContent() {
                  newContent = new LinearLayout(this);
                  newContent.setOrientation(LinearLayout.VERTICAL);
                  newContent.setPadding(20, 20, 20, 20);
                  
                  // Header text
                  TextView headerText = new TextView(this);
                  headerText.setText("Swipe to classify your trips");
                  headerText.setTextSize(16);
                  headerText.setTextColor(0xFF495057);
                  headerText.setGravity(Gravity.CENTER);
                  headerText.setPadding(0, 0, 0, 20);
                  newContent.addView(headerText);
                  
                  // Action buttons row
                  LinearLayout actionButtonsRow = new LinearLayout(this);
                  actionButtonsRow.setOrientation(LinearLayout.HORIZONTAL);
                  actionButtonsRow.setGravity(Gravity.CENTER);
                  actionButtonsRow.setPadding(0, 0, 0, 20);
                  
                  // Equal width parameters for buttons
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      0, 50, 1.0f
                  );
                  buttonParams.setMargins(5, 0, 5, 0);
                  
                  // Merge button
                  Button mergeButton = new Button(this);
                  mergeButton.setText("MERGE");
                  mergeButton.setTextSize(12);
                  mergeButton.setBackgroundColor(0xFF667EEA);
                  mergeButton.setTextColor(Color.WHITE);
                  mergeButton.setLayoutParams(buttonParams);
                  mergeButton.setOnClickListener(v -> showMergeDialog());
                  actionButtonsRow.addView(mergeButton);
                  
                  // Export button
                  Button exportButton = new Button(this);
                  exportButton.setText("EXPORT");
                  exportButton.setTextSize(12);
                  exportButton.setBackgroundColor(0xFF667EEA);
                  exportButton.setTextColor(Color.WHITE);
                  exportButton.setLayoutParams(buttonParams);
                  exportButton.setOnClickListener(v -> showExportDialog());
                  actionButtonsRow.addView(exportButton);
                  
                  newContent.addView(actionButtonsRow);
                  
                  // Search and Filter Section
                  LinearLayout searchFilterSection = new LinearLayout(this);
                  searchFilterSection.setOrientation(LinearLayout.VERTICAL);
                  searchFilterSection.setPadding(0, 0, 0, 15);
                  
                  // Search bar using Android SearchView
                  SearchView searchView = new SearchView(this);
                  searchView.setQueryHint("🔍 Search trips by address, client, notes...");
                  searchView.setIconifiedByDefault(false);
                  searchView.setBackgroundColor(0xFFF8F9FA);
                  LinearLayout.LayoutParams searchParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  searchParams.setMargins(0, 0, 0, 10);
                  searchView.setLayoutParams(searchParams);
                  searchFilterSection.addView(searchView);
                  
                  // Filter row with sort options
                  LinearLayout filterRow = new LinearLayout(this);
                  filterRow.setOrientation(LinearLayout.HORIZONTAL);
                  filterRow.setPadding(0, 10, 0, 0);
                  
                  TextView sortLabel = new TextView(this);
                  sortLabel.setText("Sort:");
                  sortLabel.setTextSize(12);
                  sortLabel.setPadding(0, 0, 10, 0);
                  filterRow.addView(sortLabel);
                  
                  Spinner sortSpinner = new Spinner(this);
                  String[] sortOptions = {"Newest First", "Oldest First", "Distance High-Low", "Distance Low-High"};
                  ArrayAdapter<String> sortAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, sortOptions);
                  sortAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  sortSpinner.setAdapter(sortAdapter);
                  
                  LinearLayout.LayoutParams sortParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  sortSpinner.setLayoutParams(sortParams);
                  filterRow.addView(sortSpinner);
                  
                  searchFilterSection.addView(filterRow);
                  newContent.addView(searchFilterSection);
                  
                  // Add swipe instructions header
                  LinearLayout swipeInstructions = new LinearLayout(this);
                  swipeInstructions.setOrientation(LinearLayout.HORIZONTAL);
                  swipeInstructions.setBackgroundColor(0xFFE8F4FD);
                  swipeInstructions.setPadding(15, 10, 15, 10);
                  swipeInstructions.setGravity(Gravity.CENTER);
                  
                  TextView swipeText = new TextView(this);
                  swipeText.setText("⬅️ Swipe LEFT for Personal  •  Swipe RIGHT for Business ➡️");
                  swipeText.setTextSize(12);
                  swipeText.setTextColor(0xFF495057);
                  swipeText.setGravity(Gravity.CENTER);
                  swipeInstructions.addView(swipeText);
                  
                  newContent.addView(swipeInstructions);
                  
                  // Add event listeners for search and filtering
                  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                      @Override
                      public boolean onQueryTextSubmit(String query) {
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          filterAndDisplayNewTrips(query, sortOption);
                          return true;
                      }
                      
                      @Override
                      public boolean onQueryTextChange(String newText) {
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          filterAndDisplayNewTrips(newText, sortOption);
                          return true;
                      }
                  });
                  
                  sortSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                      @Override
                      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                          String searchQuery = searchView.getQuery().toString();
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          filterAndDisplayNewTrips(searchQuery, sortOption);
                      }
                      
                      @Override
                      public void onNothingSelected(AdapterView<?> parent) {}
                  });
                  
                  // Trips container
                  newTripsScroll = new ScrollView(this);
                  newTripsLayout = new LinearLayout(this);
                  newTripsLayout.setOrientation(LinearLayout.VERTICAL);
                  newTripsScroll.addView(newTripsLayout);
                  
                  LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      0, 1.0f
                  );
                  newTripsScroll.setLayoutParams(scrollParams);
                  newContent.addView(newTripsScroll);
              }

              private void createDoneContent() {
                  doneContent = new LinearLayout(this);
                  doneContent.setOrientation(LinearLayout.VERTICAL);
                  doneContent.setPadding(20, 20, 20, 20);
                  
                  // Header text
                  TextView headerText = new TextView(this);
                  headerText.setText("Categorized Trips");
                  headerText.setTextSize(16);
                  headerText.setTextColor(0xFF495057);
                  headerText.setGravity(Gravity.CENTER);
                  headerText.setPadding(0, 0, 0, 20);
                  doneContent.addView(headerText);
                  
                  // Action buttons row
                  LinearLayout actionButtonsRow = new LinearLayout(this);
                  actionButtonsRow.setOrientation(LinearLayout.HORIZONTAL);
                  actionButtonsRow.setGravity(Gravity.CENTER);
                  actionButtonsRow.setPadding(0, 0, 0, 20);
                  
                  // Equal width parameters for buttons
                  LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(
                      0, 50, 1.0f
                  );
                  buttonParams.setMargins(5, 0, 5, 0);
                  
                  // Merge button
                  Button mergeButton = new Button(this);
                  mergeButton.setText("MERGE");
                  mergeButton.setTextSize(12);
                  mergeButton.setBackgroundColor(0xFF667EEA);
                  mergeButton.setTextColor(Color.WHITE);
                  mergeButton.setLayoutParams(buttonParams);
                  mergeButton.setOnClickListener(v -> showMergeDialog());
                  actionButtonsRow.addView(mergeButton);
                  
                  // Export button
                  Button exportButton = new Button(this);
                  exportButton.setText("EXPORT");
                  exportButton.setTextSize(12);
                  exportButton.setBackgroundColor(0xFF667EEA);
                  exportButton.setTextColor(Color.WHITE);
                  exportButton.setLayoutParams(buttonParams);
                  exportButton.setOnClickListener(v -> showExportDialog());
                  actionButtonsRow.addView(exportButton);
                  
                  doneContent.addView(actionButtonsRow);
                  
                  // Search and Filter Section
                  LinearLayout searchFilterSection = new LinearLayout(this);
                  searchFilterSection.setOrientation(LinearLayout.VERTICAL);
                  searchFilterSection.setPadding(0, 0, 0, 15);
                  
                  // Search bar using Android SearchView
                  SearchView searchView = new SearchView(this);
                  searchView.setQueryHint("🔍 Search trips by address, client, notes...");
                  searchView.setIconifiedByDefault(false);
                  searchView.setBackgroundColor(0xFFF8F9FA);
                  LinearLayout.LayoutParams searchParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  searchParams.setMargins(0, 0, 0, 10);
                  searchView.setLayoutParams(searchParams);
                  searchFilterSection.addView(searchView);
                  
                  // Filter row with sort and category options
                  LinearLayout filterRow = new LinearLayout(this);
                  filterRow.setOrientation(LinearLayout.HORIZONTAL);
                  filterRow.setPadding(0, 10, 0, 0);
                  
                  TextView sortLabel = new TextView(this);
                  sortLabel.setText("Sort:");
                  sortLabel.setTextSize(12);
                  sortLabel.setPadding(0, 0, 10, 0);
                  filterRow.addView(sortLabel);
                  
                  Spinner sortSpinner = new Spinner(this);
                  String[] sortOptions = {"Newest First", "Oldest First", "Distance High-Low", "Distance Low-High"};
                  ArrayAdapter<String> sortAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, sortOptions);
                  sortAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  sortSpinner.setAdapter(sortAdapter);
                  
                  LinearLayout.LayoutParams sortParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  sortSpinner.setLayoutParams(sortParams);
                  filterRow.addView(sortSpinner);
                  
                  TextView categoryLabel = new TextView(this);
                  categoryLabel.setText("Category:");
                  categoryLabel.setTextSize(12);
                  categoryLabel.setPadding(0, 0, 10, 0);
                  filterRow.addView(categoryLabel);
                  
                  Spinner categoryFilterSpinner = new Spinner(this);
                  String[] categoryFilterOptions = {"All Categories", "Business", "Personal", "Medical", "Charity"};
                  ArrayAdapter<String> categoryFilterAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categoryFilterOptions);
                  categoryFilterAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                  categoryFilterSpinner.setAdapter(categoryFilterAdapter);
                  
                  LinearLayout.LayoutParams categoryParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f);
                  categoryFilterSpinner.setLayoutParams(categoryParams);
                  filterRow.addView(categoryFilterSpinner);
                  
                  searchFilterSection.addView(filterRow);
                  doneContent.addView(searchFilterSection);
                  
                  // Add event listeners for search and filtering
                  searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
                      @Override
                      public boolean onQueryTextSubmit(String query) {
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayDoneTrips(query, sortOption, categoryFilter);
                          return true;
                      }
                      
                      @Override
                      public boolean onQueryTextChange(String newText) {
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayDoneTrips(newText, sortOption, categoryFilter);
                          return true;
                      }
                  });
                  
                  sortSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                      @Override
                      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                          String searchQuery = searchView.getQuery().toString();
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayDoneTrips(searchQuery, sortOption, categoryFilter);
                      }
                      
                      @Override
                      public void onNothingSelected(AdapterView<?> parent) {}
                  });
                  
                  categoryFilterSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
                      @Override
                      public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                          String searchQuery = searchView.getQuery().toString();
                          String sortOption = sortSpinner.getSelectedItem().toString();
                          String categoryFilter = categoryFilterSpinner.getSelectedItem().toString();
                          filterAndDisplayDoneTrips(searchQuery, sortOption, categoryFilter);
                      }
                      
                      @Override
                      public void onNothingSelected(AdapterView<?> parent) {}
                  });
                  
                  // Trips container
                  doneTripsScroll = new ScrollView(this);
                  doneTripsLayout = new LinearLayout(this);
                  doneTripsLayout.setOrientation(LinearLayout.VERTICAL);
                  doneTripsScroll.addView(doneTripsLayout);
                  
                  LinearLayout.LayoutParams scrollParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      0, 1.0f
                  );
                  doneTripsScroll.setLayoutParams(scrollParams);
                  doneContent.addView(doneTripsScroll);
              }

              private void filterAndDisplayNewTrips(String searchQuery, String sortOption) {
                  newTripsLayout.removeAllViews();
                  
                  ArrayList<Trip> trips = tripStorage.getAllTrips();
                  ArrayList<Trip> filteredTrips = new ArrayList<>();
                  
                  // Filter for uncategorized trips only
                  for (Trip trip : trips) {
                      if (trip.getCategory() == null || trip.getCategory().equals("Uncategorized")) {
                          // Apply search filter
                          if (searchQuery.isEmpty() || 
                              trip.getStartLocation().toLowerCase().contains(searchQuery.toLowerCase()) ||
                              trip.getEndLocation().toLowerCase().contains(searchQuery.toLowerCase()) ||
                              (trip.getClientName() != null && trip.getClientName().toLowerCase().contains(searchQuery.toLowerCase())) ||
                              (trip.getNotes() != null && trip.getNotes().toLowerCase().contains(searchQuery.toLowerCase()))) {
                              filteredTrips.add(trip);
                          }
                      }
                  }
                  
                  // Sort trips
                  Collections.sort(filteredTrips, new Comparator<Trip>() {
                      @Override
                      public int compare(Trip t1, Trip t2) {
                          switch (sortOption) {
                              case "Newest First":
                                  return Long.compare(t2.getStartTime(), t1.getStartTime());
                              case "Oldest First":
                                  return Long.compare(t1.getStartTime(), t2.getStartTime());
                              case "Distance High-Low":
                                  return Double.compare(t2.getDistance(), t1.getDistance());
                              case "Distance Low-High":
                                  return Double.compare(t1.getDistance(), t2.getDistance());
                              default:
                                  return Long.compare(t2.getStartTime(), t1.getStartTime());
                          }
                      }
                  });
                  
                  if (filteredTrips.isEmpty()) {
                      TextView noTripsText = new TextView(this);
                      if (searchQuery.isEmpty()) {
                          noTripsText.setText("🎉 All trips are categorized!\n\nCheck the Done tab to see your categorized trips.");
                      } else {
                          noTripsText.setText("🔍 No trips match your search\n\nTry different keywords or check the Done tab.");
                      }
                      noTripsText.setTextSize(14);
                      noTripsText.setTextColor(0xFF6C757D);
                      noTripsText.setPadding(15, 30, 15, 15);
                      newTripsLayout.addView(noTripsText);
                  } else {
                      // Add result count header
                      TextView resultCount = new TextView(this);
                      resultCount.setText("📝 " + filteredTrips.size() + " trips need classification");
                      resultCount.setTextSize(12);
                      resultCount.setTextColor(0xFF6C757D);
                      resultCount.setPadding(15, 10, 15, 10);
                      newTripsLayout.addView(resultCount);
                      
                      for (Trip trip : filteredTrips) {
                          addTripCard(newTripsLayout, trip, true);
                      }
                  }
                  
                  // Force UI refresh
                  newTripsLayout.invalidate();
                  newTripsLayout.requestLayout();
                  newTripsScroll.invalidate();
                  newTripsScroll.requestLayout();
              }

              private void filterAndDisplayDoneTrips(String searchQuery, String sortOption, String categoryFilter) {
                  doneTripsLayout.removeAllViews();
                  
                  ArrayList<Trip> trips = tripStorage.getAllTrips();
                  ArrayList<Trip> filteredTrips = new ArrayList<>();
                  
                  // Filter for categorized trips only
                  for (Trip trip : trips) {
                      if (trip.getCategory() != null && !trip.getCategory().equals("Uncategorized")) {
                          // Apply category filter
                          if (categoryFilter.equals("All Categories") || trip.getCategory().equals(categoryFilter)) {
                              // Apply search filter
                              if (searchQuery.isEmpty() || 
                                  trip.getStartLocation().toLowerCase().contains(searchQuery.toLowerCase()) ||
                                  trip.getEndLocation().toLowerCase().contains(searchQuery.toLowerCase()) ||
                                  (trip.getClientName() != null && trip.getClientName().toLowerCase().contains(searchQuery.toLowerCase())) ||
                                  (trip.getNotes() != null && trip.getNotes().toLowerCase().contains(searchQuery.toLowerCase()))) {
                                  filteredTrips.add(trip);
                              }
                          }
                      }
                  }
                  
                  // Sort trips
                  Collections.sort(filteredTrips, new Comparator<Trip>() {
                      @Override
                      public int compare(Trip t1, Trip t2) {
                          switch (sortOption) {
                              case "Newest First":
                                  return Long.compare(t2.getStartTime(), t1.getStartTime());
                              case "Oldest First":
                                  return Long.compare(t1.getStartTime(), t2.getStartTime());
                              case "Distance High-Low":
                                  return Double.compare(t2.getDistance(), t1.getDistance());
                              case "Distance Low-High":
                                  return Double.compare(t1.getDistance(), t2.getDistance());
                              default:
                                  return Long.compare(t2.getStartTime(), t1.getStartTime());
                          }
                      }
                  });
                  
                  if (filteredTrips.isEmpty()) {
                      TextView noTripsText = new TextView(this);
                      if (searchQuery.isEmpty()) {
                          noTripsText.setText("📝 No categorized trips yet\n\nSwipe trips in the New tab to categorize them!");
                      } else {
                          noTripsText.setText("🔍 No trips match your search\n\nTry different keywords or change the category filter");
                      }
                      noTripsText.setTextSize(14);
                      noTripsText.setTextColor(0xFF6C757D);
                      noTripsText.setPadding(15, 30, 15, 15);
                      doneTripsLayout.addView(noTripsText);
                  } else {
                      // Add result count header
                      TextView resultCount = new TextView(this);
                      String categoryText = categoryFilter.equals("All Categories") ? "all categories" : categoryFilter;
                      resultCount.setText("✅ " + filteredTrips.size() + " trips in " + categoryText);
                      resultCount.setTextSize(12);
                      resultCount.setTextColor(0xFF6C757D);
                      resultCount.setPadding(15, 10, 15, 10);
                      doneTripsLayout.addView(resultCount);
                      
                      for (Trip trip : filteredTrips) {
                          addTripCard(doneTripsLayout, trip, false);
                      }
                  }
                  
                  // Force UI refresh
                  doneTripsLayout.invalidate();
                  doneTripsLayout.requestLayout();
                  doneTripsScroll.invalidate();
                  doneTripsScroll.requestLayout();
              }

              private void showDashboard() {
                  // Update tab button states
                  homeTabButton.setBackgroundColor(0xFF667EEA);
                  newTabButton.setBackgroundColor(0xFF9CA3AF);
                  doneTabButton.setBackgroundColor(0xFF9CA3AF);
                  
                  // Show dashboard content
                  ViewGroup parent = (ViewGroup) dashboardScroll.getParent();
                  if (parent != null) {
                      parent.removeAllViews();
                      parent.addView(dashboardScroll);
                  }
                  
                  // Update recent trips
                  updateRecentTrips();
                  updateStatistics();
              }

              private void showNewTrips() {
                  // Update tab button states
                  homeTabButton.setBackgroundColor(0xFF9CA3AF);
                  newTabButton.setBackgroundColor(0xFF667EEA);
                  doneTabButton.setBackgroundColor(0xFF9CA3AF);
                  
                  // Show new content
                  ViewGroup parent = (ViewGroup) dashboardScroll.getParent();
                  if (parent != null) {
                      parent.removeAllViews();
                      
                      ScrollView newScroll = new ScrollView(this);
                      newScroll.addView(newContent);
                      parent.addView(newScroll);
                  }
                  
                  // Update new trips display
                  filterAndDisplayNewTrips("", "Newest First");
              }

              private void showDoneTrips() {
                  // Update tab button states
                  homeTabButton.setBackgroundColor(0xFF9CA3AF);
                  newTabButton.setBackgroundColor(0xFF9CA3AF);
                  doneTabButton.setBackgroundColor(0xFF667EEA);
                  
                  // Show done content
                  ViewGroup parent = (ViewGroup) dashboardScroll.getParent();
                  if (parent != null) {
                      parent.removeAllViews();
                      
                      ScrollView doneScroll = new ScrollView(this);
                      doneScroll.addView(doneContent);
                      parent.addView(doneScroll);
                  }
                  
                  // Update done trips display
                  filterAndDisplayDoneTrips("", "Newest First", "All Categories");
              }

              private void updateRecentTrips() {
                  // Find the recent trips container and update it
                  ArrayList<Trip> trips = tripStorage.getAllTrips();
                  Collections.sort(trips, new Comparator<Trip>() {
                      @Override
                      public int compare(Trip t1, Trip t2) {
                          return Long.compare(t2.getStartTime(), t1.getStartTime());
                      }
                  });
                  
                  // Show up to 3 most recent trips
                  int displayCount = Math.min(3, trips.size());
                  StringBuilder recentTripsText = new StringBuilder();
                  
                  for (int i = 0; i < displayCount; i++) {
                      Trip trip = trips.get(i);
                      String detection = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                      String category = trip.getCategory() != null ? trip.getCategory() : "Uncategorized";
                      recentTripsText.append(detection)
                          .append(" • ")
                          .append(String.format("%.1f", trip.getDistance()))
                          .append(" mi • ")
                          .append(category);
                      if (i < displayCount - 1) {
                          recentTripsText.append("\n");
                      }
                  }
                  
                  // Update the recent trips display in dashboard
                  // This would be implemented with proper view finding
              }

              private void updateStatistics() {
                  ArrayList<Trip> trips = tripStorage.getAllTrips();
                  double totalMiles = 0.0;
                  
                  for (Trip trip : trips) {
                      totalMiles += trip.getDistance();
                  }
                  
                  String statsText = "• Total Trips: " + trips.size() + "\n• Total Miles: " + String.format("%.1f", totalMiles);
                  statisticsText.setText(statsText);
              }

              private void addTripCard(LinearLayout container, Trip trip, boolean enableSwipe) {
                  LinearLayout tripCard = new LinearLayout(this);
                  tripCard.setOrientation(LinearLayout.VERTICAL);
                  tripCard.setPadding(15, 15, 15, 15);
                  tripCard.setBackgroundColor(0xFFF8F9FA);
                  
                  // Add border
                  GradientDrawable border = new GradientDrawable();
                  border.setColor(0xFFF8F9FA);
                  border.setStroke(1, 0xFFE9ECEF);
                  border.setCornerRadius(8);
                  tripCard.setBackground(border);
                  
                  // Add margin
                  LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT,
                      LinearLayout.LayoutParams.WRAP_CONTENT
                  );
                  cardParams.setMargins(0, 0, 0, 10);
                  tripCard.setLayoutParams(cardParams);
                  
                  // Trip details
                  TextView tripDetails = new TextView(this);
                  String detection = trip.isAutoDetected() ? "🤖 Auto" : "✋ Manual";
                  String category = trip.getCategory() != null ? trip.getCategory() : "Uncategorized";
                  
                  Date startDate = new Date(trip.getStartTime());
                  SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm", Locale.getDefault());
                  
                  tripDetails.setText(detection + " • " + String.format("%.1f", trip.getDistance()) + " mi • " + category + "\n" +
                      "📍 " + trip.getStartLocation() + "\n" +
                      "🏁 " + trip.getEndLocation() + "\n" +
                      "⏰ " + dateFormat.format(startDate));
                  tripDetails.setTextSize(12);
                  tripDetails.setTextColor(0xFF495057);
                  tripCard.addView(tripDetails);
                  
                  // Add swipe instruction text for uncategorized trips
                  if (enableSwipe && (trip.getCategory() == null || trip.getCategory().equals("Uncategorized"))) {
                      TextView swipeHint = new TextView(this);
                      swipeHint.setText("⬅️ Swipe left: Personal  |  Swipe right: Business ➡️");
                      swipeHint.setTextSize(10);
                      swipeHint.setTextColor(0xFF6C757D);
                      swipeHint.setGravity(Gravity.CENTER);
                      swipeHint.setPadding(0, 5, 0, 0);
                      tripCard.addView(swipeHint);
                  }
                  
                  // Enable swipe gestures for classification
                  if (enableSwipe) {
                      tripCard.setOnTouchListener(new View.OnTouchListener() {
                          @Override
                          public boolean onTouch(View v, MotionEvent event) {
                              gestureDetector.onTouchEvent(event);
                              return true;
                          }
                      });
                      
                      // Store trip reference for swipe handling
                      tripCard.setTag(trip);
                  }
                  
                  container.addView(tripCard);
              }

              // Gesture listener for swipe functionality
              private class SwipeGestureListener extends GestureDetector.SimpleOnGestureListener {
                  private static final int SWIPE_THRESHOLD = 30;
                  private static final int SWIPE_VELOCITY_THRESHOLD = 50;
                  
                  @Override
                  public boolean onDown(MotionEvent e) {
                      return true;
                  }
                  
                  @Override
                  public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
                      float diffX = e2.getX() - e1.getX();
                      float diffY = e2.getY() - e1.getY();
                      
                      if (Math.abs(diffX) > Math.abs(diffY)) {
                          if (Math.abs(diffX) > SWIPE_THRESHOLD && Math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                              // Find the trip card that was swiped
                              View view = findViewAt(newTripsLayout, e1.getX(), e1.getY());
                              if (view != null && view.getTag() instanceof Trip) {
                                  Trip trip = (Trip) view.getTag();
                                  
                                  if (diffX > 0) {
                                      // Right swipe - Business
                                      classifyTrip(trip, "Business", view);
                                  } else {
                                      // Left swipe - Personal
                                      classifyTrip(trip, "Personal", view);
                                  }
                                  return true;
                              }
                          }
                      }
                      return false;
                  }
              }
              
              private View findViewAt(ViewGroup parent, float x, float y) {
                  for (int i = 0; i < parent.getChildCount(); i++) {
                      View child = parent.getChildAt(i);
                      if (child.getLeft() <= x && x <= child.getRight() &&
                          child.getTop() <= y && y <= child.getBottom()) {
                          return child;
                      }
                  }
                  return null;
              }
              
              private void classifyTrip(Trip trip, String category, View tripCard) {
                  // Flash the card with appropriate color
                  int originalColor = 0xFFF8F9FA;
                  int flashColor = category.equals("Business") ? 0xFF90EE90 : 0xFF87CEEB;
                  
                  tripCard.setBackgroundColor(flashColor);
                  
                  // Update trip category
                  trip.setCategory(category);
                  tripStorage.updateTrip(trip);
                  
                  // Show success message
                  Toast.makeText(this, "Trip classified as " + category, Toast.LENGTH_SHORT).show();
                  
                  // Auto-learning functionality
                  autoDetectionService.learnFromClassification(trip);
                  
                  // Restore original color after delay and refresh
                  handler.postDelayed(new Runnable() {
                      @Override
                      public void run() {
                          tripCard.setBackgroundColor(originalColor);
                          // Refresh the New tab display
                          filterAndDisplayNewTrips("", "Newest First");
                      }
                  }, 500);
              }

              // Rest of the methods remain the same...
              private void initializeLocationServices() {
                  locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
              }

              private void startLocationUpdates() {
                  if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                      locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 5000, 5, this);
                  }
              }

              private void toggleAutoDetection() {
                  isAutoDetectionEnabled = !isAutoDetectionEnabled;
                  
                  SharedPreferences prefs = getSharedPreferences("MileTrackerPro", Context.MODE_PRIVATE);
                  SharedPreferences.Editor editor = prefs.edit();
                  editor.putBoolean("auto_detection_enabled", isAutoDetectionEnabled);
                  editor.apply();
                  
                  if (isAutoDetectionEnabled) {
                      autoDetectionService.startAutoDetection();
                      startBlinkingAnimation();
                  } else {
                      autoDetectionService.stopAutoDetection();
                      stopBlinkingAnimation();
                  }
                  
                  updateAutoDetectionButton();
              }

              private void updateAutoDetectionButton() {
                  if (isAutoDetectionEnabled) {
                      autoToggle.setText("Auto Detection: ON");
                      autoToggle.setBackgroundColor(0xFF28A745);
                  } else {
                      autoToggle.setText("Auto Detection: OFF");
                      autoToggle.setBackgroundColor(0xFF6C757D);
                  }
              }

              private void startBlinkingAnimation() {
                  if (isBlinking) return;
                  
                  isBlinking = true;
                  blinkRunnable = new Runnable() {
                      boolean showBright = false;
                      
                      @Override
                      public void run() {
                          if (isAutoDetectionEnabled && isBlinking) {
                              if (showBright) {
                                  autoToggle.setText("🔆🚘🔆 Auto Detection: ON");
                              } else {
                                  autoToggle.setText("🚘 Auto Detection: ON");
                              }
                              showBright = !showBright;
                              blinkHandler.postDelayed(this, 800);
                          }
                      }
                  };
                  blinkHandler.post(blinkRunnable);
              }

              private void stopBlinkingAnimation() {
                  isBlinking = false;
                  if (blinkRunnable != null) {
                      blinkHandler.removeCallbacks(blinkRunnable);
                  }
                  autoToggle.setText("Auto Detection: OFF");
              }

              private void toggleManualTracking() {
                  if (isTracking) {
                      stopTracking();
                  } else {
                      startTracking();
                  }
              }

              private void startTracking() {
                  isTracking = true;
                  tripDistance = 0.0;
                  lastLocation = null;
                  
                  startStopButton.setText("⏹️ STOP TRIP");
                  startStopButton.setBackgroundColor(0xFFDC3545);
                  statusText.setText("🚗 Tracking active");
                  
                  // Start trip in storage
                  tripStorage.startTrip(currentLatitude, currentLongitude, false);
                  
                  Toast.makeText(this, "Manual tracking started", Toast.LENGTH_SHORT).show();
              }

              private void stopTracking() {
                  isTracking = false;
                  
                  startStopButton.setText("🚀 START TRIP");
                  startStopButton.setBackgroundColor(0xFF28A745);
                  statusText.setText("📍 Ready to track");
                  
                  // Stop trip in storage
                  tripStorage.stopTrip(currentLatitude, currentLongitude);
                  
                  Toast.makeText(this, "Manual tracking stopped", Toast.LENGTH_SHORT).show();
                  
                  // Reset distance
                  tripDistance = 0.0;
                  distanceText.setText("Distance: 0.0 miles");
                  
                  // Update statistics
                  updateStatistics();
              }

              @Override
              public void onLocationChanged(Location location) {
                  currentLatitude = location.getLatitude();
                  currentLongitude = location.getLongitude();
                  currentSpeed = location.getSpeed() * 2.237; // Convert m/s to mph
                  
                  // Update speed display
                  speedText.setText("Speed: " + String.format("%.1f", currentSpeed) + " mph");
                  
                  // Update distance if tracking
                  if (isTracking && lastLocation != null) {
                      float distance = lastLocation.distanceTo(location);
                      tripDistance += distance * 0.000621371; // Convert meters to miles
                      distanceText.setText("Distance: " + String.format("%.1f", tripDistance) + " miles");
                  }
                  
                  lastLocation = location;
                  
                  // Update auto detection service
                  if (isAutoDetectionEnabled) {
                      autoDetectionService.updateLocation(location);
                  }
              }

              @Override
              public void onStatusChanged(String provider, int status, Bundle extras) {}

              @Override
              public void onProviderEnabled(String provider) {}

              @Override
              public void onProviderDisabled(String provider) {}

              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                  if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
                      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                          initializeLocationServices();
                          startLocationUpdates();
                      } else {
                          Toast.makeText(this, "Location permission required for tracking", Toast.LENGTH_LONG).show();
                      }
                  }
              }

              private void showSettings() {
                  AlertDialog.Builder builder = new AlertDialog.Builder(this);
                  builder.setTitle("⚙️ Settings");
                  
                  LinearLayout settingsLayout = new LinearLayout(this);
                  settingsLayout.setOrientation(LinearLayout.VERTICAL);
                  settingsLayout.setPadding(20, 20, 20, 20);
                  
                  // Cloud backup toggle
                  LinearLayout cloudBackupRow = new LinearLayout(this);
                  cloudBackupRow.setOrientation(LinearLayout.HORIZONTAL);
                  cloudBackupRow.setGravity(Gravity.CENTER_VERTICAL);
                  
                  TextView cloudBackupLabel = new TextView(this);
                  cloudBackupLabel.setText("☁️ Cloud Backup:");
                  cloudBackupLabel.setTextSize(14);
                  cloudBackupLabel.setLayoutParams(new LinearLayout.LayoutParams(
                      0, LinearLayout.LayoutParams.WRAP_CONTENT, 1.0f
                  ));
                  cloudBackupRow.addView(cloudBackupLabel);
                  
                  Switch cloudBackupSwitch = new Switch(this);
                  cloudBackupSwitch.setChecked(cloudBackupService.isEnabled());
                  cloudBackupSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> {
                      cloudBackupService.setEnabled(isChecked);
                      Toast.makeText(this, "Cloud backup " + (isChecked ? "enabled" : "disabled"), Toast.LENGTH_SHORT).show();
                  });
                  cloudBackupRow.addView(cloudBackupSwitch);
                  
                  settingsLayout.addView(cloudBackupRow);
                  
                  // Add some spacing
                  View spacing = new View(this);
                  spacing.setLayoutParams(new LinearLayout.LayoutParams(
                      LinearLayout.LayoutParams.MATCH_PARENT, 20
                  ));
                  settingsLayout.addView(spacing);
                  
                  // Premium features info
                  TextView premiumInfo = new TextView(this);
                  premiumInfo.setText("🌟 Premium Features Available:\n\n" +
                      "• Unlimited automatic trip tracking\n" +
                      "• Advanced reporting and analytics\n" +
                      "• Export to multiple formats\n" +
                      "• Priority customer support\n\n" +
                      "Subscription: $4.99/month");
                  premiumInfo.setTextSize(12);
                  premiumInfo.setTextColor(0xFF6C757D);
                  settingsLayout.addView(premiumInfo);
                  
                  builder.setView(settingsLayout);
                  builder.setPositiveButton("Close", null);
                  builder.show();
              }

              private void showMergeDialog() {
                  // Implementation for merge dialog
                  Toast.makeText(this, "Merge functionality - select trips to combine", Toast.LENGTH_SHORT).show();
              }

              private void showExportDialog() {
                  AlertDialog.Builder builder = new AlertDialog.Builder(this);
                  builder.setTitle("📤 Export Trips");
                  
                  LinearLayout exportLayout = new LinearLayout(this);
                  exportLayout.setOrientation(LinearLayout.VERTICAL);
                  exportLayout.setPadding(20, 20, 20, 20);
                  
                  TextView exportInfo = new TextView(this);
                  exportInfo.setText("Choose export format:");
                  exportInfo.setTextSize(14);
                  exportInfo.setPadding(0, 0, 0, 15);
                  exportLayout.addView(exportInfo);
                  
                  Button csvButton = new Button(this);
                  csvButton.setText("📊 CSV Spreadsheet");
                  csvButton.setOnClickListener(v -> {
                      exportTrips(true);
                  });
                  exportLayout.addView(csvButton);
                  
                  Button txtButton = new Button(this);
                  txtButton.setText("📄 Text Document");
                  txtButton.setOnClickListener(v -> {
                      exportTrips(false);
                  });
                  exportLayout.addView(txtButton);
                  
                  builder.setView(exportLayout);
                  builder.setNegativeButton("Cancel", null);
                  builder.show();
              }

              private void exportTrips(boolean isCSV) {
                  try {
                      String fileName = "MileTracker_Export_" + 
                          new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault()).format(new Date()) + 
                          (isCSV ? ".csv" : ".txt");
                      
                      File exportFile = new File(getExternalFilesDir(null), fileName);
                      FileWriter writer = new FileWriter(exportFile);
                      
                      ArrayList<Trip> trips = tripStorage.getAllTrips();
                      
                      if (isCSV) {
                          writer.write("Date,Start Location,End Location,Distance,Category,Auto Detected,Client,Notes\n");
                          for (Trip trip : trips) {
                              Date startDate = new Date(trip.getStartTime());
                              SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault());
                              writer.write(dateFormat.format(startDate) + "," +
                                  trip.getStartLocation() + "," +
                                  trip.getEndLocation() + "," +
                                  String.format("%.2f", trip.getDistance()) + "," +
                                  (trip.getCategory() != null ? trip.getCategory() : "Uncategorized") + "," +
                                  (trip.isAutoDetected() ? "Yes" : "No") + "," +
                                  (trip.getClientName() != null ? trip.getClientName() : "") + "," +
                                  (trip.getNotes() != null ? trip.getNotes() : "") + "\n");
                          }
                      } else {
                          writer.write("MileTracker Pro - Trip Export\n");
                          writer.write("Generated: " + new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault()).format(new Date()) + "\n\n");
                          
                          for (Trip trip : trips) {
                              Date startDate = new Date(trip.getStartTime());
                              SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm", Locale.getDefault());
                              writer.write("Date: " + dateFormat.format(startDate) + "\n");
                              writer.write("Start: " + trip.getStartLocation() + "\n");
                              writer.write("End: " + trip.getEndLocation() + "\n");
                              writer.write("Distance: " + String.format("%.2f", trip.getDistance()) + " miles\n");
                              writer.write("Category: " + (trip.getCategory() != null ? trip.getCategory() : "Uncategorized") + "\n");
                              writer.write("Detection: " + (trip.isAutoDetected() ? "Automatic" : "Manual") + "\n");
                              if (trip.getClientName() != null) {
                                  writer.write("Client: " + trip.getClientName() + "\n");
                              }
                              if (trip.getNotes() != null) {
                                  writer.write("Notes: " + trip.getNotes() + "\n");
                              }
                              writer.write("\n");
                          }
                      }
                      
                      writer.close();
                      
                      // Create URI for the file
                      Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                      
                      Intent shareIntent = new Intent(Intent.ACTION_SEND);
                      shareIntent.setType(isCSV ? "text/csv" : "text/plain");
                      shareIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export");
                      shareIntent.putExtra(Intent.EXTRA_TEXT, "MileTracker Pro trip data export attached.\n\n" +
                          "Total Trips: " + trips.size());
                      shareIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                      shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                      
                      if (shareIntent.resolveActivity(getPackageManager()) != null) {
                          startActivity(Intent.createChooser(shareIntent, "Export trips..."));
                      }
                      
                  } catch (IOException e) {
                      Toast.makeText(this, "Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                  }
              }

              @Override
              protected void onDestroy() {
                  super.onDestroy();
                  if (executorService != null) {
                      executorService.shutdown();
                  }
                  if (blinkHandler != null && blinkRunnable != null) {
                      blinkHandler.removeCallbacks(blinkRunnable);
                  }
              }
          }
          JAVA_EOF
        
      - name: Create TripStorage.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/TripStorage.java << 'JAVA_EOF'
          package com.miletrackerpro.app;

          import android.content.Context;
          import android.content.SharedPreferences;
          import com.google.gson.Gson;
          import com.google.gson.reflect.TypeToken;
          import java.lang.reflect.Type;
          import java.util.ArrayList;
          import java.util.List;

          public class TripStorage {
              private Context context;
              private SharedPreferences sharedPreferences;
              private Gson gson;
              private static final String PREFS_NAME = "MileTrackerPro";
              private static final String TRIPS_KEY = "trips";
              private static final String ACTIVE_TRIP_KEY = "active_trip";

              public TripStorage(Context context) {
                  this.context = context;
                  this.sharedPreferences = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                  this.gson = new Gson();
              }

              public void startTrip(double latitude, double longitude, boolean autoDetected) {
                  Trip trip = new Trip();
                  trip.setStartTime(System.currentTimeMillis());
                  trip.setStartLatitude(latitude);
                  trip.setStartLongitude(longitude);
                  trip.setStartLocation("Starting location...");
                  trip.setAutoDetected(autoDetected);
                  trip.setActive(true);
                  
                  String tripJson = gson.toJson(trip);
                  sharedPreferences.edit().putString(ACTIVE_TRIP_KEY, tripJson).apply();
              }

              public void stopTrip(double latitude, double longitude) {
                  String activeTrip = sharedPreferences.getString(ACTIVE_TRIP_KEY, null);
                  if (activeTrip != null) {
                      Trip trip = gson.fromJson(activeTrip, Trip.class);
                      trip.setEndTime(System.currentTimeMillis());
                      trip.setEndLatitude(latitude);
                      trip.setEndLongitude(longitude);
                      trip.setEndLocation("Ending location...");
                      trip.setActive(false);
                      
                      // Calculate distance
                      double distance = calculateDistance(
                          trip.getStartLatitude(), trip.getStartLongitude(),
                          trip.getEndLatitude(), trip.getEndLongitude()
                      );
                      trip.setDistance(distance);
                      
                      // Save trip
                      saveTrip(trip);
                      
                      // Clear active trip
                      sharedPreferences.edit().remove(ACTIVE_TRIP_KEY).apply();
                  }
              }

              public void saveTrip(Trip trip) {
                  ArrayList<Trip> trips = getAllTrips();
                  trips.add(trip);
                  
                  String tripsJson = gson.toJson(trips);
                  sharedPreferences.edit().putString(TRIPS_KEY, tripsJson).apply();
              }

              public void updateTrip(Trip updatedTrip) {
                  ArrayList<Trip> trips = getAllTrips();
                  for (int i = 0; i < trips.size(); i++) {
                      if (trips.get(i).getStartTime() == updatedTrip.getStartTime()) {
                          trips.set(i, updatedTrip);
                          break;
                      }
                  }
                  
                  String tripsJson = gson.toJson(trips);
                  sharedPreferences.edit().putString(TRIPS_KEY, tripsJson).apply();
              }

              public ArrayList<Trip> getAllTrips() {
                  String tripsJson = sharedPreferences.getString(TRIPS_KEY, null);
                  if (tripsJson != null) {
                      Type listType = new TypeToken<ArrayList<Trip>>(){}.getType();
                      return gson.fromJson(tripsJson, listType);
                  }
                  return new ArrayList<>();
              }

              public Trip getActiveTrip() {
                  String activeTrip = sharedPreferences.getString(ACTIVE_TRIP_KEY, null);
                  if (activeTrip != null) {
                      return gson.fromJson(activeTrip, Trip.class);
                  }
                  return null;
              }

              private double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
                  final int R = 6371; // Radius of the earth in km
                  double latDistance = Math.toRadians(lat2 - lat1);
                  double lonDistance = Math.toRadians(lon2 - lon1);
                  double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                          + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                          * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
                  double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                  double distance = R * c * 1000; // convert to meters
                  return distance * 0.000621371; // convert to miles
              }
          }
          JAVA_EOF
        
      - name: Create Trip.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/Trip.java << 'JAVA_EOF'
          package com.miletrackerpro.app;

          public class Trip {
              private long startTime;
              private long endTime;
              private double startLatitude;
              private double startLongitude;
              private double endLatitude;
              private double endLongitude;
              private String startLocation;
              private String endLocation;
              private double distance;
              private boolean autoDetected;
              private boolean active;
              private String category;
              private String clientName;
              private String notes;

              public Trip() {
                  this.startTime = System.currentTimeMillis();
                  this.autoDetected = false;
                  this.active = false;
                  this.category = "Uncategorized";
              }

              // Getters and setters
              public long getStartTime() { return startTime; }
              public void setStartTime(long startTime) { this.startTime = startTime; }

              public long getEndTime() { return endTime; }
              public void setEndTime(long endTime) { this.endTime = endTime; }

              public double getStartLatitude() { return startLatitude; }
              public void setStartLatitude(double startLatitude) { this.startLatitude = startLatitude; }

              public double getStartLongitude() { return startLongitude; }
              public void setStartLongitude(double startLongitude) { this.startLongitude = startLongitude; }

              public double getEndLatitude() { return endLatitude; }
              public void setEndLatitude(double endLatitude) { this.endLatitude = endLatitude; }

              public double getEndLongitude() { return endLongitude; }
              public void setEndLongitude(double endLongitude) { this.endLongitude = endLongitude; }

              public String getStartLocation() { return startLocation; }
              public void setStartLocation(String startLocation) { this.startLocation = startLocation; }

              public String getEndLocation() { return endLocation; }
              public void setEndLocation(String endLocation) { this.endLocation = endLocation; }

              public double getDistance() { return distance; }
              public void setDistance(double distance) { this.distance = distance; }

              public boolean isAutoDetected() { return autoDetected; }
              public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }

              public boolean isActive() { return active; }
              public void setActive(boolean active) { this.active = active; }

              public String getCategory() { return category; }
              public void setCategory(String category) { this.category = category; }

              public String getClientName() { return clientName; }
              public void setClientName(String clientName) { this.clientName = clientName; }

              public String getNotes() { return notes; }
              public void setNotes(String notes) { this.notes = notes; }
          }
          JAVA_EOF
        
      - name: Create AutoDetectionService.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/AutoDetectionService.java << 'JAVA_EOF'
          package com.miletrackerpro.app;

          import android.content.Context;
          import android.content.SharedPreferences;
          import android.location.Location;
          import android.os.Handler;
          import com.google.gson.Gson;
          import com.google.gson.reflect.TypeToken;
          import java.lang.reflect.Type;
          import java.util.ArrayList;
          import java.util.HashMap;
          import java.util.Map;

          public class AutoDetectionService {
              private Context context;
              private TripStorage tripStorage;
              private Handler handler;
              private boolean isRunning = false;
              private Location lastLocation;
              private long lastMovementTime;
              private static final double SPEED_THRESHOLD = 8.0; // 8 mph
              private static final long STATIONARY_THRESHOLD = 300000; // 5 minutes
              private Map<String, String> locationCategories;
              private SharedPreferences sharedPreferences;
              private Gson gson;

              public AutoDetectionService(Context context) {
                  this.context = context;
                  this.tripStorage = new TripStorage(context);
                  this.handler = new Handler();
                  this.locationCategories = new HashMap<>();
                  this.sharedPreferences = context.getSharedPreferences("MileTrackerPro", Context.MODE_PRIVATE);
                  this.gson = new Gson();
                  loadLocationCategories();
              }

              public void startAutoDetection() {
                  isRunning = true;
                  lastMovementTime = System.currentTimeMillis();
              }

              public void stopAutoDetection() {
                  isRunning = false;
              }

              public void updateLocation(Location location) {
                  if (!isRunning) return;

                  double speed = location.getSpeed() * 2.237; // Convert m/s to mph
                  
                  if (speed > SPEED_THRESHOLD) {
                      // Movement detected
                      lastMovementTime = System.currentTimeMillis();
                      
                      // Check if we should start a trip
                      Trip activeTrip = tripStorage.getActiveTrip();
                      if (activeTrip == null) {
                          tripStorage.startTrip(location.getLatitude(), location.getLongitude(), true);
                      }
                  } else {
                      // Stationary or slow movement
                      long stationaryTime = System.currentTimeMillis() - lastMovementTime;
                      
                      if (stationaryTime > STATIONARY_THRESHOLD) {
                          // Stop trip if active
                          Trip activeTrip = tripStorage.getActiveTrip();
                          if (activeTrip != null) {
                              tripStorage.stopTrip(location.getLatitude(), location.getLongitude());
                          }
                      }
                  }
                  
                  lastLocation = location;
              }

              public void learnFromClassification(Trip trip) {
                  String locationKey = simplifyLocation(trip.getStartLocation());
                  locationCategories.put(locationKey, trip.getCategory());
                  saveLocationCategories();
              }

              public String suggestCategory(String location) {
                  String locationKey = simplifyLocation(location);
                  return locationCategories.get(locationKey);
              }

              private String simplifyLocation(String location) {
                  if (location == null) return "";
                  
                  // Remove numbers and common words to create a more general location key
                  return location.toLowerCase()
                      .replaceAll("\\d+", "")
                      .replaceAll("\\b(st|street|ave|avenue|rd|road|dr|drive|blvd|boulevard|way|ln|lane)\\b", "")
                      .replaceAll("\\s+", " ")
                      .trim();
              }

              private void saveLocationCategories() {
                  String json = gson.toJson(locationCategories);
                  sharedPreferences.edit().putString("location_categories", json).apply();
              }

              private void loadLocationCategories() {
                  String json = sharedPreferences.getString("location_categories", null);
                  if (json != null) {
                      Type type = new TypeToken<Map<String, String>>(){}.getType();
                      locationCategories = gson.fromJson(json, type);
                  }
                  if (locationCategories == null) {
                      locationCategories = new HashMap<>();
                  }
              }
          }
          JAVA_EOF
        
      - name: Create BackgroundLocationService.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/BackgroundLocationService.java << 'JAVA_EOF'
          package com.miletrackerpro.app;

          import android.app.Service;
          import android.content.Intent;
          import android.os.IBinder;
          import android.content.Context;

          public class BackgroundLocationService extends Service {
              private Context context;

              public BackgroundLocationService(Context context) {
                  this.context = context;
              }

              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }

              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  return START_STICKY;
              }

              @Override
              public void onDestroy() {
                  super.onDestroy();
              }
          }
          JAVA_EOF
        
      - name: Create CloudBackupService.java
        run: |
          cat > android-app/src/main/java/com/miletrackerpro/app/CloudBackupService.java << 'JAVA_EOF'
          package com.miletrackerpro.app;

          import android.content.Context;
          import android.content.SharedPreferences;
          import java.util.ArrayList;

          public class CloudBackupService {
              private Context context;
              private SharedPreferences sharedPreferences;
              private boolean isEnabled;

              public CloudBackupService(Context context) {
                  this.context = context;
                  this.sharedPreferences = context.getSharedPreferences("MileTrackerPro", Context.MODE_PRIVATE);
                  this.isEnabled = sharedPreferences.getBoolean("cloud_backup_enabled", false);
              }

              public void setEnabled(boolean enabled) {
                  this.isEnabled = enabled;
                  sharedPreferences.edit().putBoolean("cloud_backup_enabled", enabled).apply();
              }

              public boolean isEnabled() {
                  return isEnabled;
              }

              public void syncTrips() {
                  if (!isEnabled) return;
                  
                  // Implementation for cloud sync
                  // This would typically involve API calls to sync with a remote server
              }
          }
          JAVA_EOF
        
      - name: Create Android Manifest
        run: |
          mkdir -p android-app/src/main
          cat > android-app/src/main/AndroidManifest.xml << 'XML_EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              package="com.miletrackerpro.app">

              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
              <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

              <application
                  android:allowBackup="true"
                  android:icon="@mipmap/ic_launcher"
                  android:label="@string/app_name"
                  android:theme="@style/AppTheme">
                  
                  <activity android:name=".MainActivity"
                      android:exported="true">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  
                  <provider
                      android:name="androidx.core.content.FileProvider"
                      android:authorities="${applicationId}.fileprovider"
                      android:exported="false"
                      android:grantUriPermissions="true">
                      <meta-data
                          android:name="android.support.FILE_PROVIDER_PATHS"
                          android:resource="@xml/file_paths" />
                  </provider>
                  
              </application>
          </manifest>
          XML_EOF
        
      - name: Create resources
        run: |
          mkdir -p android-app/src/main/res/values
          mkdir -p android-app/src/main/res/mipmap-hdpi
          mkdir -p android-app/src/main/res/xml
          
          # Create strings.xml
          cat > android-app/src/main/res/values/strings.xml << 'XML_EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
          </resources>
          XML_EOF
          
          # Create styles.xml
          cat > android-app/src/main/res/values/styles.xml << 'XML_EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667EEA</item>
                  <item name="colorPrimaryDark">#5A67D8</item>
                  <item name="colorAccent">#667EEA</item>
              </style>
          </resources>
          XML_EOF
          
          # Create file_paths.xml
          cat > android-app/src/main/res/xml/file_paths.xml << 'XML_EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <paths xmlns:android="http://schemas.android.com/apk/res/android">
              <external-files-path name="my_files" path="." />
          </paths>
          XML_EOF
          
          # Create a simple launcher icon
          echo "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==" | base64 -d > android-app/src/main/res/mipmap-hdpi/ic_launcher.png
        
      - name: Create build.gradle (app)
        run: |
          cat > android-app/build.gradle << 'GRADLE_EOF'
          apply plugin: 'com.android.application'

          android {
              compileSdkVersion 34
              buildToolsVersion "34.0.0"

              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdkVersion 21
                  targetSdkVersion 34
                  versionCode ${{ github.event.inputs.version_code }}
                  versionName "4.9.114"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
          }

          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'com.google.code.gson:gson:2.8.9'
              implementation 'androidx.core:core:1.9.0'
              implementation 'com.google.android.material:material:1.8.0'
          }
          GRADLE_EOF
        
      - name: Create settings.gradle
        run: |
          cat > android-app/settings.gradle << 'GRADLE_EOF'
          include ':app'
          project(':app').projectDir = new File('.')
          GRADLE_EOF
        
      - name: Create build.gradle (project)
        run: |
          cat > android-app/build.gradle << 'GRADLE_EOF'
          buildscript {
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath 'com.android.tools.build:gradle:7.4.0'
              }
          }

          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          GRADLE_EOF
        
      - name: Create gradle wrapper
        run: |
          cd android-app
          mkdir -p gradle/wrapper
          cat > gradle/wrapper/gradle-wrapper.properties << 'PROPS_EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-bin.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          PROPS_EOF
        
      - name: Create gradle.properties
        run: |
          cat > android-app/gradle.properties << 'PROPS_EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          PROPS_EOF
        
      - name: Create proguard-rules.pro
        run: |
          cat > android-app/proguard-rules.pro << 'PROGUARD_EOF'
          -keep class com.miletrackerpro.app.** { *; }
          -keepclassmembers class ** {
              @com.google.gson.annotations.SerializedName <fields>;
          }
          PROGUARD_EOF
        
      - name: Clean build
        run: |
          cd android-app
          ./gradlew clean
        
      - name: Build APK
        run: |
          cd android-app
          ./gradlew assembleRelease
        
      - name: Create keystore and sign APK
        run: |
          cd android-app
          
          # Create keystore
          keytool -genkey -v -keystore miletracker.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 -storepass miletracker123 -keypass miletracker123 -dname "CN=MileTracker Pro, OU=Development, O=MileTracker, L=City, S=State, C=US"
          
          # Sign the APK
          jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore miletracker.keystore -storepass miletracker123 -keypass miletracker123 build/outputs/apk/release/app-release-unsigned.apk miletracker
          
          # Verify signature
          jarsigner -verify -verbose -certs build/outputs/apk/release/app-release-unsigned.apk
          
          # Zipalign (optional but recommended)
          if [ -f "$ANDROID_HOME/build-tools/34.0.0/zipalign" ]; then
              $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 build/outputs/apk/release/app-release-unsigned.apk build/outputs/apk/release/app-release-signed.apk
              mv build/outputs/apk/release/app-release-signed.apk build/outputs/apk/release/app-release-unsigned.apk
          fi
          
          # Rename final APK
          mv build/outputs/apk/release/app-release-unsigned.apk build/outputs/apk/release/MileTracker-Pro-v${{ github.event.inputs.version_code }}.apk
        
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MileTracker-Pro-APK
          path: android-app/build/outputs/apk/release/MileTracker-Pro-v${{ github.event.inputs.version_code }}.apk
