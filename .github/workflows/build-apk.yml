name: Build MileTracker Pro APK - Enhanced API Sync

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Create enhanced CloudBackupService with sync download
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app
        cat > android/app/src/main/java/com/miletrackerpro/app/CloudBackupService.java << 'EOF'
        package com.miletrackerpro.app;

        import android.content.Context;
        import android.os.AsyncTask;
        import android.provider.Settings;
        import android.util.Log;
        import com.miletrackerpro.app.storage.Trip;
        import com.miletrackerpro.app.storage.TripStorage;
        import org.json.JSONArray;
        import org.json.JSONObject;
        import java.io.BufferedReader;
        import java.io.InputStreamReader;
        import java.io.OutputStream;
        import java.net.HttpURLConnection;
        import java.net.URL;
        import java.util.ArrayList;
        import java.util.List;

        public class CloudBackupService {
            private static final String TAG = "CloudBackupService";
            private static final String API_BASE_URL = "https://18fab652-f2dd-4a28-bd0a-3e89d59cb6d2-00-1bhb79n061bsu.riker.replit.dev/api";
            
            private Context context;
            private String deviceId;
            private TripStorage tripStorage;
            
            public CloudBackupService(Context context) {
                this.context = context;
                this.deviceId = generateDeviceId();
                this.tripStorage = new TripStorage(context);
                Log.d(TAG, "CloudBackupService initialized with deviceId: " + deviceId);
            }
            
            private String generateDeviceId() {
                String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);
                return "android-" + androidId;
            }
            
            // NEW: Download existing trips when app starts
            public void syncTripsFromAPI() {
                if (!tripStorage.isApiSyncEnabled()) {
                    Log.d(TAG, "API sync disabled - skipping download");
                    return;
                }
                
                Log.d(TAG, "API sync enabled - downloading existing trips");
                new DownloadTripsTask().execute();
            }
            
            // NEW: Download trips task
            private class DownloadTripsTask extends AsyncTask<Void, Void, List<Trip>> {
                @Override
                protected List<Trip> doInBackground(Void... voids) {
                    return downloadTripsFromAPI();
                }
                
                @Override
                protected void onPostExecute(List<Trip> downloadedTrips) {
                    if (downloadedTrips != null && !downloadedTrips.isEmpty()) {
                        Log.d(TAG, "Downloaded " + downloadedTrips.size() + " trips from API");
                        for (Trip trip : downloadedTrips) {
                            // Only save if not already exists locally
                            if (!tripStorage.tripExists(trip)) {
                                tripStorage.saveTrip(trip);
                                Log.d(TAG, "Synced trip: " + trip.getStartAddress() + " → " + trip.getEndAddress());
                            }
                        }
                    } else {
                        Log.d(TAG, "No trips to download or download failed");
                    }
                }
            }
            
            // NEW: Download trips from API
            private List<Trip> downloadTripsFromAPI() {
                HttpURLConnection connection = null;
                List<Trip> trips = new ArrayList<>();
                
                try {
                    URL url = new URL(API_BASE_URL + "/trips/" + deviceId);
                    connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("GET");
                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setRequestProperty("User-Agent", "MileTrackerPro-Android/4.9");
                    connection.setConnectTimeout(10000);
                    connection.setReadTimeout(10000);
                    
                    int responseCode = connection.getResponseCode();
                    Log.d(TAG, "Download trips response code: " + responseCode);
                    
                    if (responseCode == HttpURLConnection.HTTP_OK) {
                        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        StringBuilder response = new StringBuilder();
                        String line;
                        
                        while ((line = reader.readLine()) != null) {
                            response.append(line);
                        }
                        reader.close();
                        
                        // Parse JSON response
                        JSONArray tripArray = new JSONArray(response.toString());
                        
                        for (int i = 0; i < tripArray.length(); i++) {
                            JSONObject tripObj = tripArray.getJSONObject(i);
                            
                            Trip trip = new Trip();
                            trip.setStartAddress(tripObj.optString("start_location", "Unknown"));
                            trip.setEndAddress(tripObj.optString("end_location", "Unknown"));
                            trip.setStartLatitude(tripObj.optDouble("start_latitude", 0.0));
                            trip.setStartLongitude(tripObj.optDouble("start_longitude", 0.0));
                            trip.setEndLatitude(tripObj.optDouble("end_latitude", 0.0));
                            trip.setEndLongitude(tripObj.optDouble("end_longitude", 0.0));
                            trip.setDistance(tripObj.optDouble("distance", 0.0));
                            trip.setDuration(tripObj.optLong("duration", 0));
                            trip.setStartTime(tripObj.optLong("start_time", System.currentTimeMillis()));
                            trip.setEndTime(tripObj.optLong("end_time", System.currentTimeMillis()));
                            trip.setCategory(tripObj.optString("category", "Business"));
                            trip.setAutoDetected(tripObj.optBoolean("auto_detected", false));
                            
                            // NEW: Parse client and notes
                            trip.setClientName(tripObj.optString("client_name", ""));
                            trip.setNotes(tripObj.optString("notes", ""));
                            
                            trips.add(trip);
                        }
                        
                        Log.d(TAG, "Successfully parsed " + trips.size() + " trips from API");
                        
                    } else {
                        Log.w(TAG, "Failed to download trips, response code: " + responseCode);
                    }
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error downloading trips from API: " + e.getMessage(), e);
                } finally {
                    if (connection != null) {
                        connection.disconnect();
                    }
                }
                
                return trips;
            }
            
            public void backupTrip(Trip trip) {
                if (!tripStorage.isApiSyncEnabled()) {
                    Log.d(TAG, "API sync disabled - skipping backup");
                    return;
                }
                
                Log.d(TAG, "API sync enabled - starting backup");
                new BackupTripTask().execute(trip);
            }
            
            private class BackupTripTask extends AsyncTask<Trip, Void, Boolean> {
                @Override
                protected Boolean doInBackground(Trip... trips) {
                    if (trips.length == 0) return false;
                    
                    Trip trip = trips[0];
                    return sendTripToAPI(trip);
                }
                
                @Override
                protected void onPostExecute(Boolean success) {
                    if (success) {
                        Log.d(TAG, "Trip backup successful to external API");
                    } else {
                        Log.w(TAG, "Trip backup failed - saved locally only");
                    }
                }
            }
            
            private boolean sendTripToAPI(Trip trip) {
                HttpURLConnection connection = null;
                try {
                    JSONObject tripData = new JSONObject();
                    tripData.put("deviceId", deviceId);
                    tripData.put("startLocation", trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown Location");
                    tripData.put("endLocation", trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown Location");
                    tripData.put("startLatitude", trip.getStartLatitude());
                    tripData.put("startLongitude", trip.getStartLongitude());
                    tripData.put("endLatitude", trip.getEndLatitude());
                    tripData.put("endLongitude", trip.getEndLongitude());
                    tripData.put("distance", trip.getDistance());
                    tripData.put("duration", trip.getDuration());
                    tripData.put("startTime", trip.getStartTime());
                    tripData.put("endTime", trip.getEndTime());
                    tripData.put("category", trip.getCategory());
                    tripData.put("autoDetected", trip.isAutoDetected());
                    tripData.put("timezone", "America/New_York");
                    
                    // ENHANCED: Include client and notes
                    tripData.put("clientName", trip.getClientName() != null ? trip.getClientName() : "");
                    tripData.put("description", trip.getNotes() != null ? trip.getNotes() : "");
                    
                    URL url = new URL(API_BASE_URL + "/trips");
                    connection = (HttpURLConnection) url.openConnection();
                    connection.setRequestMethod("POST");
                    connection.setRequestProperty("Content-Type", "application/json");
                    connection.setRequestProperty("User-Agent", "MileTrackerPro-Android/4.9");
                    connection.setDoOutput(true);
                    connection.setConnectTimeout(10000);
                    connection.setReadTimeout(10000);
                    
                    OutputStream outputStream = connection.getOutputStream();
                    outputStream.write(tripData.toString().getBytes("UTF-8"));
                    outputStream.flush();
                    outputStream.close();
                    
                    int responseCode = connection.getResponseCode();
                    Log.d(TAG, "API backup response code: " + responseCode);
                    
                    if (responseCode >= 200 && responseCode < 300) {
                        Log.d(TAG, "Trip successfully backed up to API");
                        return true;
                    } else {
                        Log.w(TAG, "API backup failed with response code: " + responseCode);
                        return false;
                    }
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error backing up trip to API: " + e.getMessage(), e);
                    return false;
                } finally {
                    if (connection != null) {
                        connection.disconnect();
                    }
                }
            }
        }
        EOF

    - name: Update MainActivity with trip editing and faster performance
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.Manifest;
        import android.app.DatePickerDialog;
        import android.content.BroadcastReceiver;
        import android.content.Context;
        import android.content.Intent;
        import android.content.IntentFilter;
        import android.content.SharedPreferences;
        import android.content.pm.PackageManager;
        import android.graphics.Color;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.os.Bundle;
        import android.util.Log;
        import android.view.Gravity;
        import android.view.View;
        import android.view.ViewGroup;
        import android.widget.*;
        import androidx.annotation.NonNull;
        import androidx.appcompat.app.AlertDialog;
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import com.miletrackerpro.app.services.AutoDetectionService;
        import com.miletrackerpro.app.storage.Trip;
        import com.miletrackerpro.app.storage.TripStorage;
        import java.text.DecimalFormat;
        import java.text.SimpleDateFormat;
        import java.util.ArrayList;
        import java.util.Calendar;
        import java.util.Date;
        import java.util.List;
        import java.util.Locale;

        public class MainActivity extends AppCompatActivity implements LocationListener {
            private static final String TAG = "MainActivity";
            private static final int LOCATION_PERMISSION_REQUEST_CODE = 1000;
            
            private TripStorage tripStorage;
            private CloudBackupService cloudBackupService;
            private LocationManager locationManager;
            private AutoDetectionService autoDetectionService;
            
            // UI Components
            private TextView statusText;
            private TextView tripCountText;
            private TextView totalMilesText;
            private TextView speedText;
            private Switch autoDetectionSwitch;
            private Button manualStartButton;
            private Button manualStopButton;
            private Button addTripButton;
            private LinearLayout tripsList;
            
            // Auto-detection state
            private boolean isAutoDetectionEnabled = false;
            private boolean isManualTripActive = false;
            private List<Location> speedReadings = new ArrayList<>();
            private Location tripStartLocation = null;
            private List<Location> tripPath = new ArrayList<>();
            private long lastStationaryTime = 0;
            private long tripStartTime = 0;
            private String statusMessage = "Ready";
            
            // Constants for auto-detection - FASTER PERFORMANCE
            private static final double MIN_DRIVING_SPEED_MPH = 8.0;
            private static final double MAX_STATIONARY_SPEED_MPH = 3.0;
            private static final int REQUIRED_SPEED_READINGS = 3;
            private static final long STATIONARY_TIMEOUT_MS = 90 * 1000; // 90 seconds (faster)
            private static final double MIN_TRIP_DISTANCE_MILES = 0.3; // Reduced threshold
            
            private BroadcastReceiver serviceReceiver;
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                Log.d(TAG, "🚗 MileTracker Pro v4.9.2 - Trip Editing & Fast Performance");
                
                tripStorage = new TripStorage(this);
                cloudBackupService = new CloudBackupService(this);
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                autoDetectionService = new AutoDetectionService(this);
                
                setupUI();
                requestLocationPermission();
                registerServiceReceiver();
                
                // Sync trips from API on startup
                if (tripStorage.isApiSyncEnabled()) {
                    Log.d(TAG, "🔄 Syncing existing trips from API...");
                    cloudBackupService.syncTripsFromAPI();
                }
                
                refreshUI();
            }
            
            private void setupUI() {
                ScrollView scrollView = new ScrollView(this);
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setPadding(20, 20, 20, 20);
                mainLayout.setBackgroundColor(Color.parseColor("#f8f9fa"));
                
                // Header
                TextView headerText = new TextView(this);
                headerText.setText("🚗 MileTracker Pro v4.9.2\nTrip Editing & Fast Performance");
                headerText.setTextSize(24);
                headerText.setTextColor(Color.parseColor("#667eea"));
                headerText.setGravity(Gravity.CENTER);
                headerText.setPadding(0, 0, 0, 30);
                mainLayout.addView(headerText);
                
                // Status section
                statusText = new TextView(this);
                statusText.setText("⚡ Enhanced auto-detection ready - Fast save enabled");
                statusText.setTextSize(16);
                statusText.setTextColor(Color.parseColor("#28a745"));
                statusText.setPadding(15, 15, 15, 15);
                statusText.setBackgroundColor(Color.parseColor("#d4edda"));
                mainLayout.addView(statusText);
                
                addSpacing(mainLayout, 20);
                
                // Statistics section
                LinearLayout statsLayout = new LinearLayout(this);
                statsLayout.setOrientation(LinearLayout.HORIZONTAL);
                statsLayout.setWeightSum(3);
                
                tripCountText = createStatCard("📊 Trips", "0");
                totalMilesText = createStatCard("🛣️ Miles", "0.0");
                speedText = createStatCard("🏃 Speed", "0 mph");
                
                statsLayout.addView(tripCountText);
                statsLayout.addView(totalMilesText);
                statsLayout.addView(speedText);
                mainLayout.addView(statsLayout);
                
                addSpacing(mainLayout, 30);
                
                // Auto detection section
                TextView autoTitle = new TextView(this);
                autoTitle.setText("🔄 Enhanced Auto Detection");
                autoTitle.setTextSize(20);
                autoTitle.setTextColor(Color.parseColor("#667eea"));
                mainLayout.addView(autoTitle);
                
                LinearLayout autoLayout = new LinearLayout(this);
                autoLayout.setOrientation(LinearLayout.HORIZONTAL);
                autoLayout.setGravity(Gravity.CENTER_VERTICAL);
                autoLayout.setPadding(0, 10, 0, 20);
                
                autoDetectionSwitch = new Switch(this);
                autoDetectionSwitch.setText("Smart trip detection");
                autoDetectionSwitch.setTextSize(16);
                autoDetectionSwitch.setOnCheckedChangeListener((buttonView, isChecked) -> toggleAutoDetection(isChecked));
                
                autoLayout.addView(autoDetectionSwitch);
                mainLayout.addView(autoLayout);
                
                // Manual controls section
                TextView manualTitle = new TextView(this);
                manualTitle.setText("✋ Manual Controls");
                manualTitle.setTextSize(20);
                manualTitle.setTextColor(Color.parseColor("#667eea"));
                mainLayout.addView(manualTitle);
                
                LinearLayout manualLayout = new LinearLayout(this);
                manualLayout.setOrientation(LinearLayout.HORIZONTAL);
                manualLayout.setWeightSum(2);
                manualLayout.setPadding(0, 10, 0, 20);
                
                manualStartButton = createActionButton("🚀 START TRIP", Color.parseColor("#28a745"));
                manualStopButton = createActionButton("🛑 STOP TRIP", Color.parseColor("#dc3545"));
                
                manualStartButton.setOnClickListener(v -> startManualTrip());
                manualStopButton.setOnClickListener(v -> stopManualTrip());
                
                LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                buttonParams.setMargins(5, 0, 5, 0);
                
                manualStartButton.setLayoutParams(buttonParams);
                manualStopButton.setLayoutParams(buttonParams);
                
                manualLayout.addView(manualStartButton);
                manualLayout.addView(manualStopButton);
                mainLayout.addView(manualLayout);
                
                // Add trip with enhanced features
                addTripButton = createActionButton("➕ Add Past Trip with Date & Client", Color.parseColor("#667eea"));
                addTripButton.setOnClickListener(v -> showEnhancedAddTripDialog());
                mainLayout.addView(addTripButton);
                
                addSpacing(mainLayout, 30);
                
                // Recent trips section with edit functionality
                TextView tripsTitle = new TextView(this);
                tripsTitle.setText("📋 Recent Trips (Tap to Edit)");
                tripsTitle.setTextSize(20);
                tripsTitle.setTextColor(Color.parseColor("#667eea"));
                mainLayout.addView(tripsTitle);
                
                tripsList = new LinearLayout(this);
                tripsList.setOrientation(LinearLayout.VERTICAL);
                tripsList.setPadding(0, 10, 0, 0);
                mainLayout.addView(tripsList);
                
                scrollView.addView(mainLayout);
                setContentView(scrollView);
            }
            
            private TextView createStatCard(String title, String value) {
                TextView card = new TextView(this);
                card.setText(title + "\n" + value);
                card.setTextSize(14);
                card.setTextColor(Color.parseColor("#333333"));
                card.setGravity(Gravity.CENTER);
                card.setPadding(15, 15, 15, 15);
                card.setBackgroundColor(Color.WHITE);
                
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(0, ViewGroup.LayoutParams.WRAP_CONTENT, 1);
                params.setMargins(3, 0, 3, 0);
                card.setLayoutParams(params);
                
                return card;
            }
            
            private Button createActionButton(String text, int backgroundColor) {
                Button button = new Button(this);
                button.setText(text);
                button.setTextColor(Color.WHITE);
                button.setBackgroundColor(backgroundColor);
                button.setTextSize(14);
                button.setPadding(15, 12, 15, 12);
                
                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, 
                    ViewGroup.LayoutParams.WRAP_CONTENT
                );
                params.setMargins(0, 8, 0, 8);
                button.setLayoutParams(params);
                
                return button;
            }
            
            private void addSpacing(LinearLayout layout, int height) {
                View spacer = new View(this);
                spacer.setLayoutParams(new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, height
                ));
                layout.addView(spacer);
            }
            
            // ENHANCED: Add trip dialog with date picker
            private void showEnhancedAddTripDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("➕ Add Past Trip");
                
                // Create form layout
                ScrollView scrollView = new ScrollView(this);
                LinearLayout formLayout = new LinearLayout(this);
                formLayout.setOrientation(LinearLayout.VERTICAL);
                formLayout.setPadding(20, 20, 20, 20);
                
                // Date selection
                TextView dateLabel = new TextView(this);
                dateLabel.setText("Trip Date:");
                dateLabel.setTextSize(16);
                dateLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(dateLabel);
                
                Button dateButton = new Button(this);
                Calendar selectedDate = Calendar.getInstance();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                dateButton.setText(dateFormat.format(selectedDate.getTime()));
                dateButton.setBackgroundColor(Color.parseColor("#667eea"));
                dateButton.setTextColor(Color.WHITE);
                
                dateButton.setOnClickListener(v -> {
                    DatePickerDialog datePicker = new DatePickerDialog(
                        this,
                        (view, year, month, dayOfMonth) -> {
                            selectedDate.set(year, month, dayOfMonth);
                            dateButton.setText(dateFormat.format(selectedDate.getTime()));
                        },
                        selectedDate.get(Calendar.YEAR),
                        selectedDate.get(Calendar.MONTH),
                        selectedDate.get(Calendar.DAY_OF_MONTH)
                    );
                    datePicker.show();
                });
                formLayout.addView(dateButton);
                
                addFormSpacing(formLayout, 15);
                
                // Start location
                TextView startLabel = new TextView(this);
                startLabel.setText("Start Location:");
                startLabel.setTextSize(16);
                startLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(startLabel);
                
                EditText startEdit = new EditText(this);
                startEdit.setHint("e.g., Home, Office, 123 Main St");
                formLayout.addView(startEdit);
                
                addFormSpacing(formLayout, 15);
                
                // End location
                TextView endLabel = new TextView(this);
                endLabel.setText("End Location:");
                endLabel.setTextSize(16);
                endLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(endLabel);
                
                EditText endEdit = new EditText(this);
                endEdit.setHint("e.g., Client Office, Store, 456 Oak Ave");
                formLayout.addView(endEdit);
                
                addFormSpacing(formLayout, 15);
                
                // Distance
                TextView distanceLabel = new TextView(this);
                distanceLabel.setText("Distance (miles):");
                distanceLabel.setTextSize(16);
                distanceLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(distanceLabel);
                
                EditText distanceEdit = new EditText(this);
                distanceEdit.setHint("e.g., 12.5");
                distanceEdit.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL);
                formLayout.addView(distanceEdit);
                
                addFormSpacing(formLayout, 15);
                
                // Category spinner
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category:");
                categoryLabel.setTextSize(16);
                categoryLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(categoryLabel);
                
                Spinner categorySpinner = new Spinner(this);
                String[] categories = {"Business", "Medical", "Charity", "Personal"};
                ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categorySpinner.setAdapter(categoryAdapter);
                formLayout.addView(categorySpinner);
                
                addFormSpacing(formLayout, 15);
                
                // Client name
                TextView clientLabel = new TextView(this);
                clientLabel.setText("Client/Company:");
                clientLabel.setTextSize(16);
                clientLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(clientLabel);
                
                EditText clientEdit = new EditText(this);
                clientEdit.setHint("e.g., ABC Corp, John Smith, Personal");
                formLayout.addView(clientEdit);
                
                addFormSpacing(formLayout, 15);
                
                // Notes/Description
                TextView notesLabel = new TextView(this);
                notesLabel.setText("Notes/Description:");
                notesLabel.setTextSize(16);
                notesLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(notesLabel);
                
                EditText notesEdit = new EditText(this);
                notesEdit.setHint("e.g., Client meeting, grocery run, doctor visit");
                notesEdit.setLines(3);
                notesEdit.setMaxLines(5);
                formLayout.addView(notesEdit);
                
                scrollView.addView(formLayout);
                builder.setView(scrollView);
                
                builder.setPositiveButton("💾 Save Trip", (dialog, which) -> {
                    String startLocation = startEdit.getText().toString().trim();
                    String endLocation = endEdit.getText().toString().trim();
                    String distanceStr = distanceEdit.getText().toString().trim();
                    String category = categories[categorySpinner.getSelectedItemPosition()];
                    String clientName = clientEdit.getText().toString().trim();
                    String notes = notesEdit.getText().toString().trim();
                    
                    if (startLocation.isEmpty() || endLocation.isEmpty() || distanceStr.isEmpty()) {
                        Toast.makeText(this, "Please fill in all required fields", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    try {
                        double distance = Double.parseDouble(distanceStr);
                        
                        if (distance <= 0) {
                            Toast.makeText(this, "Distance must be greater than 0", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        Trip trip = new Trip();
                        trip.setStartAddress(startLocation);
                        trip.setEndAddress(endLocation);
                        trip.setDistance(distance);
                        trip.setCategory(category);
                        trip.setClientName(clientName);
                        trip.setNotes(notes);
                        trip.setAutoDetected(false);
                        
                        // Use selected date
                        long selectedTimestamp = selectedDate.getTimeInMillis();
                        trip.setStartTime(selectedTimestamp);
                        trip.setEndTime(selectedTimestamp + 3600000); // Add 1 hour
                        trip.setDuration(3600000); // 1 hour duration
                        
                        // FAST SAVE: Optimized database operation
                        long startSave = System.currentTimeMillis();
                        tripStorage.saveTrip(trip);
                        long saveTime = System.currentTimeMillis() - startSave;
                        Log.d(TAG, "Fast save completed in " + saveTime + "ms");
                        
                        cloudBackupService.backupTrip(trip);
                        
                        Toast.makeText(this, "✅ Trip saved with date " + dateFormat.format(selectedDate.getTime()), Toast.LENGTH_LONG).show();
                        refreshUI();
                        
                    } catch (NumberFormatException e) {
                        Toast.makeText(this, "Please enter a valid distance", Toast.LENGTH_SHORT).show();
                    }
                });
                
                builder.setNegativeButton("Cancel", null);
                
                AlertDialog dialog = builder.create();
                dialog.show();
            }
            
            // ENHANCED: Edit trip dialog
            private void showEditTripDialog(Trip trip) {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("✏️ Edit Trip");
                
                // Create form layout
                ScrollView scrollView = new ScrollView(this);
                LinearLayout formLayout = new LinearLayout(this);
                formLayout.setOrientation(LinearLayout.VERTICAL);
                formLayout.setPadding(20, 20, 20, 20);
                
                // Date selection
                TextView dateLabel = new TextView(this);
                dateLabel.setText("Trip Date:");
                dateLabel.setTextSize(16);
                dateLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(dateLabel);
                
                Button dateButton = new Button(this);
                Calendar selectedDate = Calendar.getInstance();
                selectedDate.setTimeInMillis(trip.getStartTime());
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, yyyy", Locale.getDefault());
                dateButton.setText(dateFormat.format(selectedDate.getTime()));
                dateButton.setBackgroundColor(Color.parseColor("#667eea"));
                dateButton.setTextColor(Color.WHITE);
                
                dateButton.setOnClickListener(v -> {
                    DatePickerDialog datePicker = new DatePickerDialog(
                        this,
                        (view, year, month, dayOfMonth) -> {
                            selectedDate.set(year, month, dayOfMonth);
                            dateButton.setText(dateFormat.format(selectedDate.getTime()));
                        },
                        selectedDate.get(Calendar.YEAR),
                        selectedDate.get(Calendar.MONTH),
                        selectedDate.get(Calendar.DAY_OF_MONTH)
                    );
                    datePicker.show();
                });
                formLayout.addView(dateButton);
                
                addFormSpacing(formLayout, 15);
                
                // Start location
                TextView startLabel = new TextView(this);
                startLabel.setText("Start Location:");
                startLabel.setTextSize(16);
                startLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(startLabel);
                
                EditText startEdit = new EditText(this);
                startEdit.setText(trip.getStartAddress());
                formLayout.addView(startEdit);
                
                addFormSpacing(formLayout, 15);
                
                // End location
                TextView endLabel = new TextView(this);
                endLabel.setText("End Location:");
                endLabel.setTextSize(16);
                endLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(endLabel);
                
                EditText endEdit = new EditText(this);
                endEdit.setText(trip.getEndAddress());
                formLayout.addView(endEdit);
                
                addFormSpacing(formLayout, 15);
                
                // Distance
                TextView distanceLabel = new TextView(this);
                distanceLabel.setText("Distance (miles):");
                distanceLabel.setTextSize(16);
                distanceLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(distanceLabel);
                
                EditText distanceEdit = new EditText(this);
                distanceEdit.setText(String.valueOf(trip.getDistance()));
                distanceEdit.setInputType(android.text.InputType.TYPE_CLASS_NUMBER | android.text.InputType.TYPE_NUMBER_FLAG_DECIMAL);
                formLayout.addView(distanceEdit);
                
                addFormSpacing(formLayout, 15);
                
                // Category spinner
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category:");
                categoryLabel.setTextSize(16);
                categoryLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(categoryLabel);
                
                Spinner categorySpinner = new Spinner(this);
                String[] categories = {"Business", "Medical", "Charity", "Personal"};
                ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categorySpinner.setAdapter(categoryAdapter);
                
                // Set current category
                for (int i = 0; i < categories.length; i++) {
                    if (categories[i].equals(trip.getCategory())) {
                        categorySpinner.setSelection(i);
                        break;
                    }
                }
                formLayout.addView(categorySpinner);
                
                addFormSpacing(formLayout, 15);
                
                // Client name
                TextView clientLabel = new TextView(this);
                clientLabel.setText("Client/Company:");
                clientLabel.setTextSize(16);
                clientLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(clientLabel);
                
                EditText clientEdit = new EditText(this);
                clientEdit.setText(trip.getClientName() != null ? trip.getClientName() : "");
                formLayout.addView(clientEdit);
                
                addFormSpacing(formLayout, 15);
                
                // Notes/Description
                TextView notesLabel = new TextView(this);
                notesLabel.setText("Notes/Description:");
                notesLabel.setTextSize(16);
                notesLabel.setTextColor(Color.parseColor("#333333"));
                formLayout.addView(notesLabel);
                
                EditText notesEdit = new EditText(this);
                notesEdit.setText(trip.getNotes() != null ? trip.getNotes() : "");
                notesEdit.setLines(3);
                notesEdit.setMaxLines(5);
                formLayout.addView(notesEdit);
                
                scrollView.addView(formLayout);
                builder.setView(scrollView);
                
                builder.setPositiveButton("💾 Update Trip", (dialog, which) -> {
                    String startLocation = startEdit.getText().toString().trim();
                    String endLocation = endEdit.getText().toString().trim();
                    String distanceStr = distanceEdit.getText().toString().trim();
                    String category = categories[categorySpinner.getSelectedItemPosition()];
                    String clientName = clientEdit.getText().toString().trim();
                    String notes = notesEdit.getText().toString().trim();
                    
                    if (startLocation.isEmpty() || endLocation.isEmpty() || distanceStr.isEmpty()) {
                        Toast.makeText(this, "Please fill in all required fields", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    try {
                        double distance = Double.parseDouble(distanceStr);
                        
                        if (distance <= 0) {
                            Toast.makeText(this, "Distance must be greater than 0", Toast.LENGTH_SHORT).show();
                            return;
                        }
                        
                        // Update trip with new values
                        trip.setStartAddress(startLocation);
                        trip.setEndAddress(endLocation);
                        trip.setDistance(distance);
                        trip.setCategory(category);
                        trip.setClientName(clientName);
                        trip.setNotes(notes);
                        
                        // Update date if changed
                        long selectedTimestamp = selectedDate.getTimeInMillis();
                        trip.setStartTime(selectedTimestamp);
                        trip.setEndTime(selectedTimestamp + trip.getDuration());
                        
                        // FAST UPDATE: Optimized database operation
                        long startUpdate = System.currentTimeMillis();
                        tripStorage.updateTrip(trip);
                        long updateTime = System.currentTimeMillis() - startUpdate;
                        Log.d(TAG, "Fast update completed in " + updateTime + "ms");
                        
                        cloudBackupService.backupTrip(trip);
                        
                        Toast.makeText(this, "✅ Trip updated successfully", Toast.LENGTH_SHORT).show();
                        refreshUI();
                        
                    } catch (NumberFormatException e) {
                        Toast.makeText(this, "Please enter a valid distance", Toast.LENGTH_SHORT).show();
                    }
                });
                
                builder.setNegativeButton("Cancel", null);
                
                builder.setNeutralButton("🗑️ Delete", (dialog, which) -> {
                    new AlertDialog.Builder(this)
                        .setTitle("Delete Trip")
                        .setMessage("Are you sure you want to delete this trip? This cannot be undone.")
                        .setPositiveButton("Delete", (confirmDialog, confirmWhich) -> {
                            // FAST DELETE: Optimized database operation
                            long startDelete = System.currentTimeMillis();
                            tripStorage.deleteTrip(trip.getId());
                            long deleteTime = System.currentTimeMillis() - startDelete;
                            Log.d(TAG, "Fast delete completed in " + deleteTime + "ms");
                            
                            Toast.makeText(this, "Trip deleted", Toast.LENGTH_SHORT).show();
                            refreshUI();
                        })
                        .setNegativeButton("Cancel", null)
                        .show();
                });
                
                AlertDialog dialog = builder.create();
                dialog.show();
            }
            
            private void addFormSpacing(LinearLayout layout, int height) {
                View spacer = new View(this);
                spacer.setLayoutParams(new LinearLayout.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, height
                ));
                layout.addView(spacer);
            }
            
            private void updateTripsList(List<Trip> trips) {
                tripsList.removeAllViews();
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd, HH:mm", Locale.getDefault());
                DecimalFormat distanceFormat = new DecimalFormat("0.0");
                
                // Show last 5 trips
                int startIndex = Math.max(0, trips.size() - 5);
                for (int i = startIndex; i < trips.size(); i++) {
                    Trip trip = trips.get(i);
                    
                    LinearLayout tripCard = new LinearLayout(this);
                    tripCard.setOrientation(LinearLayout.VERTICAL);
                    tripCard.setPadding(15, 15, 15, 15);
                    tripCard.setBackgroundColor(Color.WHITE);
                    tripCard.setClickable(true);
                    tripCard.setFocusable(true);
                    
                    // Add click listener for editing
                    tripCard.setOnClickListener(v -> showEditTripDialog(trip));
                    
                    LinearLayout.LayoutParams cardParams = new LinearLayout.LayoutParams(
                        ViewGroup.LayoutParams.MATCH_PARENT, 
                        ViewGroup.LayoutParams.WRAP_CONTENT
                    );
                    cardParams.setMargins(0, 5, 0, 5);
                    tripCard.setLayoutParams(cardParams);
                    
                    // Route text
                    TextView routeText = new TextView(this);
                    String routeStr = trip.getStartAddress() + " → " + trip.getEndAddress();
                    if (routeStr.length() > 50) {
                        routeStr = routeStr.substring(0, 47) + "...";
                    }
                    routeText.setText(routeStr);
                    routeText.setTextSize(14);
                    routeText.setTextColor(Color.parseColor("#333333"));
                    routeText.setMaxLines(1);
                    tripCard.addView(routeText);
                    
                    // Details text
                    TextView detailsText = new TextView(this);
                    String detailsStr = String.format("%s mi • %s • %s", 
                        distanceFormat.format(trip.getDistance()),
                        dateFormat.format(new Date(trip.getStartTime())),
                        trip.getCategory()
                    );
                    
                    if (trip.isAutoDetected()) {
                        detailsStr += " • 🤖 Auto";
                    }
                    
                    if (trip.getClientName() != null && !trip.getClientName().isEmpty()) {
                        detailsStr += " • " + trip.getClientName();
                    }
                    
                    if (trip.getNotes() != null && !trip.getNotes().isEmpty()) {
                        String notes = trip.getNotes();
                        if (notes.length() > 30) {
                            notes = notes.substring(0, 27) + "...";
                        }
                        detailsStr += " • " + notes;
                    }
                    
                    detailsText.setText(detailsStr);
                    detailsText.setTextSize(12);
                    detailsText.setTextColor(Color.parseColor("#666666"));
                    detailsText.setMaxLines(2);
                    tripCard.addView(detailsText);
                    
                    tripsList.addView(tripCard);
                }
                
                if (trips.isEmpty()) {
                    TextView emptyText = new TextView(this);
                    emptyText.setText("No trips yet. Enable auto-detection or add trips manually.");
                    emptyText.setTextColor(Color.parseColor("#999999"));
                    emptyText.setGravity(Gravity.CENTER);
                    emptyText.setPadding(20, 20, 20, 20);
                    tripsList.addView(emptyText);
                }
            }
            
            // ENHANCED: Auto-detection with fixed calculations and faster response
            private void toggleAutoDetection(boolean enabled) {
                isAutoDetectionEnabled = enabled;
                
                if (enabled) {
                    startLocationTracking();
                    statusMessage = "Starting enhanced auto-detection...";
                } else {
                    stopLocationTracking();
                    statusMessage = "Auto-detection disabled";
                }
                
                updateStatusDisplay();
            }
            
            private void startLocationTracking() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                    try {
                        // ENHANCED: More frequent updates for better detection
                        locationManager.requestLocationUpdates(
                            LocationManager.GPS_PROVIDER,
                            3000, // 3 seconds (faster)
                            5, // 5 meters (more sensitive)
                            this
                        );
                        
                        // Also try network provider as backup
                        locationManager.requestLocationUpdates(
                            LocationManager.NETWORK_PROVIDER,
                            5000, // 5 seconds
                            10, // 10 meters
                            this
                        );
                        
                        statusMessage = "Enhanced monitoring active...";
                        Log.d(TAG, "Enhanced location tracking started");
                    } catch (Exception e) {
                        Log.e(TAG, "Error starting location tracking", e);
                        statusMessage = "Location tracking failed";
                    }
                } else {
                    statusMessage = "Location permission required";
                }
                
                updateStatusDisplay();
            }
            
            private void stopLocationTracking() {
                locationManager.removeUpdates(this);
                statusMessage = "Auto-detection stopped";
                speedReadings.clear();
                Log.d(TAG, "Location tracking stopped");
                updateStatusDisplay();
            }
            
            @Override
            public void onLocationChanged(Location location) {
                if (!isAutoDetectionEnabled) return;
                
                // ENHANCED: Better speed calculation with validation
                double speedMph = location.hasSpeed() ? (location.getSpeed() * 2.237) : 0;
                
                // Validate speed reading (filter out unrealistic values)
                if (speedMph > 200) { // Over 200mph is likely GPS error
                    Log.w(TAG, "Filtering unrealistic speed: " + speedMph);
                    return;
                }
                
                // Update UI
                updateSpeedDisplay(speedMph);
                
                // Add to speed readings with timestamp
                speedReadings.add(location);
                
                // Keep only last 8 readings (24 seconds of data)
                if (speedReadings.size() > 8) {
                    speedReadings.remove(0);
                }
                
                // Process auto-detection logic
                processAutoDetection(location, speedMph);
            }
            
            private void processAutoDetection(Location location, double speedMph) {
                long currentTime = System.currentTimeMillis();
                
                if (!isManualTripActive) {
                    // Not tracking - check if we should start
                    if (speedReadings.size() >= REQUIRED_SPEED_READINGS) {
                        boolean allAboveThreshold = true;
                        for (int i = speedReadings.size() - REQUIRED_SPEED_READINGS; i < speedReadings.size(); i++) {
                            Location reading = speedReadings.get(i);
                            double readingSpeed = reading.hasSpeed() ? (reading.getSpeed() * 2.237) : 0;
                            if (readingSpeed <= MIN_DRIVING_SPEED_MPH) {
                                allAboveThreshold = false;
                                break;
                            }
                        }
                        
                        if (allAboveThreshold) {
                            startAutoTrip(location, currentTime);
                        } else if (speedMph > MIN_DRIVING_SPEED_MPH) {
                            statusMessage = String.format("Movement detected: %.1f mph", speedMph);
                        } else {
                            statusMessage = "Enhanced monitoring...";
                        }
                    }
                } else {
                    // Currently tracking - check if we should stop
                    tripPath.add(location);
                    
                    if (speedMph <= MAX_STATIONARY_SPEED_MPH) {
                        if (lastStationaryTime == 0) {
                            lastStationaryTime = currentTime;
                            statusMessage = String.format("Stopping detected: %.1f mph", speedMph);
                        } else {
                            long stationaryDuration = currentTime - lastStationaryTime;
                            long remainingTime = Math.max(0, STATIONARY_TIMEOUT_MS - stationaryDuration);
                            long remainingSeconds = remainingTime / 1000;
                            
                            if (stationaryDuration >= STATIONARY_TIMEOUT_MS) {
                                endAutoTrip(location, currentTime);
                            } else {
                                statusMessage = String.format("Stationary %ds - will auto-end", remainingSeconds);
                            }
                        }
                    } else {
                        // Moving again - reset stationary timer
                        lastStationaryTime = 0;
                        statusMessage = String.format("🚗 Driving: %.1f mph", speedMph);
                    }
                }
                
                updateStatusDisplay();
            }
            
            private void startAutoTrip(Location location, long timestamp) {
                isManualTripActive = true;
                tripStartTime = timestamp;
                tripStartLocation = location;
                tripPath.clear();
                tripPath.add(location);
                lastStationaryTime = 0;
                
                statusMessage = "🚗 Trip started automatically";
                updateStatusDisplay();
                
                Toast.makeText(this, "Auto trip started", Toast.LENGTH_SHORT).show();
                Log.d(TAG, "Auto trip started at: " + location.getLatitude() + ", " + location.getLongitude());
            }
            
            private void endAutoTrip(Location location, long timestamp) {
                if (!isManualTripActive || tripStartLocation == null) return;
                
                // ENHANCED: Calculate distance using improved path-based method
                double calculatedDistance = calculateEnhancedTripDistance();
                
                // Only save trips over minimum distance
                if (calculatedDistance >= MIN_TRIP_DISTANCE_MILES) {
                    long tripDuration = timestamp - tripStartTime;
                    
                    Trip trip = new Trip();
                    trip.setStartAddress(getLocationDescription(tripStartLocation));
                    trip.setEndAddress(getLocationDescription(location));
                    trip.setStartLatitude(tripStartLocation.getLatitude());
                    trip.setStartLongitude(tripStartLocation.getLongitude());
                    trip.setEndLatitude(location.getLatitude());
                    trip.setEndLongitude(location.getLongitude());
                    trip.setDistance(calculatedDistance);
                    trip.setDuration(tripDuration);
                    trip.setStartTime(tripStartTime);
                    trip.setEndTime(timestamp);
                    trip.setCategory("Business"); // Default category
                    trip.setAutoDetected(true);
                    trip.setClientName("");
                    trip.setNotes("");
                    
                    // FAST SAVE: Optimized database operation
                    long startSave = System.currentTimeMillis();
                    tripStorage.saveTrip(trip);
                    long saveTime = System.currentTimeMillis() - startSave;
                    Log.d(TAG, "Auto trip fast save completed in " + saveTime + "ms");
                    
                    cloudBackupService.backupTrip(trip);
                    
                    statusMessage = String.format("✅ Trip completed: %.1f miles", calculatedDistance);
                    
                    Toast.makeText(this, 
                        String.format("Auto trip completed: %.1f miles", calculatedDistance), 
                        Toast.LENGTH_LONG).show();
                        
                    refreshUI();
                } else {
                    statusMessage = "Trip too short - discarded";
                    Log.d(TAG, "Trip discarded - distance: " + calculatedDistance);
                }
                
                // Reset trip state
                isManualTripActive = false;
                lastStationaryTime = 0;
                tripStartLocation = null;
                tripPath.clear();
                
                updateStatusDisplay();
            }
            
            // ENHANCED: Improved distance calculation using Haversine formula
            private double calculateEnhancedTripDistance() {
                if (tripPath.size() < 2) return 0;
                
                double totalDistance = 0;
                
                for (int i = 1; i < tripPath.size(); i++) {
                    Location prev = tripPath.get(i - 1);
                    Location curr = tripPath.get(i);
                    
                    // Use Haversine formula for more accurate distance
                    double segmentDistance = calculateHaversineDistance(
                        prev.getLatitude(), prev.getLongitude(),
                        curr.getLatitude(), curr.getLongitude()
                    );
                    
                    // Filter out GPS noise (segments over 0.5 miles in 3 seconds are likely errors)
                    if (segmentDistance < 0.5) {
                        totalDistance += segmentDistance;
                    }
                }
                
                return totalDistance;
            }
            
            // ENHANCED: Haversine distance calculation
            private double calculateHaversineDistance(double lat1, double lon1, double lat2, double lon2) {
                final double R = 3959; // Earth's radius in miles
                
                double latDistance = Math.toRadians(lat2 - lat1);
                double lonDistance = Math.toRadians(lon2 - lon1);
                
                double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                        + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                        * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
                
                double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                
                return R * c; // Distance in miles
            }
            
            private String getLocationDescription(Location location) {
                // For now, return coordinates. In a real app, you'd use reverse geocoding
                return String.format("%.4f, %.4f", location.getLatitude(), location.getLongitude());
            }
            
            private void startManualTrip() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                    Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                    if (location == null) {
                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    }
                    
                    if (location != null) {
                        startAutoTrip(location, System.currentTimeMillis());
                        statusMessage = "🚗 Manual trip started";
                        updateStatusDisplay();
                    } else {
                        Toast.makeText(this, "Unable to get location", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(this, "Location permission required", Toast.LENGTH_SHORT).show();
                }
            }
            
            private void stopManualTrip() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
                    Location location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER);
                    if (location == null) {
                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);
                    }
                    
                    if (location != null) {
                        endAutoTrip(location, System.currentTimeMillis());
                    } else {
                        Toast.makeText(this, "Unable to get location", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(this, "Location permission required", Toast.LENGTH_SHORT).show();
                }
            }
            
            private void updateSpeedDisplay(double speedMph) {
                String speedText = String.format("🏃 Speed\n%.1f mph", speedMph);
                this.speedText.setText(speedText);
            }
            
            private void updateStatusDisplay() {
                statusText.setText(statusMessage);
            }
            
            private void refreshUI() {
                List<Trip> trips = tripStorage.getAllTrips();
                
                // Update statistics
                tripCountText.setText("📊 Trips\n" + trips.size());
                
                double totalMiles = 0;
                for (Trip trip : trips) {
                    totalMiles += trip.getDistance();
                }
                totalMilesText.setText(String.format("🛣️ Miles\n%.1f", totalMiles));
                
                // Update trips list with edit functionality
                updateTripsList(trips);
                
                Log.d(TAG, "UI refreshed - " + trips.size() + " trips, " + totalMiles + " miles");
            }
            
            private void requestLocationPermission() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, 
                        new String[]{
                            Manifest.permission.ACCESS_FINE_LOCATION, 
                            Manifest.permission.ACCESS_COARSE_LOCATION,
                            Manifest.permission.ACCESS_BACKGROUND_LOCATION
                        }, 
                        LOCATION_PERMISSION_REQUEST_CODE);
                }
            }
            
            @Override
            public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                        Log.d(TAG, "Location permission granted");
                        if (isAutoDetectionEnabled) {
                            startLocationTracking();
                        }
                    } else {
                        Log.w(TAG, "Location permission denied");
                        Toast.makeText(this, "Location permission is required for trip tracking", Toast.LENGTH_LONG).show();
                    }
                }
            }
            
            private void registerServiceReceiver() {
                serviceReceiver = new BroadcastReceiver() {
                    @Override
                    public void onReceive(Context context, Intent intent) {
                        if (intent.getAction() != null) {
                            switch (intent.getAction()) {
                                case "TRIP_STARTED":
                                    // Handle trip started
                                    break;
                                case "TRIP_ENDED":
                                    refreshUI();
                                    break;
                                case "STATUS_UPDATE":
                                    String status = intent.getStringExtra("status");
                                    if (status != null) {
                                        statusMessage = status;
                                        updateStatusDisplay();
                                    }
                                    break;
                            }
                        }
                    }
                };
                
                IntentFilter filter = new IntentFilter();
                filter.addAction("TRIP_STARTED");
                filter.addAction("TRIP_ENDED");
                filter.addAction("STATUS_UPDATE");
                registerReceiver(serviceReceiver, filter);
            }
            
            @Override
            protected void onDestroy() {
                super.onDestroy();
                
                if (serviceReceiver != null) {
                    unregisterReceiver(serviceReceiver);
                }
                
                if (locationManager != null) {
                    locationManager.removeUpdates(this);
                }
            }
            
            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {}
            
            @Override
            public void onProviderEnabled(String provider) {
                Log.d(TAG, "Location provider enabled: " + provider);
            }
            
            @Override
            public void onProviderDisabled(String provider) {
                Log.d(TAG, "Location provider disabled: " + provider);
            }
        }
        EOF

    - name: Create Android project structure and permissions
      run: |
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/drawable
        mkdir -p android/gradle/wrapper
        
        # Create AndroidManifest.xml with all required permissions
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />

            <application
                android:allowBackup="true"
                android:icon="@drawable/ic_launcher"
                android:label="@string/app_name"
                android:theme="@style/AppTheme"
                android:requestLegacyExternalStorage="true">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:screenOrientation="portrait">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF
        
        # Create app build.gradle
        cat > android/app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'

        android {
            compileSdkVersion 34
            buildToolsVersion "34.0.0"

            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdkVersion 23
                targetSdkVersion 34
                versionCode 33
                versionName "4.9.2"
                
                vectorDrawables.useSupportLibrary = true
            }

            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                }
                debug {
                    minifyEnabled false
                    debuggable true
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'androidx.core:core:1.12.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
        }
        EOF
        
        # Create project build.gradle
        cat > android/build.gradle << 'EOF'
        buildscript {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.1.4'
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
            }
        }

        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
        # Create settings.gradle
        cat > android/settings.gradle << 'EOF'
        include ':app'
        rootProject.name = "MileTracker Pro"
        EOF
        
        # Create gradle wrapper properties
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.4-all.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
        # Create gradlew script
        cat > android/gradlew << 'EOF'
        #!/usr/bin/env sh
        exec gradle "$@"
        EOF
        
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">MileTracker Pro</string>
        </resources>
        EOF
        
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">#667eea</item>
                <item name="colorPrimaryDark">#5a6fd8</item>
                <item name="colorAccent">#667eea</item>
                <item name="android:textColorPrimary">#333333</item>
                <item name="android:windowBackground">#f8f9fa</item>
            </style>
        </resources>
        EOF
        
        # Create app icon
        cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="108dp"
            android:height="108dp"
            android:viewportWidth="108"
            android:viewportHeight="108">
            <path android:fillColor="#667eea"
                android:pathData="M0,0h108v108h-108z"/>
            <path android:fillColor="#ffffff"
                android:pathData="M25,25h58v58h-58z"/>
            <path android:fillColor="#667eea"
                android:pathData="M35,45 L73,45 L73,55 L35,55 Z"/>
        </vector>
        EOF

    - name: Build APK
      run: |
        cd android
        chmod +x gradlew
        ./gradlew assembleRelease

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: MileTracker-Pro-Trip-Editing-Fast-v4.9.2
        path: android/app/build/outputs/apk/release/*.apk
