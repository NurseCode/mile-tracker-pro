name: Phase 4 - Crash Diagnostic Version
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Create Android project structure
        run: |
          mkdir -p android/app/src/main/java/com/miletrackerpro/app
          mkdir -p android/app/src/main/res/{layout,values,drawable}
          mkdir -p android/gradle/wrapper
          
      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerPro'
          include ':app'
          EOF

      - name: Create gradle.properties
        run: |
          cat > android/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.enableR8.fullMode=true
          EOF

      - name: Create root build.gradle
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 24
                  compileSdkVersion = 34
                  targetSdkVersion = 34
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.1.4")
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create app/build.gradle with crash diagnostics
        run: |
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }
          
          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 34
              
              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 34
                  versionCode 8
                  versionName "4.0-diagnostic"
                  
                  // Enable crash reporting
                  testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      debuggable true
                      signingConfig signingConfigs.debug
                  }
                  debug {
                      debuggable true
                      minifyEnabled false
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              
              packagingOptions {
                  pickFirst '**/kotlin-stdlib-*.jar'
                  pickFirst '**/kotlin-stdlib-jdk*.jar'
                  exclude 'META-INF/kotlin-stdlib.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk7.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk8.kotlin_module'
              }
          }
          
          configurations.all {
              resolutionStrategy {
                  force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core:1.12.0'
              implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
          }
          EOF

      - name: Create AndroidManifest.xml with comprehensive permissions
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android"
              xmlns:tools="http://schemas.android.com/tools">
              
              <!-- Location permissions -->
              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
              
              <!-- Background service permissions -->
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />
              <uses-permission android:name="android.permission.REQUEST_IGNORE_BATTERY_OPTIMIZATIONS" />
              
              <!-- Internet for API -->
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              
              <application
                  android:name=".MileTrackerApplication"
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="MileTracker Pro"
                  android:theme="@style/AppTheme"
                  android:hardwareAccelerated="true"
                  android:largeHeap="true"
                  tools:targetApi="34">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  
                  <service
                      android:name=".BackgroundGPSService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />
                      
              </application>
          </manifest>
          EOF

      - name: Create crash-safe Application class
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MileTrackerApplication.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.app.Application;
          import android.util.Log;
          
          public class MileTrackerApplication extends Application {
              private static final String TAG = "MileTrackerApp";
              
              @Override
              public void onCreate() {
                  Log.d(TAG, "Application onCreate() started");
                  
                  // Set up global exception handler
                  Thread.setDefaultUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
                      @Override
                      public void uncaughtException(Thread thread, Throwable throwable) {
                          Log.e(TAG, "UNCAUGHT EXCEPTION: " + throwable.getMessage(), throwable);
                          throwable.printStackTrace();
                          
                          // Log stack trace for debugging
                          for (StackTraceElement element : throwable.getStackTrace()) {
                              Log.e(TAG, "  at " + element.toString());
                          }
                          
                          System.exit(1);
                      }
                  });
                  
                  try {
                      super.onCreate();
                      Log.d(TAG, "Application onCreate() completed successfully");
                  } catch (Exception e) {
                      Log.e(TAG, "Exception in Application onCreate(): " + e.getMessage(), e);
                      throw e;
                  }
              }
          }
          EOF

      - name: Create crash-safe MainActivity with extensive logging
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.Manifest;
          import android.content.pm.PackageManager;
          import android.os.Bundle;
          import android.util.Log;
          import android.view.View;
          import android.widget.Button;
          import android.widget.TextView;
          import android.widget.Toast;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          
          public class MainActivity extends AppCompatActivity {
              private static final String TAG = "MainActivity";
              private static final int LOCATION_PERMISSION_REQUEST = 1001;
              
              private TextView statusText;
              private Button startButton;
              private Button stopButton;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  Log.d(TAG, "onCreate() started");
                  
                  try {
                      super.onCreate(savedInstanceState);
                      Log.d(TAG, "super.onCreate() completed");
                      
                      // Create simple layout programmatically to avoid resource issues
                      createLayout();
                      Log.d(TAG, "Layout created successfully");
                      
                      // Initialize UI
                      initializeUI();
                      Log.d(TAG, "UI initialized successfully");
                      
                      // Show diagnostic info
                      showDiagnosticInfo();
                      Log.d(TAG, "onCreate() completed successfully");
                      
                  } catch (Exception e) {
                      Log.e(TAG, "EXCEPTION in onCreate(): " + e.getMessage(), e);
                      
                      // Show error to user instead of crashing silently
                      try {
                          Toast.makeText(this, "App Error: " + e.getMessage(), Toast.LENGTH_LONG).show();
                      } catch (Exception toastError) {
                          Log.e(TAG, "Even Toast failed: " + toastError.getMessage());
                      }
                  }
              }
              
              private void createLayout() {
                  try {
                      // Create root layout
                      android.widget.LinearLayout root = new android.widget.LinearLayout(this);
                      root.setOrientation(android.widget.LinearLayout.VERTICAL);
                      root.setPadding(50, 50, 50, 50);
                      
                      // Title
                      TextView title = new TextView(this);
                      title.setText("MileTracker Pro - Diagnostic Mode");
                      title.setTextSize(20);
                      title.setPadding(0, 0, 0, 30);
                      root.addView(title);
                      
                      // Status text
                      statusText = new TextView(this);
                      statusText.setText("App loaded successfully!\nNo crashes detected.");
                      statusText.setPadding(0, 0, 0, 30);
                      root.addView(statusText);
                      
                      // Start button
                      startButton = new Button(this);
                      startButton.setText("START GPS TRACKING");
                      startButton.setPadding(0, 0, 0, 20);
                      root.addView(startButton);
                      
                      // Stop button
                      stopButton = new Button(this);
                      stopButton.setText("STOP GPS TRACKING");
                      root.addView(stopButton);
                      
                      // Set as content view
                      setContentView(root);
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Exception creating layout: " + e.getMessage(), e);
                      throw e;
                  }
              }
              
              private void initializeUI() {
                  try {
                      startButton.setOnClickListener(new View.OnClickListener() {
                          @Override
                          public void onClick(View v) {
                              Log.d(TAG, "Start button clicked");
                              requestLocationPermissions();
                          }
                      });
                      
                      stopButton.setOnClickListener(new View.OnClickListener() {
                          @Override
                          public void onClick(View v) {
                              Log.d(TAG, "Stop button clicked");
                              statusText.setText("GPS tracking stopped (diagnostic mode)");
                          }
                      });
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Exception initializing UI: " + e.getMessage(), e);
                      throw e;
                  }
              }
              
              private void showDiagnosticInfo() {
                  try {
                      StringBuilder info = new StringBuilder();
                      info.append("App Status: RUNNING SUCCESSFULLY\n");
                      info.append("Version: 4.0-diagnostic\n");
                      info.append("Android Version: ").append(android.os.Build.VERSION.RELEASE).append("\n");
                      info.append("Device: ").append(android.os.Build.MODEL).append("\n");
                      info.append("No crashes detected - ready for GPS tracking");
                      
                      statusText.setText(info.toString());
                      
                  } catch (Exception e) {
                      Log.e(TAG, "Exception showing diagnostic info: " + e.getMessage(), e);
                      statusText.setText("Diagnostic info failed, but app is running");
                  }
              }
              
              private void requestLocationPermissions() {
                  try {
                      if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                          != PackageManager.PERMISSION_GRANTED) {
                          
                          ActivityCompat.requestPermissions(this,
                              new String[]{
                                  Manifest.permission.ACCESS_FINE_LOCATION,
                                  Manifest.permission.ACCESS_COARSE_LOCATION
                              },
                              LOCATION_PERMISSION_REQUEST);
                      } else {
                          statusText.setText("Location permissions granted!\nGPS tracking simulation active.");
                      }
                  } catch (Exception e) {
                      Log.e(TAG, "Exception requesting permissions: " + e.getMessage(), e);
                      statusText.setText("Permission request failed: " + e.getMessage());
                  }
              }
              
              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                  
                  if (requestCode == LOCATION_PERMISSION_REQUEST) {
                      if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                          statusText.setText("Permissions granted! GPS tracking ready.");
                      } else {
                          statusText.setText("Location permissions denied. Manual tracking available.");
                      }
                  }
              }
              
              @Override
              protected void onStart() {
                  Log.d(TAG, "onStart() called");
                  super.onStart();
              }
              
              @Override
              protected void onResume() {
                  Log.d(TAG, "onResume() called");
                  super.onResume();
              }
              
              @Override
              protected void onPause() {
                  Log.d(TAG, "onPause() called");
                  super.onPause();
              }
              
              @Override
              protected void onStop() {
                  Log.d(TAG, "onStop() called");
                  super.onStop();
              }
              
              @Override
              protected void onDestroy() {
                  Log.d(TAG, "onDestroy() called");
                  super.onDestroy();
              }
          }
          EOF

      - name: Create minimal BackgroundGPSService (disabled for diagnostic)
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/BackgroundGPSService.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.app.Service;
          import android.content.Intent;
          import android.os.IBinder;
          import android.util.Log;
          
          public class BackgroundGPSService extends Service {
              private static final String TAG = "BackgroundGPSService";
              
              @Override
              public void onCreate() {
                  Log.d(TAG, "BackgroundGPSService created (diagnostic mode - inactive)");
                  super.onCreate();
              }
              
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  Log.d(TAG, "BackgroundGPSService start command received (diagnostic mode)");
                  return START_NOT_STICKY;
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
              
              @Override
              public void onDestroy() {
                  Log.d(TAG, "BackgroundGPSService destroyed");
                  super.onDestroy();
              }
          }
          EOF

      - name: Create app theme and resources
        run: |
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667eea</item>
                  <item name="colorPrimaryDark">#5a67d8</item>
                  <item name="colorAccent">#667eea</item>
                  <item name="android:windowBackground">@android:color/white</item>
              </style>
          </resources>
          EOF
          
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
          </resources>
          EOF

      - name: Create app icon
        run: |
          # Create simple colored rectangle as icon
          cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="108dp"
              android:height="108dp"
              android:viewportWidth="108"
              android:viewportHeight="108">
              <path
                  android:fillColor="#667eea"
                  android:pathData="M0,0h108v108h-108z" />
              <path
                  android:fillColor="#ffffff"
                  android:pathData="M30,30h48v48h-48z" />
          </vector>
          EOF

      - name: Create Gradle Wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF
          
          cat > android/gradle/wrapper/gradle-wrapper.jar.placeholder << 'EOF'
          # Gradle wrapper jar will be downloaded automatically
          EOF

      - name: Create gradlew script with enhanced error handling
        run: |
          cat > android/gradlew << 'EOF'
          #!/bin/sh
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          # Enhanced JVM options for crash diagnosis
          DEFAULT_JVM_OPTS="-Xmx2048m -Xms512m -XX:+HeapDumpOnOutOfMemoryError"
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          # Determine the Java command to use to start the JVM
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
          fi
          
          # Determine the app directory
          SAVED="`pwd`"
          cd "`dirname \"$0\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF
          
          chmod +x android/gradlew

      - name: Build APK with crash diagnostics
        run: |
          cd android
          ./gradlew clean assembleRelease --stacktrace --info

      - name: Upload diagnostic APK
        uses: actions/upload-artifact@v4
        with:
          name: miletracker-pro-diagnostic.apk
          path: android/app/build/outputs/apk/release/app-release.apk
