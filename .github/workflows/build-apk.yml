name: Build Android APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code for the APK'
        required: true
        default: '49125'
  schedule:
    - cron: '0 */6 * * *'
  push:
    paths:
      - '.github/workflows/build-apk.yml'
      - 'android/**'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Create Android project structure
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app
        mkdir -p android/app/src/main/res/{values,xml,drawable,mipmap-hdpi,mipmap-mdpi,mipmap-xhdpi,mipmap-xxhdpi,mipmap-xxxhdpi}
        
    - name: Create settings.gradle
      run: |
        cat > android/settings.gradle << 'EOF'
        rootProject.name = 'MileTrackerPro'
        include ':app'
        EOF
        
    - name: Create build.gradle (Project)
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            ext {
                compileSdkVersion = 35
                targetSdkVersion = 35
                minSdkVersion = 23
                buildToolsVersion = "35.0.0"
                ndkVersion = "25.1.8937393"
            }
            dependencies {
                classpath("com.android.tools.build:gradle:8.1.0")
            }
        }
        
        allprojects {
            repositories {
                google()
                mavenCentral()
                gradlePluginPortal()
            }
        }
        
        task clean(type: Delete) {
            delete rootProject.buildDir
        }
        EOF
        
    - name: Create build.gradle (App)
      run: |
        cat > android/app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'
        
        android {
            namespace 'com.miletrackerpro.app'
            compileSdk 35
            
            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdk 23
                targetSdk 35
                versionCode ${{ github.event.inputs.version_code || '49125' }}
                versionName "4.9.125"
                
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                    signingConfig signingConfigs.debug
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            
            packagingOptions {
                resources {
                    excludes += '/META-INF/{AL2.0,LGPL2.1}'
                }
            }
        }
        
        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.9.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
            implementation 'androidx.work:work-runtime:2.8.1'
            implementation 'androidx.core:core:1.10.1'
            implementation 'androidx.activity:activity:1.7.2'
            implementation 'androidx.fragment:fragment:1.6.0'
            implementation 'com.squareup.okhttp3:okhttp:4.10.0'
            implementation 'com.squareup.okhttp3:logging-interceptor:4.10.0'
            implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
            implementation 'androidx.cardview:cardview:1.0.0'
            implementation 'androidx.recyclerview:recyclerview:1.3.1'
            implementation 'androidx.gridlayout:gridlayout:1.0.0'
            implementation 'androidx.preference:preference:1.2.1'
            implementation 'androidx.navigation:navigation-fragment:2.6.0'
            implementation 'androidx.navigation:navigation-ui:2.6.0'
            implementation 'androidx.viewpager2:viewpager2:1.0.0'
            implementation 'com.google.android.gms:play-services-location:21.0.1'
            implementation 'com.google.android.gms:play-services-maps:18.1.0'
            implementation 'androidx.biometric:biometric:1.1.0'
            implementation 'androidx.security:security-crypto:1.1.0-alpha06'
            implementation 'androidx.room:room-runtime:2.5.2'
            implementation 'androidx.room:room-common:2.5.2'
            implementation 'androidx.sqlite:sqlite:2.3.1'
            implementation 'androidx.sqlite:sqlite-framework:2.3.1'
            implementation 'androidx.datastore:datastore-preferences:1.0.0'
            implementation 'com.google.code.gson:gson:2.10.1'
            
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF
        
    - name: Create gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        android.nonTransitiveRClass=false
        android.enableR8.fullMode=false
        EOF
        
    - name: Create gradle-wrapper.properties
      run: |
        mkdir -p android/gradle/wrapper
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.2-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
        
    - name: Create proguard-rules.pro
      run: |
        cat > android/app/proguard-rules.pro << 'EOF'
        -keep class com.miletrackerpro.app.** { *; }
        -keepclassmembers class * {
            @android.webkit.JavascriptInterface <methods>;
        }
        EOF
        
    - name: Create AndroidManifest.xml
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">
            
            <!-- Location permissions -->
            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
            
            <!-- Network permissions -->
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            
            <!-- Storage permissions -->
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
            
            <!-- Foreground service permissions -->
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
            <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
            <uses-permission android:name="android.permission.WAKE_LOCK" />
            
            <!-- Boot receiver -->
            <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:theme="@style/AppTheme"
                android:requestLegacyExternalStorage="true">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:label="@string/app_name"
                    android:theme="@style/AppTheme.NoActionBar">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <!-- Location tracking service -->
                <service
                    android:name=".LocationTrackingService"
                    android:enabled="true"
                    android:exported="false"
                    android:foregroundServiceType="location" />
                
                <!-- File provider for sharing files -->
                <provider
                    android:name="androidx.core.content.FileProvider"
                    android:authorities="com.miletrackerpro.app.fileprovider"
                    android:exported="false"
                    android:grantUriPermissions="true">
                    <meta-data
                        android:name="android.support.FILE_PROVIDER_PATHS"
                        android:resource="@xml/file_paths" />
                </provider>
                
                <!-- Boot receiver -->
                <receiver
                    android:name=".BootReceiver"
                    android:enabled="true"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.BOOT_COMPLETED" />
                    </intent-filter>
                </receiver>
                
            </application>
        </manifest>
        EOF
        
    - name: Create MainActivity.java with PDF Export
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;
        
        import android.Manifest;
        import android.annotation.SuppressLint;
        import android.app.AlertDialog;
        import android.app.DatePickerDialog;
        import android.content.Context;
        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.content.pm.PackageManager;
        import android.graphics.Canvas;
        import android.graphics.Color;
        import android.graphics.Paint;
        import android.graphics.Typeface;
        import android.graphics.pdf.PdfDocument;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.net.Uri;
        import android.os.Bundle;
        import android.os.Handler;
        import android.os.Looper;
        import android.text.InputType;
        import android.util.Log;
        import android.view.View;
        import android.view.ViewGroup;
        import android.widget.ArrayAdapter;
        import android.widget.Button;
        import android.widget.CheckBox;
        import android.widget.EditText;
        import android.widget.LinearLayout;
        import android.widget.ListView;
        import android.widget.ScrollView;
        import android.widget.SeekBar;
        import android.widget.Spinner;
        import android.widget.TextView;
        import android.widget.Toast;
        
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import androidx.core.content.FileProvider;
        
        import java.io.File;
        import java.io.FileOutputStream;
        import java.io.FileWriter;
        import java.io.IOException;
        import java.text.SimpleDateFormat;
        import java.util.ArrayList;
        import java.util.Calendar;
        import java.util.Date;
        import java.util.List;
        import java.util.Locale;
        
        public class MainActivity extends AppCompatActivity implements LocationListener {
            private static final String TAG = "MileTrackerPro";
            private static final int LOCATION_PERMISSION_REQUEST_CODE = 1001;
            private static final double SPEED_THRESHOLD_DRIVING = 4.6; // mph - matches MileIQ
            private static final double SPEED_THRESHOLD_STATIONARY = 2.0; // mph - matches MileIQ
            
            // UI Components
            private Button homeButton, sortButton, filedButton;
            private TextView speedDisplay, distanceDisplay, homeLocationDisplay, statusDisplay;
            private Button autoToggle, startButton, stopButton, settingsButton;
            private Button refreshButton, mergeButton, exportButton;
            private ListView tripListView;
            private ScrollView homeScrollView, sortScrollView, filedScrollView;
            private LinearLayout recentTripsLayout;
            private TextView statisticsDisplay;
            
            // Core Services
            private LocationManager locationManager;
            private Handler handler;
            private TripStorage tripStorage;
            private boolean isTracking = false;
            private boolean isAutoDetectionEnabled = false;
            
            // Trip tracking variables
            private Trip currentTrip;
            private Location lastLocation;
            private double currentDistance = 0.0;
            private long lastUpdateTime = 0;
            private boolean isStationaryTimerActive = false;
            private long stationaryStartTime = 0;
            private boolean isBlinking = false;
            
            // Current tab state
            private int currentTab = 0; // 0=Home, 1=Sort, 2=Filed
            
            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                setContentView(R.layout.activity_main);
                
                // Initialize core services
                handler = new Handler(Looper.getMainLooper());
                tripStorage = new TripStorage(this);
                
                // Initialize UI components
                initializeUI();
                
                // Set up location services
                setupLocationServices();
                
                // Load saved settings
                loadSettings();
                
                // Refresh display
                refreshTripsDisplay();
                showTab(0); // Show home tab by default
                
                Log.d(TAG, "MileTracker Pro initialized successfully");
            }
            
            private void initializeUI() {
                // Tab buttons
                homeButton = findViewById(R.id.home_button);
                sortButton = findViewById(R.id.sort_button);
                filedButton = findViewById(R.id.filed_button);
                
                // Home tab components
                homeScrollView = findViewById(R.id.home_scroll_view);
                speedDisplay = findViewById(R.id.speed_display);
                distanceDisplay = findViewById(R.id.distance_display);
                homeLocationDisplay = findViewById(R.id.home_location_display);
                statusDisplay = findViewById(R.id.status_display);
                autoToggle = findViewById(R.id.auto_toggle);
                startButton = findViewById(R.id.start_button);
                stopButton = findViewById(R.id.stop_button);
                settingsButton = findViewById(R.id.settings_button);
                recentTripsLayout = findViewById(R.id.recent_trips_layout);
                statisticsDisplay = findViewById(R.id.statistics_display);
                
                // Sort/Filed tab components
                sortScrollView = findViewById(R.id.sort_scroll_view);
                filedScrollView = findViewById(R.id.filed_scroll_view);
                tripListView = findViewById(R.id.trip_list_view);
                refreshButton = findViewById(R.id.refresh_button);
                mergeButton = findViewById(R.id.merge_button);
                exportButton = findViewById(R.id.export_button);
                
                // Set up click listeners
                setupClickListeners();
                
                // Initialize displays
                updateSpeedDisplay(0.0);
                updateDistanceDisplay(0.0);
                updateStatusDisplay("Ready");
                updateAutoToggleButton();
                updateStatisticsDisplay();
                
                Log.d(TAG, "UI components initialized");
            }
            
            private void setupClickListeners() {
                // Tab buttons
                homeButton.setOnClickListener(v -> showTab(0));
                sortButton.setOnClickListener(v -> showTab(1));
                filedButton.setOnClickListener(v -> showTab(2));
                
                // Home tab controls
                autoToggle.setOnClickListener(v -> toggleAutoDetection());
                startButton.setOnClickListener(v -> startManualTrip());
                stopButton.setOnClickListener(v -> stopCurrentTrip());
                settingsButton.setOnClickListener(v -> showSettingsDialog());
                
                // Trip management buttons
                refreshButton.setOnClickListener(v -> refreshTripsDisplay());
                mergeButton.setOnClickListener(v -> showMergeDialog());
                exportButton.setOnClickListener(v -> showExportDialog());
            }
            
            private void showTab(int tabIndex) {
                currentTab = tabIndex;
                
                // Hide all tabs
                homeScrollView.setVisibility(View.GONE);
                sortScrollView.setVisibility(View.GONE);
                filedScrollView.setVisibility(View.GONE);
                
                // Update tab button styles
                updateTabButtonStyles();
                
                // Show selected tab
                switch (tabIndex) {
                    case 0: // Home
                        homeScrollView.setVisibility(View.VISIBLE);
                        updateRecentTrips();
                        break;
                    case 1: // Sort Trips
                        sortScrollView.setVisibility(View.VISIBLE);
                        refreshTripsDisplay();
                        break;
                    case 2: // Filed Trips
                        filedScrollView.setVisibility(View.VISIBLE);
                        refreshTripsDisplay();
                        break;
                }
                
                Log.d(TAG, "Switched to tab: " + tabIndex);
            }
            
            private void updateTabButtonStyles() {
                int activeColor = 0xFF667eea; // Periwinkle blue
                int inactiveColor = 0xFF9CA3AF; // Gray
                
                homeButton.setBackgroundColor(currentTab == 0 ? activeColor : inactiveColor);
                sortButton.setBackgroundColor(currentTab == 1 ? activeColor : inactiveColor);
                filedButton.setBackgroundColor(currentTab == 2 ? activeColor : inactiveColor);
            }
            
            private void refreshTripsDisplay() {
                List<Trip> trips = tripStorage.getAllTrips();
                
                // Update trips display based on current tab
                if (currentTab == 1) {
                    // Sort tab - show uncategorized trips
                    List<Trip> uncategorizedTrips = new ArrayList<>();
                    for (Trip trip : trips) {
                        if (trip.getCategory() == null || trip.getCategory().equals("Uncategorized")) {
                            uncategorizedTrips.add(trip);
                        }
                    }
                    updateTripsList(uncategorizedTrips);
                } else if (currentTab == 2) {
                    // Filed tab - show categorized trips
                    List<Trip> categorizedTrips = new ArrayList<>();
                    for (Trip trip : trips) {
                        if (trip.getCategory() != null && !trip.getCategory().equals("Uncategorized")) {
                            categorizedTrips.add(trip);
                        }
                    }
                    updateTripsList(categorizedTrips);
                }
                
                // Update statistics
                updateStatisticsDisplay();
                
                Log.d(TAG, "Refreshed trips display for tab: " + currentTab);
            }
            
            private void updateTripsList(List<Trip> trips) {
                if (tripListView == null) return;
                
                List<String> tripDescriptions = new ArrayList<>();
                for (Trip trip : trips) {
                    String description = String.format("%s • %.1f mi • %s • %s",
                        new SimpleDateFormat("MM/dd HH:mm", Locale.getDefault()).format(new Date(trip.getStartTime())),
                        trip.getDistance(),
                        trip.getCategory() != null ? trip.getCategory() : "Uncategorized",
                        trip.isAutoDetected() ? "Auto" : "Manual");
                    tripDescriptions.add(description);
                }
                
                ArrayAdapter<String> adapter = new ArrayAdapter<>(this, android.R.layout.simple_list_item_1, tripDescriptions);
                tripListView.setAdapter(adapter);
                
                // Set item click listener for trip details
                tripListView.setOnItemClickListener((parent, view, position, id) -> {
                    if (position < trips.size()) {
                        showTripDetailsDialog(trips.get(position));
                    }
                });
                
                Log.d(TAG, "Updated trips list with " + trips.size() + " trips");
            }
            
            private void showExportDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("📊 Export Trips");
                
                // Create layout
                LinearLayout layout = new LinearLayout(this);
                layout.setOrientation(LinearLayout.VERTICAL);
                layout.setPadding(50, 30, 50, 30);
                
                // Date range selection
                TextView dateRangeLabel = new TextView(this);
                dateRangeLabel.setText("Select Date Range:");
                dateRangeLabel.setTextSize(16);
                dateRangeLabel.setTypeface(null, Typeface.BOLD);
                layout.addView(dateRangeLabel);
                
                Button startDateButton = new Button(this);
                startDateButton.setText("Start Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(new Date()));
                Button endDateButton = new Button(this);
                endDateButton.setText("End Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(new Date()));
                
                layout.addView(startDateButton);
                layout.addView(endDateButton);
                
                // Category filter
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Category Filter:");
                categoryLabel.setTextSize(16);
                categoryLabel.setTypeface(null, Typeface.BOLD);
                categoryLabel.setPadding(0, 20, 0, 5);
                layout.addView(categoryLabel);
                
                Spinner categorySpinner = new Spinner(this);
                String[] categories = {"All Categories", "Business", "Personal", "Medical", "Charity"};
                ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categorySpinner.setAdapter(categoryAdapter);
                layout.addView(categorySpinner);
                
                // Export format
                TextView formatLabel = new TextView(this);
                formatLabel.setText("Export Format:");
                formatLabel.setTextSize(16);
                formatLabel.setTypeface(null, Typeface.BOLD);
                formatLabel.setPadding(0, 20, 0, 5);
                layout.addView(formatLabel);
                
                Spinner formatSpinner = new Spinner(this);
                String[] formats = {"CSV Spreadsheet", "Text Document", "PDF Report"};
                ArrayAdapter<String> formatAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, formats);
                formatAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                formatSpinner.setAdapter(formatAdapter);
                layout.addView(formatSpinner);
                
                // Export destination
                TextView destinationLabel = new TextView(this);
                destinationLabel.setText("Export to:");
                destinationLabel.setTextSize(16);
                destinationLabel.setTypeface(null, Typeface.BOLD);
                destinationLabel.setPadding(0, 20, 0, 5);
                layout.addView(destinationLabel);
                
                Button emailButton = new Button(this);
                emailButton.setText("📧 Email");
                emailButton.setBackgroundColor(0xFF007BFF);
                emailButton.setTextColor(Color.WHITE);
                
                Button cloudButton = new Button(this);
                cloudButton.setText("☁️ Cloud Storage");
                cloudButton.setBackgroundColor(0xFF28A745);
                cloudButton.setTextColor(Color.WHITE);
                
                layout.addView(emailButton);
                layout.addView(cloudButton);
                
                builder.setView(layout);
                
                // Date selection handlers
                Calendar startCal = Calendar.getInstance();
                Calendar endCal = Calendar.getInstance();
                
                startDateButton.setOnClickListener(v -> {
                    DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                        (view, year, month, dayOfMonth) -> {
                            startCal.set(year, month, dayOfMonth);
                            startDateButton.setText("Start Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startCal.getTime()));
                        },
                        startCal.get(Calendar.YEAR), startCal.get(Calendar.MONTH), startCal.get(Calendar.DAY_OF_MONTH));
                    datePickerDialog.show();
                });
                
                endDateButton.setOnClickListener(v -> {
                    DatePickerDialog datePickerDialog = new DatePickerDialog(this,
                        (view, year, month, dayOfMonth) -> {
                            endCal.set(year, month, dayOfMonth);
                            endDateButton.setText("End Date: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endCal.getTime()));
                        },
                        endCal.get(Calendar.YEAR), endCal.get(Calendar.MONTH), endCal.get(Calendar.DAY_OF_MONTH));
                    datePickerDialog.show();
                });
                
                AlertDialog dialog = builder.create();
                
                // Export button handlers
                emailButton.setOnClickListener(v -> {
                    dialog.dismiss();
                    exportToEmail(startCal.getTime(), endCal.getTime(), 
                        categories[categorySpinner.getSelectedItemPosition()], 
                        formatSpinner.getSelectedItemPosition());
                });
                
                cloudButton.setOnClickListener(v -> {
                    dialog.dismiss();
                    exportToCloud(startCal.getTime(), endCal.getTime(), 
                        categories[categorySpinner.getSelectedItemPosition()], 
                        formatSpinner.getSelectedItemPosition());
                });
                
                builder.setNegativeButton("Cancel", (dialog1, which) -> dialog1.dismiss());
                
                dialog.show();
            }
            
            private void exportToEmail(Date startDate, Date endDate, String category, int formatPosition) {
                try {
                    List<Trip> tripsInRange = getTripsInDateRange(startDate, endDate, category);
                    if (tripsInRange.isEmpty()) {
                        String categoryText = category.equals("All Categories") ? "selected date range" : category + " trips in selected date range";
                        Toast.makeText(this, "❌ No " + categoryText + " found", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    String exportContent;
                    String fileExtension;
                    String mimeType;
                    String formatName;
                    File exportFile;
                    
                    // Create temporary file based on format
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                    String fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                    if (!category.equals("All Categories")) {
                        fileName += "_" + category.replace(" ", "_");
                    }
                    
                    if (formatPosition == 0) {
                        // CSV format
                        exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                        fileExtension = ".csv";
                        mimeType = "text/csv";
                        formatName = "CSV Spreadsheet";
                        fileName += fileExtension;
                        exportFile = new File(getExternalCacheDir(), fileName);
                    } else if (formatPosition == 1) {
                        // TXT format
                        exportContent = generateTXT(tripsInRange, startDate, endDate, category);
                        fileExtension = ".txt";
                        mimeType = "text/plain";
                        formatName = "Text Document";
                        fileName += fileExtension;
                        exportFile = new File(getExternalCacheDir(), fileName);
                    } else {
                        // PDF format
                        fileExtension = ".pdf";
                        mimeType = "application/pdf";
                        formatName = "PDF Report";
                        fileName += fileExtension;
                        exportFile = new File(getExternalCacheDir(), fileName);
                        // Generate PDF instead of text content
                        generatePDF(tripsInRange, startDate, endDate, category, exportFile);
                        exportContent = null; // Not needed for PDF
                    }
                    
                    try {
                        // For non-PDF formats, write content to file
                        if (exportContent != null) {
                            FileWriter writer = new FileWriter(exportFile);
                            writer.write(exportContent);
                            writer.close();
                        }
                        
                        // Create URI for the file
                        Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                        
                        String categoryFilter = category.equals("All Categories") ? "" : " (" + category + ")";
                        
                        Intent emailIntent = new Intent(Intent.ACTION_SEND);
                        emailIntent.setType("message/rfc822"); // Force email apps instead of text apps
                        emailIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export" + categoryFilter + " " + 
                            new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " +
                            new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate));
                        emailIntent.putExtra(Intent.EXTRA_TEXT, "Please find your MileTracker Pro trip data attached as " + exportFile.getName() + ".\n\n" +
                            "Export Summary:\n" +
                            "Date Range: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate) + "\n" +
                            "Category: " + category + "\n" +
                            "Total Trips: " + tripsInRange.size() + "\n" +
                            "File Format: " + formatName + "\n\n" +
                            "This file can be opened in Excel, Google Sheets, or any spreadsheet application.\n\n" +
                            "Generated by MileTracker Pro");
                        emailIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                        emailIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                        
                        // Try email-specific apps first, fallback to general sharing
                        try {
                            emailIntent.setPackage("com.google.android.gm"); // Try Gmail first
                            if (emailIntent.resolveActivity(getPackageManager()) != null) {
                                startActivity(emailIntent);
                                Toast.makeText(this, "✅ Opening Gmail with " + tripsInRange.size() + " trips attached", Toast.LENGTH_LONG).show();
                            } else {
                                // Try Outlook
                                emailIntent.setPackage("com.microsoft.office.outlook");
                                if (emailIntent.resolveActivity(getPackageManager()) != null) {
                                    startActivity(emailIntent);
                                    Toast.makeText(this, "✅ Opening Outlook with " + tripsInRange.size() + " trips attached", Toast.LENGTH_LONG).show();
                                } else {
                                    // Fallback to any email app
                                    emailIntent.setPackage(null);
                                    emailIntent.setType("message/rfc822");
                                    if (emailIntent.resolveActivity(getPackageManager()) != null) {
                                        startActivity(Intent.createChooser(emailIntent, "Send via email..."));
                                        Toast.makeText(this, "✅ Email created with " + tripsInRange.size() + " trips attached", Toast.LENGTH_LONG).show();
                                    } else {
                                        Toast.makeText(this, "❌ No email app available", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error launching email: " + e.getMessage(), e);
                            Toast.makeText(this, "❌ Failed to open email app", Toast.LENGTH_SHORT).show();
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Error creating export file: " + e.getMessage(), e);
                        Toast.makeText(this, "❌ Failed to create export file: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error exporting to email: " + e.getMessage(), e);
                    Toast.makeText(this, "❌ Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                }
            }
            
            private void exportToCloud(Date startDate, Date endDate, String category, int formatPosition) {
                try {
                    List<Trip> tripsInRange = getTripsInDateRange(startDate, endDate, category);
                    if (tripsInRange.isEmpty()) {
                        String categoryText = category.equals("All Categories") ? "selected date range" : category + " trips in selected date range";
                        Toast.makeText(this, "❌ No " + categoryText + " found", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    String exportContent;
                    String fileExtension;
                    String mimeType;
                    String formatName;
                    File exportFile;
                    
                    // Create temporary file based on format
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                    String fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                    if (!category.equals("All Categories")) {
                        fileName += "_" + category.replace(" ", "_");
                    }
                    
                    if (formatPosition == 0) {
                        // CSV format
                        exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                        fileExtension = ".csv";
                        mimeType = "text/csv";
                        formatName = "CSV";
                        fileName += fileExtension;
                        exportFile = new File(getExternalCacheDir(), fileName);
                    } else if (formatPosition == 1) {
                        // TXT format
                        exportContent = generateTXT(tripsInRange, startDate, endDate, category);
                        fileExtension = ".txt";
                        mimeType = "text/plain";
                        formatName = "TXT";
                        fileName += fileExtension;
                        exportFile = new File(getExternalCacheDir(), fileName);
                    } else {
                        // PDF format
                        fileExtension = ".pdf";
                        mimeType = "application/pdf";
                        formatName = "PDF";
                        fileName += fileExtension;
                        exportFile = new File(getExternalCacheDir(), fileName);
                        // Generate PDF instead of text content
                        generatePDF(tripsInRange, startDate, endDate, category, exportFile);
                        exportContent = null; // Not needed for PDF
                    }
                    
                    try {
                        // For non-PDF formats, write content to file
                        if (exportContent != null) {
                            FileWriter writer = new FileWriter(exportFile);
                            writer.write(exportContent);
                            writer.close();
                        }
                        
                        // Create URI for the file
                        Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                        
                        String categoryFilter = category.equals("All Categories") ? "" : " (" + category + ")";
                        
                        Intent shareIntent = new Intent(Intent.ACTION_SEND);
                        shareIntent.setType(mimeType);
                        shareIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export" + categoryFilter);
                        shareIntent.putExtra(Intent.EXTRA_TEXT, "MileTracker Pro trip data export file attached.\n\n" +
                            "File: " + exportFile.getName() + "\n" +
                            "Date Range: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate) + "\n" +
                            "Category: " + category + "\n" +
                            "Total Trips: " + tripsInRange.size());
                        shareIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                        shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                    
                        if (shareIntent.resolveActivity(getPackageManager()) != null) {
                            startActivity(Intent.createChooser(shareIntent, "Share to cloud storage..."));
                            Toast.makeText(this, "✅ Sharing " + tripsInRange.size() + " trips (" + formatName + ") to cloud", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(this, "❌ No sharing apps available", Toast.LENGTH_SHORT).show();
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Error creating export file: " + e.getMessage(), e);
                        Toast.makeText(this, "❌ Failed to create export file: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error exporting to cloud: " + e.getMessage(), e);
                    Toast.makeText(this, "❌ Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                }
            }
            
            private void generatePDF(List<Trip> trips, Date startDate, Date endDate, String category, File outputFile) {
                try {
                    // Create a new PDF document
                    PdfDocument pdfDocument = new PdfDocument();
                    
                    // Define page info
                    PdfDocument.PageInfo pageInfo = new PdfDocument.PageInfo.Builder(612, 792, 1).create(); // Standard letter size
                    PdfDocument.Page page = pdfDocument.startPage(pageInfo);
                    
                    Canvas canvas = page.getCanvas();
                    Paint paint = new Paint();
                    
                    // Set up fonts and layout
                    paint.setAntiAlias(true);
                    paint.setColor(Color.BLACK);
                    paint.setTextAlign(Paint.Align.LEFT);
                    
                    // Title
                    paint.setTextSize(20);
                    paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
                    canvas.drawText("MileTracker Pro - Trip Export", 50, 50, paint);
                    
                    // Date range and category info
                    paint.setTextSize(12);
                    paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.NORMAL));
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                    canvas.drawText("Export Date Range: " + dateFormat.format(startDate) + " to " + dateFormat.format(endDate), 50, 80, paint);
                    canvas.drawText("Category Filter: " + category, 50, 100, paint);
                    canvas.drawText("Generated: " + dateFormat.format(new Date()), 50, 120, paint);
                    
                    // Table headers
                    paint.setTextSize(10);
                    paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
                    int yPos = 160;
                    canvas.drawText("Date", 50, yPos, paint);
                    canvas.drawText("Start", 120, yPos, paint);
                    canvas.drawText("End", 160, yPos, paint);
                    canvas.drawText("From", 200, yPos, paint);
                    canvas.drawText("To", 320, yPos, paint);
                    canvas.drawText("Miles", 440, yPos, paint);
                    canvas.drawText("Category", 490, yPos, paint);
                    
                    // Draw header line
                    paint.setStrokeWidth(1);
                    canvas.drawLine(50, yPos + 5, 550, yPos + 5, paint);
                    
                    // Trip data
                    paint.setTextSize(9);
                    paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.NORMAL));
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                    double totalMiles = 0;
                    yPos += 20;
                    
                    int currentPage = 1;
                    int linesPerPage = 25;
                    int lineCount = 0;
                    
                    for (Trip trip : trips) {
                        // Check if we need a new page
                        if (lineCount >= linesPerPage) {
                            pdfDocument.finishPage(page);
                            page = pdfDocument.startPage(pageInfo);
                            canvas = page.getCanvas();
                            yPos = 50;
                            lineCount = 0;
                            currentPage++;
                        }
                        
                        Date tripDate = new Date(trip.getStartTime());
                        Date endTime = new Date(trip.getEndTime());
                        
                        canvas.drawText(dateFormat.format(tripDate), 50, yPos, paint);
                        canvas.drawText(timeFormat.format(tripDate), 120, yPos, paint);
                        canvas.drawText(timeFormat.format(endTime), 160, yPos, paint);
                        
                        // Truncate addresses for PDF display
                        String startAddr = trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown";
                        String endAddr = trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown";
                        if (startAddr.length() > 15) startAddr = startAddr.substring(0, 15) + "...";
                        if (endAddr.length() > 15) endAddr = endAddr.substring(0, 15) + "...";
                        
                        canvas.drawText(startAddr, 200, yPos, paint);
                        canvas.drawText(endAddr, 320, yPos, paint);
                        canvas.drawText(String.format("%.1f", trip.getDistance()), 440, yPos, paint);
                        canvas.drawText(trip.getCategory() != null ? trip.getCategory() : "Uncategorized", 490, yPos, paint);
                        
                        totalMiles += trip.getDistance();
                        yPos += 15;
                        lineCount++;
                    }
                    
                    // Summary section
                    yPos += 20;
                    paint.setTextSize(12);
                    paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.BOLD));
                    canvas.drawText("SUMMARY", 50, yPos, paint);
                    
                    paint.setTextSize(10);
                    paint.setTypeface(Typeface.create(Typeface.DEFAULT, Typeface.NORMAL));
                    yPos += 20;
                    canvas.drawText("Total Trips: " + trips.size(), 50, yPos, paint);
                    yPos += 15;
                    canvas.drawText("Total Miles: " + String.format("%.2f", totalMiles), 50, yPos, paint);
                    yPos += 15;
                    canvas.drawText("Business Deduction (IRS $" + String.format("%.2f", getIrsBusinessRate()) + "/mi): $" + String.format("%.2f", totalMiles * getIrsBusinessRate()), 50, yPos, paint);
                    
                    // Page number
                    paint.setTextSize(8);
                    canvas.drawText("Page " + currentPage, 500, 780, paint);
                    
                    pdfDocument.finishPage(page);
                    
                    // Write to file
                    try (FileOutputStream fos = new FileOutputStream(outputFile)) {
                        pdfDocument.writeTo(fos);
                    }
                    
                    pdfDocument.close();
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error generating PDF: " + e.getMessage(), e);
                    throw new RuntimeException("Failed to generate PDF: " + e.getMessage());
                }
            }
            
            private List<Trip> getTripsInDateRange(Date startDate, Date endDate, String category) {
                List<Trip> allTrips = tripStorage.getAllTrips();
                List<Trip> filteredTrips = new ArrayList<>();
                
                for (Trip trip : allTrips) {
                    Date tripDate = new Date(trip.getStartTime());
                    if (!tripDate.before(startDate) && !tripDate.after(endDate)) {
                        // Apply category filter
                        if (category.equals("All Categories") || 
                            (trip.getCategory() != null && trip.getCategory().equals(category))) {
                            filteredTrips.add(trip);
                        }
                    }
                }
                
                return filteredTrips;
            }
            
            private String generateCSV(List<Trip> trips, Date startDate, Date endDate, String category) {
                StringBuilder csv = new StringBuilder();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                
                // Header
                csv.append("MileTracker Pro - Trip Export\n");
                csv.append("Export Date Range: ").append(dateFormat.format(startDate))
                   .append(" to ").append(dateFormat.format(endDate)).append("\n");
                csv.append("Category Filter: ").append(category).append("\n");
                csv.append("Generated: ").append(dateFormat.format(new Date())).append("\n\n");
                
                // CSV Headers
                csv.append("Date,Start Time,End Time,Start Location,End Location,Distance (mi),Duration,Category,Client,Notes,Type\n");
                
                // Data rows
                double totalMiles = 0;
                for (Trip trip : trips) {
                    Date tripDate = new Date(trip.getStartTime());
                    Date endTime = new Date(trip.getEndTime());
                    
                    csv.append("\"").append(dateFormat.format(tripDate)).append("\",");
                    csv.append("\"").append(timeFormat.format(tripDate)).append("\",");
                    csv.append("\"").append(timeFormat.format(endTime)).append("\",");
                    csv.append("\"").append(trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown").append("\",");
                    csv.append("\"").append(trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown").append("\",");
                    csv.append(String.format("%.2f", trip.getDistance())).append(",");
                    csv.append("\"").append(trip.getFormattedDuration()).append("\",");
                    csv.append("\"").append(trip.getCategory() != null ? trip.getCategory() : "Uncategorized").append("\",");
                    csv.append("\"").append(trip.getClientName() != null ? trip.getClientName() : "").append("\",");
                    csv.append("\"").append(trip.getNotes() != null ? trip.getNotes() : "").append("\",");
                    csv.append("\"").append(trip.isAutoDetected() ? "Auto" : "Manual").append("\"\n");
                    
                    totalMiles += trip.getDistance();
                }
                
                // Summary
                csv.append("\nSUMMARY\n");
                csv.append("Total Trips,").append(trips.size()).append("\n");
                csv.append("Total Miles,").append(String.format("%.2f", totalMiles)).append("\n");
                csv.append("Business Deduction (IRS $").append(String.format("%.2f", getIrsBusinessRate())).append("/mi),\"$").append(String.format("%.2f", totalMiles * getIrsBusinessRate())).append("\"\n");
                
                return csv.toString();
            }
            
            private String generateTXT(List<Trip> trips, Date startDate, Date endDate, String category) {
                StringBuilder txt = new StringBuilder();
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                
                // Header
                txt.append("MileTracker Pro - Trip Export\n");
                txt.append("================================\n\n");
                txt.append("Export Date Range: ").append(dateFormat.format(startDate))
                   .append(" to ").append(dateFormat.format(endDate)).append("\n");
                txt.append("Category Filter: ").append(category).append("\n");
                txt.append("Generated: ").append(dateFormat.format(new Date())).append("\n\n");
                
                // Trip details
                double totalMiles = 0;
                int tripNumber = 1;
                
                for (Trip trip : trips) {
                    Date tripDate = new Date(trip.getStartTime());
                    Date endTime = new Date(trip.getEndTime());
                    
                    txt.append("TRIP #").append(tripNumber++).append("\n");
                    txt.append("--------\n");
                    txt.append("Date: ").append(dateFormat.format(tripDate)).append("\n");
                    txt.append("Time: ").append(timeFormat.format(tripDate))
                       .append(" - ").append(timeFormat.format(endTime)).append("\n");
                    txt.append("From: ").append(trip.getStartAddress() != null ? trip.getStartAddress() : "Unknown").append("\n");
                    txt.append("To: ").append(trip.getEndAddress() != null ? trip.getEndAddress() : "Unknown").append("\n");
                    txt.append("Distance: ").append(String.format("%.2f", trip.getDistance())).append(" miles\n");
                    txt.append("Duration: ").append(trip.getFormattedDuration()).append("\n");
                    txt.append("Category: ").append(trip.getCategory() != null ? trip.getCategory() : "Uncategorized").append("\n");
                    if (trip.getClientName() != null && !trip.getClientName().isEmpty()) {
                        txt.append("Client: ").append(trip.getClientName()).append("\n");
                    }
                    if (trip.getNotes() != null && !trip.getNotes().isEmpty()) {
                        txt.append("Notes: ").append(trip.getNotes()).append("\n");
                    }
                    txt.append("Type: ").append(trip.isAutoDetected() ? "Auto-detected" : "Manual entry").append("\n\n");
                    
                    totalMiles += trip.getDistance();
                }
                
                // Summary
                txt.append("SUMMARY\n");
                txt.append("=======\n");
                txt.append("Total Trips: ").append(trips.size()).append("\n");
                txt.append("Total Miles: ").append(String.format("%.2f", totalMiles)).append("\n");
                txt.append("Business Deduction (IRS $").append(String.format("%.2f", getIrsBusinessRate())).append("/mi): $").append(String.format("%.2f", totalMiles * getIrsBusinessRate())).append("\n");
                
                return txt.toString();
            }
            
            // Rest of the MainActivity methods would continue here...
            // (keeping this focused on the PDF export functionality)
            
            private double getIrsBusinessRate() {
                SharedPreferences prefs = getSharedPreferences("MileTrackerPrefs", MODE_PRIVATE);
                return (double) prefs.getFloat("irs_business_rate", 0.70f); // 2025 IRS rate
            }
            
            // Placeholder methods for compilation
            private void setupLocationServices() {}
            private void loadSettings() {}
            private void updateRecentTrips() {}
            private void updateSpeedDisplay(double speed) {}
            private void updateDistanceDisplay(double distance) {}
            private void updateStatusDisplay(String status) {}
            private void updateAutoToggleButton() {}
            private void updateStatisticsDisplay() {}
            private void toggleAutoDetection() {}
            private void startManualTrip() {}
            private void stopCurrentTrip() {}
            private void showSettingsDialog() {}
            private void showMergeDialog() {}
            private void showTripDetailsDialog(Trip trip) {}
            
            @Override
            public void onLocationChanged(Location location) {}
            @Override
            public void onProviderEnabled(String provider) {}
            @Override
            public void onProviderDisabled(String provider) {}
            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {}
        }
        EOF
        
    - name: Create additional required files
      run: |
        # Create layout file
        mkdir -p android/app/src/main/res/layout
        cat > android/app/src/main/res/layout/activity_main.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:orientation="vertical">
            
            <!-- Tab buttons -->
            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="horizontal">
                
                <Button
                    android:id="@+id/home_button"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="🏠\nHome" />
                
                <Button
                    android:id="@+id/sort_button"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="📋\nSort Trips" />
                
                <Button
                    android:id="@+id/filed_button"
                    android:layout_width="0dp"
                    android:layout_height="wrap_content"
                    android:layout_weight="1"
                    android:text="📂\nFiled Trips" />
                    
            </LinearLayout>
            
            <!-- Home tab content -->
            <ScrollView
                android:id="@+id/home_scroll_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent">
                
                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">
                    
                    <TextView
                        android:id="@+id/speed_display"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Speed: 0.0 mph"
                        android:textSize="18sp" />
                    
                    <TextView
                        android:id="@+id/distance_display"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Distance: 0.0 miles"
                        android:textSize="18sp" />
                    
                    <TextView
                        android:id="@+id/home_location_display"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Home Location: Not set"
                        android:textSize="14sp" />
                    
                    <TextView
                        android:id="@+id/status_display"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Status: Ready"
                        android:textSize="16sp" />
                    
                    <Button
                        android:id="@+id/auto_toggle"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Auto Detection: OFF" />
                    
                    <Button
                        android:id="@+id/start_button"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="START TRIP" />
                    
                    <Button
                        android:id="@+id/stop_button"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="STOP TRIP" />
                    
                    <Button
                        android:id="@+id/settings_button"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Settings" />
                    
                    <LinearLayout
                        android:id="@+id/recent_trips_layout"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="vertical" />
                    
                    <TextView
                        android:id="@+id/statistics_display"
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:text="Statistics"
                        android:textSize="16sp" />
                        
                </LinearLayout>
            </ScrollView>
            
            <!-- Sort tab content -->
            <ScrollView
                android:id="@+id/sort_scroll_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:visibility="gone">
                
                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">
                    
                    <LinearLayout
                        android:layout_width="match_parent"
                        android:layout_height="wrap_content"
                        android:orientation="horizontal">
                        
                        <Button
                            android:id="@+id/refresh_button"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:text="REFRESH" />
                        
                        <Button
                            android:id="@+id/merge_button"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:text="MERGE" />
                        
                        <Button
                            android:id="@+id/export_button"
                            android:layout_width="0dp"
                            android:layout_height="wrap_content"
                            android:layout_weight="1"
                            android:text="EXPORT" />
                            
                    </LinearLayout>
                    
                    <ListView
                        android:id="@+id/trip_list_view"
                        android:layout_width="match_parent"
                        android:layout_height="400dp" />
                        
                </LinearLayout>
            </ScrollView>
            
            <!-- Filed tab content -->
            <ScrollView
                android:id="@+id/filed_scroll_view"
                android:layout_width="match_parent"
                android:layout_height="match_parent"
                android:visibility="gone">
                
                <LinearLayout
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:orientation="vertical"
                    android:padding="16dp">
                    
                    <ListView
                        android:id="@+id/filed_trip_list_view"
                        android:layout_width="match_parent"
                        android:layout_height="400dp" />
                        
                </LinearLayout>
            </ScrollView>
            
        </LinearLayout>
        EOF
        
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <resources>
            <string name="app_name">MileTracker Pro</string>
        </resources>
        EOF
        
        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">#667eea</item>
                <item name="colorPrimaryDark">#5a67d8</item>
                <item name="colorAccent">#667eea</item>
            </style>
            
            <style name="AppTheme.NoActionBar">
                <item name="windowActionBar">false</item>
                <item name="windowNoTitle">true</item>
            </style>
        </resources>
        EOF
        
        # Create file_paths.xml
        cat > android/app/src/main/res/xml/file_paths.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <paths xmlns:android="http://schemas.android.com/apk/res/android">
            <external-cache-path name="shared_files" path="." />
        </paths>
        EOF
        
        # Create placeholder classes
        cat > android/app/src/main/java/com/miletrackerpro/app/Trip.java << 'EOF'
        package com.miletrackerpro.app;
        
        public class Trip {
            private long startTime;
            private long endTime;
            private String startAddress;
            private String endAddress;
            private double distance;
            private String category;
            private String clientName;
            private String notes;
            private boolean autoDetected;
            
            public Trip() {}
            
            public long getStartTime() { return startTime; }
            public void setStartTime(long startTime) { this.startTime = startTime; }
            
            public long getEndTime() { return endTime; }
            public void setEndTime(long endTime) { this.endTime = endTime; }
            
            public String getStartAddress() { return startAddress; }
            public void setStartAddress(String startAddress) { this.startAddress = startAddress; }
            
            public String getEndAddress() { return endAddress; }
            public void setEndAddress(String endAddress) { this.endAddress = endAddress; }
            
            public double getDistance() { return distance; }
            public void setDistance(double distance) { this.distance = distance; }
            
            public String getCategory() { return category; }
            public void setCategory(String category) { this.category = category; }
            
            public String getClientName() { return clientName; }
            public void setClientName(String clientName) { this.clientName = clientName; }
            
            public String getNotes() { return notes; }
            public void setNotes(String notes) { this.notes = notes; }
            
            public boolean isAutoDetected() { return autoDetected; }
            public void setAutoDetected(boolean autoDetected) { this.autoDetected = autoDetected; }
            
            public String getFormattedDuration() {
                long durationMs = endTime - startTime;
                long minutes = durationMs / 60000;
                long hours = minutes / 60;
                minutes = minutes % 60;
                
                if (hours > 0) {
                    return String.format("%dh %dm", hours, minutes);
                } else {
                    return String.format("%dm", minutes);
                }
            }
        }
        EOF
        
        cat > android/app/src/main/java/com/miletrackerpro/app/TripStorage.java << 'EOF'
        package com.miletrackerpro.app;
        
        import android.content.Context;
        import java.util.ArrayList;
        import java.util.List;
        
        public class TripStorage {
            private Context context;
            private List<Trip> trips;
            
            public TripStorage(Context context) {
                this.context = context;
                this.trips = new ArrayList<>();
            }
            
            public List<Trip> getAllTrips() {
                return new ArrayList<>(trips);
            }
            
            public void addTrip(Trip trip) {
                trips.add(trip);
            }
            
            public void removeTrip(Trip trip) {
                trips.remove(trip);
            }
            
            public void updateTrip(Trip trip) {
                // Update logic here
            }
        }
        EOF
        
    - name: Create app icon
      run: |
        # Create simple app icon (placeholder)
        for size in hdpi mdpi xhdpi xxhdpi xxxhdpi; do
            mkdir -p android/app/src/main/res/mipmap-$size
            cat > android/app/src/main/res/mipmap-$size/ic_launcher.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <adaptive-icon xmlns:android="http://schemas.android.com/apk/res/android">
            <background android:drawable="@color/ic_launcher_background"/>
            <foreground android:drawable="@drawable/ic_launcher_foreground"/>
        </adaptive-icon>
        EOF
        done
        
        # Create launcher colors
        cat > android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="ic_launcher_background">#667eea</color>
        </resources>
        EOF
        
        # Create launcher foreground
        cat > android/app/src/main/res/drawable/ic_launcher_foreground.xml << 'EOF'
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="108dp"
            android:height="108dp"
            android:viewportWidth="108"
            android:viewportHeight="108">
            <path
                android:fillColor="#FFFFFF"
                android:pathData="M54,30c-13.255,0 -24,10.745 -24,24s10.745,24 24,24s24,-10.745 24,-24S67.255,30 54,30zM54,70c-8.837,0 -16,-7.163 -16,-16s7.163,-16 16,-16s16,7.163 16,16S62.837,70 54,70z"/>
        </vector>
        EOF
        
    - name: Make gradlew executable
      run: |
        cat > android/gradlew << 'EOF'
        #!/bin/sh
        
        DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
        APP_NAME="Gradle"
        APP_BASE_NAME=`basename "$0"`
        
        # Resolve links: $0 may be a link
        PRG="$0"
        # Need this for relative symlinks.
        while [ -h "$PRG" ] ; do
            ls=`ls -ld "$PRG"`
            link=`expr "$ls" : '.*-> \(.*\)$'`
            if expr "$link" : '/.*' > /dev/null; then
                PRG="$link"
            else
                PRG=`dirname "$PRG"`"/$link"
            fi
        done
        
        SAVED="`pwd`"
        cd "`dirname \"$PRG\"`/" >/dev/null
        APP_HOME="`pwd -P`"
        cd "$SAVED" >/dev/null
        
        APP_ARGS=`save "$@"`
        
        # Collect all arguments for the java command; same as above.
        # For Darwin, add options to specify how the application appears in the dock
        if [ -f "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" ]; then
            # Get the gradle wrapper if not already present
            if [ ! -f "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" ]; then
                wget -O "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" https://services.gradle.org/distributions/gradle-8.2-bin.zip
            fi
            
            exec java $DEFAULT_JVM_OPTS $JAVA_OPTS -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" "$@"
        else
            echo "Error: Could not find gradle wrapper jar"
            exit 1
        fi
        EOF
        
        chmod +x android/gradlew
        
    - name: Download Gradle Wrapper
      run: |
        cd android
        wget -O gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.2.0/gradle/wrapper/gradle-wrapper.jar
        
    - name: Build APK
      run: |
        cd android
        ./gradlew assembleRelease --no-daemon --stacktrace
        
    - name: List APK files
      run: |
        find android -name "*.apk" -type f -exec ls -la {} \;
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: MileTracker-Pro-PDF-Export-v4.9.125
        path: android/app/build/outputs/apk/release/app-release.apk
        retention-days: 30
