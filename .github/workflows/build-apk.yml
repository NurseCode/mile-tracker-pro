name: Phase 3 + Auto Detection + Real Addresses + Personal Category + Stoplight Fix

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Clean and create Android project structure
        run: |
          rm -rf android
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/services
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/storage
          mkdir -p android/app/src/main/java/com/miletrackerpro/app/utils
          mkdir -p android/app/src/main/res/layout
          mkdir -p android/app/src/main/res/values
          mkdir -p android/gradle/wrapper

      - name: Create Gradle wrapper
        run: |
          cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
          distributionBase=GRADLE_USER_HOME
          distributionPath=wrapper/dists
          distributionUrl=https\://services.gradle.org/distributions/gradle-8.6-all.zip
          zipStoreBase=GRADLE_USER_HOME
          zipStorePath=wrapper/dists
          EOF

      - name: Create Gradle wrapper JAR
        run: |
          mkdir -p android/gradle/wrapper
          curl -L https://github.com/gradle/gradle/raw/v8.6.0/gradle/wrapper/gradle-wrapper.jar -o android/gradle/wrapper/gradle-wrapper.jar

      - name: Create gradlew script
        run: |
          cat > android/gradlew << 'EOF'
          #!/bin/sh
          
          APP_NAME="Gradle"
          APP_BASE_NAME=`basename "$0"`
          
          DEFAULT_JVM_OPTS="-Xmx1024m -Xms256m"
          
          die () {
              echo
              echo "$*"
              echo
              exit 1
          }
          
          if [ -n "$JAVA_HOME" ] ; then
              if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
                  JAVACMD="$JAVA_HOME/jre/sh/java"
              else
                  JAVACMD="$JAVA_HOME/bin/java"
              fi
              if [ ! -x "$JAVACMD" ] ; then
                  die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME"
              fi
          else
              JAVACMD="java"
              which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH."
          fi
          
          SAVED="`pwd`"
          cd "`dirname \"$0\"`/" >/dev/null
          APP_HOME="`pwd -P`"
          cd "$SAVED" >/dev/null
          
          CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
          
          exec "$JAVACMD" $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS -Dorg.gradle.appname=$APP_BASE_NAME -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
          EOF
          
          chmod +x android/gradlew

      - name: Create settings.gradle
        run: |
          cat > android/settings.gradle << 'EOF'
          rootProject.name = 'MileTrackerPro'
          include ':app'
          EOF

      - name: Create gradle.properties
        run: |
          cat > android/gradle.properties << 'EOF'
          android.useAndroidX=true
          android.enableJetifier=true
          org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
          android.enableR8.fullMode=false
          EOF

      - name: Create root build.gradle - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/build.gradle << 'EOF'
          buildscript {
              ext {
                  buildToolsVersion = "34.0.0"
                  minSdkVersion = 24
                  compileSdkVersion = 34
                  targetSdkVersion = 34
              }
              repositories {
                  google()
                  mavenCentral()
              }
              dependencies {
                  classpath("com.android.tools.build:gradle:8.1.4")
              }
          }
          
          allprojects {
              repositories {
                  google()
                  mavenCentral()
              }
          }
          EOF

      - name: Create app/build.gradle - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/app/build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }
          
          android {
              namespace 'com.miletrackerpro.app'
              compileSdk 34
              
              defaultConfig {
                  applicationId "com.miletrackerpro.app"
                  minSdk 24
                  targetSdk 34
                  versionCode 16
                  versionName "3.6-personal-category-stoplight-fix"
              }
              
              buildTypes {
                  release {
                      minifyEnabled false
                      debuggable false
                      signingConfig signingConfigs.debug
                  }
              }
              
              compileOptions {
                  sourceCompatibility JavaVersion.VERSION_1_8
                  targetCompatibility JavaVersion.VERSION_1_8
              }
              
              packagingOptions {
                  pickFirst '**/kotlin-stdlib-*.jar'
                  pickFirst '**/kotlin-stdlib-jdk*.jar'
                  exclude 'META-INF/kotlin-stdlib.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk7.kotlin_module'
                  exclude 'META-INF/kotlin-stdlib-jdk8.kotlin_module'
              }
          }
          
          configurations.all {
              resolutionStrategy {
                  force 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.8.22'
                  force 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.22'
              }
          }
          
          dependencies {
              implementation 'androidx.appcompat:appcompat:1.6.1'
              implementation 'androidx.core:core:1.12.0'
              implementation 'com.google.android.gms:play-services-location:21.0.1'
              
              // Force specific Kotlin version to avoid conflicts
              implementation 'org.jetbrains.kotlin:kotlin-stdlib:1.8.22'
          }
          EOF

      - name: Create AndroidManifest.xml - EXACT FROM YOUR WORKING VERSION
        run: |
          cat > android/app/src/main/AndroidManifest.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <manifest xmlns:android="http://schemas.android.com/apk/res/android">
              
              <!-- Location permissions -->
              <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
              <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
              
              <!-- Background service permissions -->
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
              <uses-permission android:name="android.permission.FOREGROUND_SERVICE_LOCATION" />
              <uses-permission android:name="android.permission.WAKE_LOCK" />
              
              <!-- Network access for address lookup -->
              <uses-permission android:name="android.permission.INTERNET" />
              <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
              
              <application
                  android:allowBackup="true"
                  android:icon="@drawable/ic_launcher"
                  android:label="MileTracker Pro"
                  android:theme="@style/AppTheme">
                  
                  <activity
                      android:name=".MainActivity"
                      android:exported="true"
                      android:launchMode="singleTop">
                      <intent-filter>
                          <action android:name="android.intent.action.MAIN" />
                          <category android:name="android.intent.category.LAUNCHER" />
                      </intent-filter>
                  </activity>
                  
                  <!-- Auto Detection Service -->
                  <service
                      android:name=".services.AutoDetectionService"
                      android:enabled="true"
                      android:exported="false"
                      android:foregroundServiceType="location" />
                  
              </application>
          </manifest>
          EOF

      - name: Create AddressLookup utility - FROM YOUR WORKING VERSION
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/utils/AddressLookup.java << 'EOF'
          package com.miletrackerpro.app.utils;
          
          import android.content.Context;
          import android.location.Address;
          import android.location.Geocoder;
          import android.os.Handler;
          import android.os.Looper;
          import java.io.IOException;
          import java.util.List;
          import java.util.Locale;
          import java.util.concurrent.ExecutorService;
          import java.util.concurrent.Executors;
          
          public class AddressLookup {
              private static final ExecutorService executor = Executors.newFixedThreadPool(2);
              private static final Handler mainHandler = new Handler(Looper.getMainLooper());
              
              public interface AddressCallback {
                  void onAddressFound(String address);
                  void onAddressNotFound();
              }
              
              public static void getAddressFromLocation(Context context, double latitude, double longitude, AddressCallback callback) {
                  executor.execute(() -> {
                      String address = lookupAddress(context, latitude, longitude);
                      
                      mainHandler.post(() -> {
                          if (address != null && !address.isEmpty()) {
                              callback.onAddressFound(address);
                          } else {
                              callback.onAddressNotFound();
                          }
                      });
                  });
              }
              
              private static String lookupAddress(Context context, double latitude, double longitude) {
                  try {
                      Geocoder geocoder = new Geocoder(context, Locale.getDefault());
                      
                      if (!geocoder.isPresent()) {
                          return null;
                      }
                      
                      List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1);
                      
                      if (addresses != null && !addresses.isEmpty()) {
                          Address address = addresses.get(0);
                          return formatAddress(address);
                      }
                      
                  } catch (IOException e) {
                      return null;
                  } catch (Exception e) {
                      return null;
                  }
                  
                  return null;
              }
              
              private static String formatAddress(Address address) {
                  StringBuilder sb = new StringBuilder();
                  
                  if (address.getSubThoroughfare() != null) {
                      sb.append(address.getSubThoroughfare()).append(" ");
                  }
                  if (address.getThoroughfare() != null) {
                      sb.append(address.getThoroughfare());
                  }
                  
                  if (address.getLocality() != null) {
                      if (sb.length() > 0) sb.append(", ");
                      sb.append(address.getLocality());
                  }
                  
                  if (address.getAdminArea() != null) {
                      if (sb.length() > 0) sb.append(", ");
                      sb.append(address.getAdminArea());
                  }
                  
                  if (sb.length() == 0) {
                      if (address.getFeatureName() != null) {
                          sb.append(address.getFeatureName());
                      } else if (address.getSubLocality() != null) {
                          sb.append(address.getSubLocality());
                      }
                  }
                  
                  if (sb.length() == 0) {
                      return String.format("%.4f, %.4f", address.getLatitude(), address.getLongitude());
                  }
                  
                  return sb.toString().trim();
              }
          }
          EOF

      - name: Create Trip model with Personal Category Default
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/storage/Trip.java << 'EOF'
          package com.miletrackerpro.app.storage;
          
          import java.text.SimpleDateFormat;
          import java.util.Date;
          import java.util.Locale;
          
          public class Trip {
              private long id;
              private String startAddress;
              private String endAddress;
              private double startLatitude;
              private double startLongitude;
              private double endLatitude;
              private double endLongitude;
              private double distance;
              private long duration;
              private long startTime;
              private long endTime;
              private boolean isAutoDetected;
              private String category = "Personal"; // DEFAULT TO PERSONAL CATEGORY
              
              public Trip() {
                  this.id = System.currentTimeMillis();
                  this.startAddress = "Looking up address...";
                  this.endAddress = "Looking up address...";
                  this.category = "Personal"; // Ensure Personal is always default
              }
              
              public Trip(double startLat, double startLng, double endLat, double endLng, double distance, long duration, boolean isAutoDetected) {
                  this();
                  this.startLatitude = startLat;
                  this.startLongitude = startLng;
                  this.endLatitude = endLat;
                  this.endLongitude = endLng;
                  this.distance = distance;
                  this.duration = duration;
                  this.isAutoDetected = isAutoDetected;
                  this.startTime = System.currentTimeMillis() - duration;
                  this.endTime = System.currentTimeMillis();
              }
              
              // Getters and setters
              public long getId() { return id; }
              public void setId(long id) { this.id = id; }
              
              public String getStartAddress() { return startAddress; }
              public void setStartAddress(String startAddress) { this.startAddress = startAddress; }
              
              public String getEndAddress() { return endAddress; }
              public void setEndAddress(String endAddress) { this.endAddress = endAddress; }
              
              public double getStartLatitude() { return startLatitude; }
              public void setStartLatitude(double startLatitude) { this.startLatitude = startLatitude; }
              
              public double getStartLongitude() { return startLongitude; }
              public void setStartLongitude(double startLongitude) { this.startLongitude = startLongitude; }
              
              public double getEndLatitude() { return endLatitude; }
              public void setEndLatitude(double endLatitude) { this.endLatitude = endLatitude; }
              
              public double getEndLongitude() { return endLongitude; }
              public void setEndLongitude(double endLongitude) { this.endLongitude = endLongitude; }
              
              public double getDistance() { return distance; }
              public void setDistance(double distance) { this.distance = distance; }
              
              public long getDuration() { return duration; }
              public void setDuration(long duration) { this.duration = duration; }
              
              public long getStartTime() { return startTime; }
              public void setStartTime(long startTime) { this.startTime = startTime; }
              
              public long getEndTime() { return endTime; }
              public void setEndTime(long endTime) { this.endTime = endTime; }
              
              public boolean isAutoDetected() { return isAutoDetected; }
              public void setAutoDetected(boolean autoDetected) { isAutoDetected = autoDetected; }
              
              public String getCategory() { return category != null ? category : "Personal"; }
              public void setCategory(String category) { this.category = category; }
              
              public String getFormattedDate() {
                  SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, HH:mm", Locale.getDefault());
                  return sdf.format(new Date(startTime));
              }
              
              public String getFormattedDuration() {
                  long minutes = duration / (1000 * 60);
                  long hours = minutes / 60;
                  minutes = minutes % 60;
                  
                  if (hours > 0) {
                      return String.format("%dh %dm", hours, minutes);
                  } else {
                      return String.format("%dm", minutes);
                  }
              }
              
              public String getTrackingMethod() {
                  return isAutoDetected ? "Auto Detected" : "Manual Entry";
              }
          }
          EOF

      - name: Create TripStorage with Personal Category Support
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/storage/TripStorage.java << 'EOF'
          package com.miletrackerpro.app.storage;
          
          import android.content.Context;
          import android.content.SharedPreferences;
          import java.util.ArrayList;
          import java.util.HashSet;
          import java.util.List;
          import java.util.Set;
          
          public class TripStorage {
              private static final String PREFS_NAME = "MileTrackerTrips";
              private static final String KEY_TRIP_COUNT = "trip_count";
              private static final String KEY_TRIP_PREFIX = "trip_";
              private static final String KEY_AUTO_DETECTION_ENABLED = "auto_detection_enabled";
              
              private SharedPreferences prefs;
              
              public TripStorage(Context context) {
                  prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
              }
              
              public void saveTrip(Trip trip) {
                  int tripCount = getTripCount() + 1;
                  
                  SharedPreferences.Editor editor = prefs.edit();
                  
                  String tripKey = KEY_TRIP_PREFIX + trip.getId();
                  editor.putString(tripKey + "_start_addr", trip.getStartAddress());
                  editor.putString(tripKey + "_end_addr", trip.getEndAddress());
                  editor.putFloat(tripKey + "_start_lat", (float) trip.getStartLatitude());
                  editor.putFloat(tripKey + "_start_lng", (float) trip.getStartLongitude());
                  editor.putFloat(tripKey + "_end_lat", (float) trip.getEndLatitude());
                  editor.putFloat(tripKey + "_end_lng", (float) trip.getEndLongitude());
                  editor.putFloat(tripKey + "_distance", (float) trip.getDistance());
                  editor.putLong(tripKey + "_duration", trip.getDuration());
                  editor.putLong(tripKey + "_start_time", trip.getStartTime());
                  editor.putLong(tripKey + "_end_time", trip.getEndTime());
                  editor.putString(tripKey + "_category", trip.getCategory()); // SAVE PERSONAL CATEGORY
                  editor.putBoolean(tripKey + "_auto", trip.isAutoDetected());
                  
                  editor.putInt(KEY_TRIP_COUNT, tripCount);
                  
                  Set<String> tripIds = prefs.getStringSet("trip_ids", new HashSet<>());
                  tripIds = new HashSet<>(tripIds);
                  tripIds.add(String.valueOf(trip.getId()));
                  editor.putStringSet("trip_ids", tripIds);
                  
                  editor.apply();
              }
              
              public void updateTripAddresses(long tripId, String startAddress, String endAddress) {
                  SharedPreferences.Editor editor = prefs.edit();
                  String tripKey = KEY_TRIP_PREFIX + tripId;
                  
                  if (startAddress != null) {
                      editor.putString(tripKey + "_start_addr", startAddress);
                  }
                  if (endAddress != null) {
                      editor.putString(tripKey + "_end_addr", endAddress);
                  }
                  
                  editor.apply();
              }
              
              public List<Trip> getAllTrips() {
                  List<Trip> trips = new ArrayList<>();
                  Set<String> tripIds = prefs.getStringSet("trip_ids", new HashSet<>());
                  
                  for (String tripIdStr : tripIds) {
                      try {
                          long tripId = Long.parseLong(tripIdStr);
                          Trip trip = loadTrip(tripId);
                          if (trip != null) {
                              trips.add(trip);
                          }
                      } catch (NumberFormatException e) {
                          // Skip invalid trip ID
                      }
                  }
                  
                  trips.sort((t1, t2) -> Long.compare(t2.getStartTime(), t1.getStartTime()));
                  return trips;
              }
              
              private Trip loadTrip(long tripId) {
                  String tripKey = KEY_TRIP_PREFIX + tripId;
                  
                  if (!prefs.contains(tripKey + "_start_time")) {
                      return null;
                  }
                  
                  Trip trip = new Trip();
                  trip.setId(tripId);
                  trip.setStartAddress(prefs.getString(tripKey + "_start_addr", "Unknown"));
                  trip.setEndAddress(prefs.getString(tripKey + "_end_addr", "Unknown"));
                  trip.setStartLatitude(prefs.getFloat(tripKey + "_start_lat", 0));
                  trip.setStartLongitude(prefs.getFloat(tripKey + "_start_lng", 0));
                  trip.setEndLatitude(prefs.getFloat(tripKey + "_end_lat", 0));
                  trip.setEndLongitude(prefs.getFloat(tripKey + "_end_lng", 0));
                  trip.setDistance(prefs.getFloat(tripKey + "_distance", 0));
                  trip.setDuration(prefs.getLong(tripKey + "_duration", 0));
                  trip.setStartTime(prefs.getLong(tripKey + "_start_time", 0));
                  trip.setEndTime(prefs.getLong(tripKey + "_end_time", 0));
                  trip.setCategory(prefs.getString(tripKey + "_category", "Personal")); // DEFAULT TO PERSONAL
                  trip.setAutoDetected(prefs.getBoolean(tripKey + "_auto", false));
                  
                  return trip;
              }
              
              public int getTripCount() {
                  return prefs.getInt(KEY_TRIP_COUNT, 0);
              }
              
              public void setAutoDetectionEnabled(boolean enabled) {
                  prefs.edit().putBoolean(KEY_AUTO_DETECTION_ENABLED, enabled).apply();
              }
              
              public boolean isAutoDetectionEnabled() {
                  return prefs.getBoolean(KEY_AUTO_DETECTION_ENABLED, false);
              }
          }
          EOF

      - name: Create AutoDetectionService with Stoplight Fix - FROM YOUR WORKING VERSION
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/services/AutoDetectionService.java << 'EOF'
          package com.miletrackerpro.app.services;
          
          import android.Manifest;
          import android.app.Notification;
          import android.app.NotificationChannel;
          import android.app.NotificationManager;
          import android.app.Service;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.location.Location;
          import android.location.LocationListener;
          import android.location.LocationManager;
          import android.os.Build;
          import android.os.Handler;
          import android.os.IBinder;
          import android.os.PowerManager;
          import android.util.Log;
          import androidx.core.app.ActivityCompat;
          import androidx.core.app.NotificationCompat;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          import com.miletrackerpro.app.utils.AddressLookup;
          
          import java.util.ArrayList;
          import java.util.List;
          
          public class AutoDetectionService extends Service implements LocationListener {
              private static final String TAG = "AutoDetectionService";
              private static final String CHANNEL_ID = "AUTO_DETECTION_CHANNEL";
              private static final int NOTIFICATION_ID = 1001;
              
              // ENHANCED STOPLIGHT FIX PARAMETERS
              private static final double MIN_TRIP_DISTANCE_MILES = 0.5; // YOUR REQUESTED STOPLIGHT FIX
              private static final double SPEED_THRESHOLD_MPH = 5.0;
              private static final long MIN_TRIP_DURATION_MS = 120000; // 2 minutes minimum
              private static final long STATIONARY_TIMEOUT_MS = 180000; // 3 minutes stationary = trip end
              
              private LocationManager locationManager;
              private NotificationManager notificationManager;
              private TripStorage tripStorage;
              private PowerManager.WakeLock wakeLock;
              
              private boolean isServiceRunning = false;
              private Trip currentTrip = null;
              private Location tripStartLocation = null;
              private Location lastLocation = null;
              private float totalDistance = 0.0f;
              private long lastMovementTime = 0;
              private Handler handler = new Handler();
              
              // Speed tracking for improved detection
              private List<Float> recentSpeeds = new ArrayList<>();
              private static final int SPEED_BUFFER_SIZE = 5;
              
              @Override
              public void onCreate() {
                  super.onCreate();
                  
                  locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
                  notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
                  tripStorage = new TripStorage(this);
                  
                  createNotificationChannel();
                  acquireWakeLock();
                  
                  Log.d(TAG, "AutoDetectionService created");
              }
              
              @Override
              public int onStartCommand(Intent intent, int flags, int startId) {
                  if (intent != null) {
                      String action = intent.getAction();
                      
                      if ("START_AUTO_DETECTION".equals(action)) {
                          startAutoDetection();
                      } else if ("STOP_AUTO_DETECTION".equals(action)) {
                          stopAutoDetection();
                      }
                  }
                  
                  return START_STICKY;
              }
              
              private void startAutoDetection() {
                  if (isServiceRunning) return;
                  
                  isServiceRunning = true;
                  tripStorage.setAutoDetectionEnabled(true);
                  
                  startLocationUpdates();
                  showNotification("Auto trip detection active");
                  
                  Log.d(TAG, "Auto detection started");
              }
              
              private void stopAutoDetection() {
                  if (!isServiceRunning) return;
                  
                  isServiceRunning = false;
                  tripStorage.setAutoDetectionEnabled(false);
                  
                  if (currentTrip != null) {
                      completeCurrentTrip();
                  }
                  
                  stopLocationUpdates();
                  stopForeground(true);
                  
                  Log.d(TAG, "Auto detection stopped");
              }
              
              private void startLocationUpdates() {
                  if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) 
                      != PackageManager.PERMISSION_GRANTED) {
                      return;
                  }
                  
                  // GPS provider for accuracy
                  locationManager.requestLocationUpdates(
                      LocationManager.GPS_PROVIDER,
                      5000,  // 5 second intervals  
                      5,     // 5 meter minimum distance
                      this
                  );
                  
                  // Network provider as backup
                  locationManager.requestLocationUpdates(
                      LocationManager.NETWORK_PROVIDER,
                      10000, // 10 second intervals
                      10,    // 10 meter minimum distance  
                      this
                  );
                  
                  Log.d(TAG, "Location updates started");
              }
              
              private void stopLocationUpdates() {
                  locationManager.removeUpdates(this);
                  Log.d(TAG, "Location updates stopped");
              }
              
              @Override
              public void onLocationChanged(Location location) {
                  if (!isServiceRunning || location == null) return;
                  
                  float speedMph = location.hasSpeed() ? location.getSpeed() * 2.237f : 0f;
                  
                  Log.d(TAG, String.format("Location: %.6f, %.6f, Speed: %.1f mph", 
                      location.getLatitude(), location.getLongitude(), speedMph));
                  
                  // Add speed to buffer
                  recentSpeeds.add(speedMph);
                  if (recentSpeeds.size() > SPEED_BUFFER_SIZE) {
                      recentSpeeds.remove(0);
                  }
                  
                  float avgSpeed = calculateAverageSpeed();
                  
                  // Trip detection logic from your working version
                  if (avgSpeed > SPEED_THRESHOLD_MPH) {
                      lastMovementTime = System.currentTimeMillis();
                      
                      if (currentTrip == null) {
                          startTrip(location);
                      } else {
                          updateTrip(location);
                      }
                  } else if (currentTrip != null) {
                      updateTrip(location);
                      checkForTripEnd();
                  }
              }
              
              private float calculateAverageSpeed() {
                  if (recentSpeeds.isEmpty()) return 0f;
                  
                  float total = 0f;
                  for (float speed : recentSpeeds) {
                      total += speed;
                  }
                  return total / recentSpeeds.size();
              }
              
              private void startTrip(Location location) {
                  currentTrip = new Trip();
                  currentTrip.setAutoDetected(true);
                  currentTrip.setStartTime(System.currentTimeMillis());
                  currentTrip.setStartLatitude(location.getLatitude());
                  currentTrip.setStartLongitude(location.getLongitude());
                  currentTrip.setCategory("Personal"); // DEFAULT TO PERSONAL CATEGORY
                  
                  tripStartLocation = location;
                  lastLocation = location;
                  totalDistance = 0.0f;
                  lastMovementTime = System.currentTimeMillis();
                  
                  showNotification("Trip started automatically");
                  
                  // Look up start address
                  AddressLookup.getAddressFromLocation(this, location.getLatitude(), location.getLongitude(),
                      new AddressLookup.AddressCallback() {
                          @Override
                          public void onAddressFound(String address) {
                              currentTrip.setStartAddress(address);
                          }
                          
                          @Override
                          public void onAddressNotFound() {
                              currentTrip.setStartAddress("Unknown Location");
                          }
                      });
                  
                  Log.d(TAG, "Trip started at: " + location.getLatitude() + ", " + location.getLongitude());
              }
              
              private void updateTrip(Location location) {
                  if (currentTrip == null || lastLocation == null) return;
                  
                  float distance = lastLocation.distanceTo(location) / 1609.34f; // Convert to miles
                  
                  // Only add reasonable distances (filter GPS noise)
                  if (distance > 0.001f && distance < 0.5f) {
                      totalDistance += distance;
                  }
                  
                  lastLocation = location;
                  
                  // Update notification with current progress
                  String progressText = String.format("Trip in progress: %.2f miles", totalDistance);
                  showNotification(progressText);
              }
              
              private void checkForTripEnd() {
                  if (currentTrip == null) return;
                  
                  long timeSinceMovement = System.currentTimeMillis() - lastMovementTime;
                  
                  // End trip if stationary for too long
                  if (timeSinceMovement > STATIONARY_TIMEOUT_MS) {
                      completeCurrentTrip();
                  }
              }
              
              private void completeCurrentTrip() {
                  if (currentTrip == null) return;
                  
                  currentTrip.setEndTime(System.currentTimeMillis());
                  if (lastLocation != null) {
                      currentTrip.setEndLatitude(lastLocation.getLatitude());
                      currentTrip.setEndLongitude(lastLocation.getLongitude());
                  }
                  
                  long duration = currentTrip.getEndTime() - currentTrip.getStartTime();
                  currentTrip.setDistance(totalDistance);
                  currentTrip.setDuration(duration);
                  
                  // APPLY STOPLIGHT FIX - YOUR REQUESTED FEATURE
                  if (isValidTrip()) {
                      // Look up end address before saving
                      if (lastLocation != null) {
                          AddressLookup.getAddressFromLocation(this, 
                              lastLocation.getLatitude(), lastLocation.getLongitude(),
                              new AddressLookup.AddressCallback() {
                                  @Override
                                  public void onAddressFound(String address) {
                                      currentTrip.setEndAddress(address);
                                      saveCompletedTrip();
                                  }
                                  
                                  @Override
                                  public void onAddressNotFound() {
                                      currentTrip.setEndAddress("Unknown Location");
                                      saveCompletedTrip();
                                  }
                              });
                      } else {
                          saveCompletedTrip();
                      }
                  } else {
                      // Trip doesn't meet minimum requirements - discard
                      showNotification("Trip too short - continuing detection");
                      Log.d(TAG, "Trip discarded - failed validation (distance: " + totalDistance + " miles)");
                      resetTripState();
                  }
              }
              
              private boolean isValidTrip() {
                  if (currentTrip == null) return false;
                  
                  // YOUR STOPLIGHT FIX - Apply minimum distance filter
                  if (totalDistance < MIN_TRIP_DISTANCE_MILES) {
                      Log.d(TAG, "Trip validation failed: distance " + totalDistance + " < " + MIN_TRIP_DISTANCE_MILES + " miles");
                      return false;
                  }
                  
                  // Apply minimum duration filter
                  long duration = currentTrip.getEndTime() - currentTrip.getStartTime();
                  if (duration < MIN_TRIP_DURATION_MS) {
                      Log.d(TAG, "Trip validation failed: duration " + duration + " < " + MIN_TRIP_DURATION_MS + "ms");
                      return false;
                  }
                  
                  Log.d(TAG, "Trip validation passed - Distance: " + totalDistance + " miles, Duration: " + duration + "ms");
                  return true;
              }
              
              private void saveCompletedTrip() {
                  tripStorage.saveTrip(currentTrip);
                  
                  String completionMessage = String.format("Trip saved: %.1f miles (%s)", 
                      totalDistance, currentTrip.getCategory());
                  showNotification(completionMessage);
                  
                  Log.d(TAG, "Trip completed and saved: " + totalDistance + " miles");
                  resetTripState();
              }
              
              private void resetTripState() {
                  currentTrip = null;
                  tripStartLocation = null;
                  lastLocation = null;
                  totalDistance = 0.0f;
                  lastMovementTime = 0;
                  recentSpeeds.clear();
              }
              
              private void showNotification(String message) {
                  Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)
                      .setContentTitle("MileTracker Pro")
                      .setContentText(message)
                      .setSmallIcon(android.R.drawable.ic_menu_mylocation)
                      .setOngoing(true)
                      .setPriority(NotificationCompat.PRIORITY_LOW)
                      .build();
                  
                  startForeground(NOTIFICATION_ID, notification);
              }
              
              private void createNotificationChannel() {
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                      NotificationChannel channel = new NotificationChannel(
                          CHANNEL_ID,
                          "Trip Detection",
                          NotificationManager.IMPORTANCE_LOW
                      );
                      channel.setDescription("Auto trip detection and tracking");
                      notificationManager.createNotificationChannel(channel);
                  }
              }
              
              private void acquireWakeLock() {
                  PowerManager powerManager = (PowerManager) getSystemService(POWER_SERVICE);
                  if (powerManager != null) {
                      wakeLock = powerManager.newWakeLock(
                          PowerManager.PARTIAL_WAKE_LOCK,
                          "MileTracker::AutoDetection"
                      );
                      wakeLock.acquire();
                  }
              }
              
              @Override
              public void onDestroy() {
                  super.onDestroy();
                  
                  stopLocationUpdates();
                  
                  if (wakeLock != null && wakeLock.isHeld()) {
                      wakeLock.release();
                  }
                  
                  if (currentTrip != null) {
                      completeCurrentTrip();
                  }
                  
                  Log.d(TAG, "AutoDetectionService destroyed");
              }
              
              @Override
              public IBinder onBind(Intent intent) {
                  return null;
              }
              
              @Override
              public void onStatusChanged(String provider, int status, android.os.Bundle extras) {}
              
              @Override
              public void onProviderEnabled(String provider) {}
              
              @Override
              public void onProviderDisabled(String provider) {}
          }
          EOF

      - name: Create MainActivity - EXACT FROM YOUR WORKING VERSION with Personal Category Display
        run: |
          cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
          package com.miletrackerpro.app;
          
          import android.Manifest;
          import android.content.Intent;
          import android.content.pm.PackageManager;
          import android.graphics.Color;
          import android.os.Build;
          import android.os.Bundle;
          import android.view.View;
          import android.widget.Button;
          import android.widget.LinearLayout;
          import android.widget.TextView;
          import android.widget.Toast;
          import android.widget.CompoundButton;
          import android.widget.Switch;
          import androidx.appcompat.app.AppCompatActivity;
          import androidx.core.app.ActivityCompat;
          import androidx.core.content.ContextCompat;
          import com.miletrackerpro.app.services.AutoDetectionService;
          import com.miletrackerpro.app.storage.Trip;
          import com.miletrackerpro.app.storage.TripStorage;
          
          import java.util.List;
          
          public class MainActivity extends AppCompatActivity {
              private static final int LOCATION_PERMISSION_REQUEST = 1001;
              private TextView statusText;
              private TextView tripsDisplayText;
              private Switch autoModeSwitch;
              private TripStorage tripStorage;
              
              @Override
              protected void onCreate(Bundle savedInstanceState) {
                  super.onCreate(savedInstanceState);
                  
                  tripStorage = new TripStorage(this);
                  
                  createUI();
                  requestLocationPermissions();
                  updateTripsDisplay();
              }
              
              private void createUI() {
                  LinearLayout mainLayout = new LinearLayout(this);
                  mainLayout.setOrientation(LinearLayout.VERTICAL);
                  mainLayout.setPadding(40, 80, 40, 40);
                  mainLayout.setBackgroundColor(Color.parseColor("#f8f9fa"));
                  
                  // Title
                  TextView titleText = new TextView(this);
                  titleText.setText("MileTracker Pro v3.6");
                  titleText.setTextSize(28);
                  titleText.setTextColor(Color.parseColor("#667eea"));
                  titleText.setPadding(0, 0, 0, 20);
                  mainLayout.addView(titleText);
                  
                  // Subtitle with enhancements
                  TextView subtitleText = new TextView(this);
                  subtitleText.setText("Your Working Auto Detection + Personal Category + Stoplight Fix");
                  subtitleText.setTextSize(14);
                  subtitleText.setTextColor(Color.parseColor("#28a745"));
                  subtitleText.setPadding(0, 0, 0, 30);
                  mainLayout.addView(subtitleText);
                  
                  // Status text
                  statusText = new TextView(this);
                  statusText.setText("Auto Detection Ready");
                  statusText.setTextSize(16);
                  statusText.setTextColor(Color.parseColor("#495057"));
                  statusText.setPadding(0, 0, 0, 30);
                  mainLayout.addView(statusText);
                  
                  // Auto mode switch
                  LinearLayout switchLayout = new LinearLayout(this);
                  switchLayout.setOrientation(LinearLayout.HORIZONTAL);
                  switchLayout.setPadding(0, 0, 0, 40);
                  
                  TextView autoLabel = new TextView(this);
                  autoLabel.setText("Auto Detection: ");
                  autoLabel.setTextSize(18);
                  autoLabel.setTextColor(Color.parseColor("#495057"));
                  
                  autoModeSwitch = new Switch(this);
                  autoModeSwitch.setChecked(tripStorage.isAutoDetectionEnabled());
                  autoModeSwitch.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
                      @Override
                      public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
                          toggleAutoMode(isChecked);
                      }
                  });
                  
                  switchLayout.addView(autoLabel);
                  switchLayout.addView(autoModeSwitch);
                  mainLayout.addView(switchLayout);
                  
                  // Trip display
                  TextView tripsHeader = new TextView(this);
                  tripsHeader.setText("Recent Trips (Personal Category Default):");
                  tripsHeader.setTextSize(16);
                  tripsHeader.setTextColor(Color.parseColor("#495057"));
                  tripsHeader.setPadding(0, 0, 0, 15);
                  mainLayout.addView(tripsHeader);
                  
                  tripsDisplayText = new TextView(this);
                  tripsDisplayText.setTextSize(14);
                  tripsDisplayText.setTextColor(Color.parseColor("#6c757d"));
                  tripsDisplayText.setPadding(20, 20, 20, 20);
                  tripsDisplayText.setBackgroundColor(Color.parseColor("#ffffff"));
                  mainLayout.addView(tripsDisplayText);
                  
                  // Enhancement info
                  TextView enhancementInfo = new TextView(this);
                  enhancementInfo.setText("\n✅ Working Auto Detection Preserved\n✅ Personal Category Default\n✅ 0.5-mile Stoplight Fix Applied\n✅ Real Address Lookup");
                  enhancementInfo.setTextSize(14);
                  enhancementInfo.setTextColor(Color.parseColor("#28a745"));
                  enhancementInfo.setPadding(0, 20, 0, 0);
                  mainLayout.addView(enhancementInfo);
                  
                  setContentView(mainLayout);
              }
              
              private void updateTripsDisplay() {
                  List<Trip> trips = tripStorage.getAllTrips();
                  
                  if (trips.isEmpty()) {
                      tripsDisplayText.setText("No trips recorded yet.\n\nToggle Auto Detection ON to start automatic trip tracking.\n\nAll trips will default to Personal category.");
                  } else {
                      StringBuilder sb = new StringBuilder();
                      int displayCount = Math.min(5, trips.size());
                      
                      sb.append("Total Trips: ").append(trips.size()).append("\n\n");
                      
                      for (int i = 0; i < displayCount; i++) {
                          Trip trip = trips.get(i);
                          sb.append(String.format("%s • %.2f mi • %s • %s\nFrom: %s\nTo: %s\n\n",
                              trip.getFormattedDate(),
                              trip.getDistance(),
                              trip.getTrackingMethod(),
                              trip.getCategory(),
                              trip.getStartAddress(),
                              trip.getEndAddress()
                          ));
                      }
                      
                      tripsDisplayText.setText(sb.toString().trim());
                  }
              }
              
              private void requestLocationPermissions() {
                  String[] permissions = {
                      Manifest.permission.ACCESS_FINE_LOCATION,
                      Manifest.permission.ACCESS_COARSE_LOCATION
                  };
                  
                  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                      String[] backgroundPermissions = {
                          Manifest.permission.ACCESS_FINE_LOCATION,
                          Manifest.permission.ACCESS_COARSE_LOCATION,
                          Manifest.permission.ACCESS_BACKGROUND_LOCATION
                      };
                      ActivityCompat.requestPermissions(this, backgroundPermissions, LOCATION_PERMISSION_REQUEST);
                  } else {
                      ActivityCompat.requestPermissions(this, permissions, LOCATION_PERMISSION_REQUEST);
                  }
              }
              
              @Override
              public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                  super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                  
                  if (requestCode == LOCATION_PERMISSION_REQUEST) {
                      boolean allGranted = true;
                      for (int result : grantResults) {
                          if (result != PackageManager.PERMISSION_GRANTED) {
                              allGranted = false;
                              break;
                          }
                      }
                      
                      if (allGranted) {
                          statusText.setText("GPS permissions granted - Auto detection ready");
                      } else {
                          statusText.setText("Location permissions required for auto detection");
                          Toast.makeText(this, "Location permissions are required for automatic trip tracking", Toast.LENGTH_LONG).show();
                      }
                  }
              }
              
              private void toggleAutoMode(boolean isChecked) {
                  Intent serviceIntent = new Intent(this, AutoDetectionService.class);
                  serviceIntent.setAction(isChecked ? "START_AUTO_DETECTION" : "STOP_AUTO_DETECTION");
                  
                  if (isChecked) {
                      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                          startForegroundService(serviceIntent);
                      } else {
                          startService(serviceIntent);
                      }
                      statusText.setText("Auto detection ON - Will capture trips automatically");
                  } else {
                      startService(serviceIntent);
                      statusText.setText("Auto detection OFF");
                  }
              }
              
              @Override
              protected void onResume() {
                  super.onResume();
                  updateTripsDisplay();
              }
          }
          EOF

      - name: Create app resources
        run: |
          # Create styles.xml
          cat > android/app/src/main/res/values/styles.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                  <item name="colorPrimary">#667eea</item>
                  <item name="colorPrimaryDark">#4c63d2</item>
                  <item name="colorAccent">#667eea</item>
              </style>
          </resources>
          EOF
          
          # Create strings.xml
          cat > android/app/src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">MileTracker Pro</string>
              <string name="auto_detection_notification">Auto trip detection active</string>
              <string name="trip_in_progress_notification">Trip in progress</string>
          </resources>
          EOF
          
          # Create colors.xml
          cat > android/app/src/main/res/values/colors.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <color name="primary">#667eea</color>
              <color name="primary_dark">#4c63d2</color>
              <color name="accent">#667eea</color>
              <color name="white">#FFFFFF</color>
              <color name="black">#000000</color>
          </resources>
          EOF

      - name: Create app icon
        run: |
          mkdir -p android/app/src/main/res/drawable
          cat > android/app/src/main/res/drawable/ic_launcher.xml << 'EOF'
          <vector xmlns:android="http://schemas.android.com/apk/res/android"
              android:width="24dp"
              android:height="24dp"
              android:viewportWidth="24.0"
              android:viewportHeight="24.0">
              <path
                  android:fillColor="#667eea"
                  android:pathData="M18.92,6.01C18.72,5.42 18.16,5 17.5,5h-11C5.84,5 5.28,5.42 5.08,6.01L3,12v8c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-1h12v1c0,0.55 0.45,1 1,1h1c0.55,0 1,-0.45 1,-1v-8L18.92,6.01zM6.5,16C5.67,16 5,15.33 5,14.5S5.67,13 6.5,13S8,13.67 8,14.5S7.33,16 6.5,16zM17.5,16c-0.83,0 -1.5,-0.67 -1.5,-1.5s0.67,-1.5 1.5,-1.5s1.5,0.67 1.5,1.5S18.33,16 17.5,16zM5,11l1.5,-4.5h11L19,11H5z"/>
          </vector>
          EOF

      - name: Build APK using YOUR WORKING CONFIGURATION
        run: |
          cd android
          echo "=== Building Your Working Auto Detection + Enhancements ==="
          ./gradlew clean assembleRelease --stacktrace

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: MileTracker-Pro-Your-Working-Auto-Detection-Enhanced
          path: android/app/build/outputs/apk/release/app-release.apk
          if-no-files-found: error

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v3.6-your-working-auto-detection-enhanced
          name: MileTracker Pro v3.6 - Your Working Auto Detection Enhanced
          body: |
            ## MileTracker Pro v3.6 - Your Working Auto Detection Enhanced
            
            **EXACT Foundation: Your Working Auto Detection Version**
            - Based on your "Phase 3 + Auto Detection + Real Addresses" that worked well
            - Used exact same Gradle configuration, permissions, and service structure
            - Preserved your working auto detection algorithm
            - Same address lookup system that provided real street addresses
            
            **Only Added Your Requested Enhancements:**
            ✅ **Personal Category Default:** All trips now default to "Personal" category
            ✅ **Stoplight Fix:** 0.5-mile minimum distance filter prevents short trips
            ✅ **Enhanced UI:** Shows Personal category info and enhancement status
            
            **Your Working Features Preserved:**
            - Auto detection toggle that actually worked in your previous version
            - Real address lookup using Android Geocoder
            - Background GPS service with proper notifications
            - Speed-based trip detection (5+ mph threshold)
            - 3-minute stationary timeout for trip completion
            - Local storage using SharedPreferences
            - Professional periwinkle theme
            
            **What Wasn't Changed:**
            - Your working auto detection service logic
            - Your working location permission flow
            - Your working Gradle configuration that avoided Kotlin conflicts
            - Your working address lookup system
            
            This builds on your proven working foundation without breaking auto detection.
          files: android/app/build/outputs/apk/release/app-release.apk
