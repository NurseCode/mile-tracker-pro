name: Build Android APK
on:
  workflow_dispatch:
    inputs:
      version_code:
        description: 'Version code (auto-incremented if not provided)'
        required: false
        type: string
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours
  push:
    paths:
      - '.github/workflows/build-apk.yml'
      - 'android/**'
      - 'src/**'
      - 'App.js'
      - 'package.json'
      - '*.yml'
      - '*.java'
      - '*.kt'
      - '*.xml'
      - '*.gradle'
      - '*.properties'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: npm install

    - name: Clean previous builds
      run: rm -rf android

    - name: Create Android project structure
      run: |
        mkdir -p android/app/src/main/java/com/miletrackerpro/app
        mkdir -p android/app/src/main/res/values
        mkdir -p android/app/src/main/res/drawable
        mkdir -p android/app/src/main/res/raw
        mkdir -p android/app/src/main/res/xml
        mkdir -p android/services
        mkdir -p android/storage
        mkdir -p android/utils
        mkdir -p android/gradle/wrapper

    - name: Create MainActivity.java
      run: |
        cat > android/app/src/main/java/com/miletrackerpro/app/MainActivity.java << 'EOF'
        package com.miletrackerpro.app;

        import android.Manifest;
        import android.app.AlertDialog;
        import android.app.DatePickerDialog;
        import android.content.Context;
        import android.content.Intent;
        import android.content.SharedPreferences;
        import android.content.pm.PackageManager;
        import android.location.Location;
        import android.location.LocationListener;
        import android.location.LocationManager;
        import android.net.Uri;
        import android.os.Bundle;
        import android.os.Handler;
        import android.os.Looper;
        import android.util.Log;
        import android.view.View;
        import android.widget.ArrayAdapter;
        import android.widget.Button;
        import android.widget.CheckBox;
        import android.widget.LinearLayout;
        import android.widget.ScrollView;
        import android.widget.Spinner;
        import android.widget.TextView;
        import android.widget.Toast;
        import androidx.appcompat.app.AppCompatActivity;
        import androidx.core.app.ActivityCompat;
        import androidx.core.content.ContextCompat;
        import androidx.core.content.FileProvider;
        import java.io.File;
        import java.io.FileOutputStream;
        import java.io.FileWriter;
        import java.io.IOException;
        import java.text.SimpleDateFormat;
        import java.util.ArrayList;
        import java.util.Arrays;
        import java.util.Calendar;
        import java.util.Date;
        import java.util.List;
        import java.util.Locale;
        import java.util.concurrent.TimeUnit;

        // iText 7 imports for PDF generation
        import com.itextpdf.kernel.pdf.PdfDocument;
        import com.itextpdf.kernel.pdf.PdfWriter;
        import com.itextpdf.layout.Document;
        import com.itextpdf.layout.element.Paragraph;
        import com.itextpdf.layout.element.Table;
        import com.itextpdf.layout.element.Cell;
        import com.itextpdf.layout.properties.TextAlignment;
        import java.io.ByteArrayOutputStream;

        public class MainActivity extends AppCompatActivity implements LocationListener {
            private static final String TAG = "MileTracker";
            private static final int PERMISSION_REQUEST_CODE = 1;
            private static final long LOCATION_UPDATE_INTERVAL = 5000; // 5 seconds
            private static final float DRIVING_SPEED_THRESHOLD = 4.6f; // mph (matches MileIQ exactly)
            private static final float STATIONARY_SPEED_THRESHOLD = 2.0f; // mph (matches MileIQ exactly)
            private static final long STATIONARY_TIMEOUT = 300000; // 5 minutes
            private static final long TRIP_EXTENSION_TIMEOUT = 120000; // 2 minutes for trip extension

            // UI Elements
            private Button startButton, stopButton, autoToggle, refreshButton, mergeButton, exportButton;
            private TextView statusText, locationText, statsText, speedText, distanceText;
            private ScrollView recentTripsScrollView;
            private LinearLayout recentTripsLayout;
            private LinearLayout tab1Layout, tab2Layout, tab3Layout;
            private Button tab1Button, tab2Button, tab3Button;
            private int currentTab = 1;
            private boolean isMergeMode = false;
            private List<CheckBox> mergeCheckboxes = new ArrayList<>();

            // Location and trip management
            private LocationManager locationManager;
            private TripStorage tripStorage;
            private GPSService gpsService;
            private boolean isTracking = false;
            private boolean isAutoDetectionEnabled = false;
            private Handler blinkHandler = new Handler(Looper.getMainLooper());
            private Runnable blinkRunnable;
            private boolean isBlinking = false;
            private float currentDistanceInMiles = 0.0f;

            // Current trip data
            private Trip currentTrip;
            private Location lastKnownLocation;
            private long lastLocationUpdateTime = 0;
            private long lastMovementTime = 0;
            private Handler stationaryHandler = new Handler(Looper.getMainLooper());
            private Runnable stationaryRunnable;
            private Handler extensionHandler = new Handler(Looper.getMainLooper());
            private Runnable extensionRunnable;
            private boolean awaitingExtensionDecision = false;

            // Settings
            private SharedPreferences settings;
            private double businessRate = 0.70;
            private double medicalRate = 0.21;
            private double charityRate = 0.14;

            @Override
            protected void onCreate(Bundle savedInstanceState) {
                super.onCreate(savedInstanceState);
                Log.d(TAG, "🚀 MileTracker Pro v4.9.126 - Starting...");
                
                // Initialize storage and settings
                tripStorage = new TripStorage(this);
                settings = getSharedPreferences("MileTrackerSettings", Context.MODE_PRIVATE);
                loadSettings();
                
                // Initialize GPS service
                gpsService = new GPSService(this);
                gpsService.initialize();
                
                // Initialize location manager
                locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
                
                // Create UI
                createUI();
                
                // Check permissions
                checkPermissions();
                
                // Update UI
                updateUI();
                updateStats();
                updateRecentTrips();
                
                Log.d(TAG, "✅ MileTracker Pro initialized successfully");
            }

            private void createUI() {
                LinearLayout mainLayout = new LinearLayout(this);
                mainLayout.setOrientation(LinearLayout.VERTICAL);
                mainLayout.setPadding(20, 20, 20, 20);
                
                // Header
                TextView header = new TextView(this);
                header.setText("MileTracker Pro");
                header.setTextSize(24);
                header.setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
                header.setPadding(0, 0, 0, 20);
                mainLayout.addView(header);
                
                // Tab buttons
                LinearLayout tabLayout = new LinearLayout(this);
                tabLayout.setOrientation(LinearLayout.HORIZONTAL);
                tabLayout.setPadding(0, 0, 0, 20);
                
                tab1Button = new Button(this);
                tab1Button.setText("🏠\nHome");
                tab1Button.setTextSize(12);
                tab1Button.setOnClickListener(v -> switchToTab(1));
                
                tab2Button = new Button(this);
                tab2Button.setText("📋\nSort Trips");
                tab2Button.setTextSize(12);
                tab2Button.setOnClickListener(v -> switchToTab(2));
                
                tab3Button = new Button(this);
                tab3Button.setText("📁\nFiled Trips");
                tab3Button.setTextSize(12);
                tab3Button.setOnClickListener(v -> switchToTab(3));
                
                // Set equal weights for uniform sizing
                LinearLayout.LayoutParams tabParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
                tab1Button.setLayoutParams(tabParams);
                tab2Button.setLayoutParams(tabParams);
                tab3Button.setLayoutParams(tabParams);
                
                tabLayout.addView(tab1Button);
                tabLayout.addView(tab2Button);
                tabLayout.addView(tab3Button);
                mainLayout.addView(tabLayout);
                
                // Tab 1: Home
                tab1Layout = new LinearLayout(this);
                tab1Layout.setOrientation(LinearLayout.VERTICAL);
                createTab1Content();
                mainLayout.addView(tab1Layout);
                
                // Tab 2: Sort Trips (Uncategorized)
                tab2Layout = new LinearLayout(this);
                tab2Layout.setOrientation(LinearLayout.VERTICAL);
                createTab2Content();
                mainLayout.addView(tab2Layout);
                
                // Tab 3: Filed Trips (Categorized)
                tab3Layout = new LinearLayout(this);
                tab3Layout.setOrientation(LinearLayout.VERTICAL);
                createTab3Content();
                mainLayout.addView(tab3Layout);
                
                // Initially show tab 1
                switchToTab(1);
                
                setContentView(mainLayout);
            }

            private void createTab1Content() {
                // Status text
                statusText = new TextView(this);
                statusText.setText("Ready to track");
                statusText.setTextSize(16);
                statusText.setPadding(0, 0, 0, 10);
                tab1Layout.addView(statusText);
                
                // Location text
                locationText = new TextView(this);
                locationText.setText("Location: Not available");
                locationText.setTextSize(14);
                locationText.setPadding(0, 0, 0, 10);
                tab1Layout.addView(locationText);
                
                // Speed text
                speedText = new TextView(this);
                speedText.setText("Speed: 0.0 mph");
                speedText.setTextSize(14);
                speedText.setPadding(0, 0, 0, 10);
                tab1Layout.addView(speedText);
                
                // Distance text
                distanceText = new TextView(this);
                distanceText.setText("Distance: 0.0 miles");
                distanceText.setTextSize(14);
                distanceText.setPadding(0, 0, 0, 20);
                tab1Layout.addView(distanceText);
                
                // Auto Detection toggle
                autoToggle = new Button(this);
                autoToggle.setText("Auto Detection: OFF");
                autoToggle.setOnClickListener(v -> toggleAutoDetection());
                tab1Layout.addView(autoToggle);
                
                // Manual Trip Controls label
                TextView manualLabel = new TextView(this);
                manualLabel.setText("Manual Trip Controls");
                manualLabel.setTextSize(14);
                manualLabel.setPadding(0, 20, 0, 10);
                tab1Layout.addView(manualLabel);
                
                // Manual control buttons
                LinearLayout manualLayout = new LinearLayout(this);
                manualLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                startButton = new Button(this);
                startButton.setText("START");
                startButton.setOnClickListener(v -> startTrip());
                
                stopButton = new Button(this);
                stopButton.setText("STOP");
                stopButton.setOnClickListener(v -> stopTrip());
                
                LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
                startButton.setLayoutParams(buttonParams);
                stopButton.setLayoutParams(buttonParams);
                
                manualLayout.addView(startButton);
                manualLayout.addView(stopButton);
                tab1Layout.addView(manualLayout);
                
                // Statistics
                statsText = new TextView(this);
                statsText.setText("Loading statistics...");
                statsText.setTextSize(14);
                statsText.setPadding(0, 20, 0, 10);
                tab1Layout.addView(statsText);
                
                // Recent Trips section
                TextView recentTripsHeader = new TextView(this);
                recentTripsHeader.setText("📋 Recent Trips");
                recentTripsHeader.setTextSize(16);
                recentTripsHeader.setPadding(0, 20, 0, 10);
                tab1Layout.addView(recentTripsHeader);
                
                recentTripsScrollView = new ScrollView(this);
                recentTripsScrollView.setLayoutParams(new LinearLayout.LayoutParams(
                    LinearLayout.LayoutParams.MATCH_PARENT, 400));
                
                recentTripsLayout = new LinearLayout(this);
                recentTripsLayout.setOrientation(LinearLayout.VERTICAL);
                recentTripsScrollView.addView(recentTripsLayout);
                tab1Layout.addView(recentTripsScrollView);
            }

            private void createTab2Content() {
                TextView tab2Header = new TextView(this);
                tab2Header.setText("Sort Trips - Swipe to Classify");
                tab2Header.setTextSize(18);
                tab2Header.setPadding(0, 0, 0, 20);
                tab2Layout.addView(tab2Header);
                
                TextView instructionText = new TextView(this);
                instructionText.setText("Swipe left for Business, right for Personal");
                instructionText.setTextSize(14);
                instructionText.setPadding(0, 0, 0, 20);
                tab2Layout.addView(instructionText);
                
                // Buttons for Tab 2
                LinearLayout tab2ButtonLayout = new LinearLayout(this);
                tab2ButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                refreshButton = new Button(this);
                refreshButton.setText("REFRESH");
                refreshButton.setOnClickListener(v -> updateTripsContent());
                
                mergeButton = new Button(this);
                mergeButton.setText("MERGE");
                mergeButton.setOnClickListener(v -> toggleMergeMode());
                
                exportButton = new Button(this);
                exportButton.setText("EXPORT");
                exportButton.setOnClickListener(v -> showExportDialog());
                
                // Set equal weights for uniform sizing
                LinearLayout.LayoutParams buttonParams = new LinearLayout.LayoutParams(0, 50, 1f);
                refreshButton.setLayoutParams(buttonParams);
                mergeButton.setLayoutParams(buttonParams);
                exportButton.setLayoutParams(buttonParams);
                
                tab2ButtonLayout.addView(refreshButton);
                tab2ButtonLayout.addView(mergeButton);
                tab2ButtonLayout.addView(exportButton);
                tab2Layout.addView(tab2ButtonLayout);
                
                // Trips content area
                ScrollView tripsScrollView = new ScrollView(this);
                LinearLayout tripsContent = new LinearLayout(this);
                tripsContent.setOrientation(LinearLayout.VERTICAL);
                tripsScrollView.addView(tripsContent);
                tab2Layout.addView(tripsScrollView);
            }

            private void createTab3Content() {
                TextView tab3Header = new TextView(this);
                tab3Header.setText("Filed Trips - Categorized");
                tab3Header.setTextSize(18);
                tab3Header.setPadding(0, 0, 0, 20);
                tab3Layout.addView(tab3Header);
                
                // Category filter buttons
                LinearLayout filterLayout = new LinearLayout(this);
                filterLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                Button allButton = new Button(this);
                allButton.setText("All");
                allButton.setOnClickListener(v -> filterCategorizedTrips("All"));
                
                Button businessButton = new Button(this);
                businessButton.setText("Business");
                businessButton.setOnClickListener(v -> filterCategorizedTrips("Business"));
                
                Button personalButton = new Button(this);
                personalButton.setText("Personal");
                personalButton.setOnClickListener(v -> filterCategorizedTrips("Personal"));
                
                Button medicalButton = new Button(this);
                medicalButton.setText("Medical");
                medicalButton.setOnClickListener(v -> filterCategorizedTrips("Medical"));
                
                Button charityButton = new Button(this);
                charityButton.setText("Charity");
                charityButton.setOnClickListener(v -> filterCategorizedTrips("Charity"));
                
                // Set equal weights for uniform sizing
                LinearLayout.LayoutParams filterParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
                allButton.setLayoutParams(filterParams);
                businessButton.setLayoutParams(filterParams);
                personalButton.setLayoutParams(filterParams);
                medicalButton.setLayoutParams(filterParams);
                charityButton.setLayoutParams(filterParams);
                
                filterLayout.addView(allButton);
                filterLayout.addView(businessButton);
                filterLayout.addView(personalButton);
                filterLayout.addView(medicalButton);
                filterLayout.addView(charityButton);
                tab3Layout.addView(filterLayout);
                
                // Categorized trips content area
                ScrollView categorizedScrollView = new ScrollView(this);
                LinearLayout categorizedContent = new LinearLayout(this);
                categorizedContent.setOrientation(LinearLayout.VERTICAL);
                categorizedScrollView.addView(categorizedContent);
                tab3Layout.addView(categorizedScrollView);
            }

            private void switchToTab(int tabNumber) {
                currentTab = tabNumber;
                
                // Update tab button colors
                tab1Button.setBackgroundColor(tabNumber == 1 ? 0xFF667EEA : 0xFF9CA3AF);
                tab2Button.setBackgroundColor(tabNumber == 2 ? 0xFF667EEA : 0xFF9CA3AF);
                tab3Button.setBackgroundColor(tabNumber == 3 ? 0xFF667EEA : 0xFF9CA3AF);
                
                // Show/hide tab content
                tab1Layout.setVisibility(tabNumber == 1 ? View.VISIBLE : View.GONE);
                tab2Layout.setVisibility(tabNumber == 2 ? View.VISIBLE : View.GONE);
                tab3Layout.setVisibility(tabNumber == 3 ? View.VISIBLE : View.GONE);
                
                // Update content based on tab
                if (tabNumber == 2) {
                    updateTripsContent();
                } else if (tabNumber == 3) {
                    filterCategorizedTrips("All");
                }
            }

            private void updateTripsContent() {
                // Implementation for updating trips content in tab 2
                Log.d(TAG, "Updating trips content for tab 2");
            }

            private void filterCategorizedTrips(String category) {
                // Implementation for filtering categorized trips in tab 3
                Log.d(TAG, "Filtering categorized trips: " + category);
            }

            private void toggleMergeMode() {
                isMergeMode = !isMergeMode;
                mergeButton.setText(isMergeMode ? "CANCEL" : "MERGE");
                
                if (isMergeMode) {
                    // Show checkboxes for merge selection
                    showMergeCheckboxes();
                } else {
                    // Hide checkboxes and reset
                    hideMergeCheckboxes();
                }
            }

            private void showMergeCheckboxes() {
                // Implementation for showing merge checkboxes
                Log.d(TAG, "Showing merge checkboxes");
            }

            private void hideMergeCheckboxes() {
                // Implementation for hiding merge checkboxes
                Log.d(TAG, "Hiding merge checkboxes");
            }

            private void toggleAutoDetection() {
                isAutoDetectionEnabled = !isAutoDetectionEnabled;
                autoToggle.setText("Auto Detection: " + (isAutoDetectionEnabled ? "ON" : "OFF"));
                
                if (isAutoDetectionEnabled) {
                    startBlinkingAnimation();
                    gpsService.startAutoDetection();
                    Toast.makeText(this, "✅ Auto Detection enabled", Toast.LENGTH_SHORT).show();
                } else {
                    stopBlinkingAnimation();
                    gpsService.stopAutoDetection();
                    Toast.makeText(this, "❌ Auto Detection disabled", Toast.LENGTH_SHORT).show();
                }
                
                updateUI();
            }

            private void startBlinkingAnimation() {
                if (isBlinking) return;
                isBlinking = true;
                
                blinkRunnable = new Runnable() {
                    boolean showBright = true;
                    
                    @Override
                    public void run() {
                        if (isAutoDetectionEnabled && isBlinking) {
                            if (showBright) {
                                autoToggle.setText("🔆🚘🔆 Auto Detection: ON");
                            } else {
                                autoToggle.setText("🚘 Auto Detection: ON");
                            }
                            showBright = !showBright;
                            blinkHandler.postDelayed(this, 800);
                        }
                    }
                };
                blinkHandler.post(blinkRunnable);
            }

            private void stopBlinkingAnimation() {
                isBlinking = false;
                if (blinkRunnable != null) {
                    blinkHandler.removeCallbacks(blinkRunnable);
                }
                autoToggle.setText("Auto Detection: OFF");
            }

            private void startTrip() {
                if (currentTrip != null) {
                    Toast.makeText(this, "⚠️ Trip already in progress", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                if (lastKnownLocation == null) {
                    Toast.makeText(this, "❌ GPS location not available", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                currentTrip = new Trip();
                currentTrip.startTime = System.currentTimeMillis();
                currentTrip.startLatitude = lastKnownLocation.getLatitude();
                currentTrip.startLongitude = lastKnownLocation.getLongitude();
                currentTrip.isAutoDetected = false;
                
                // Reset distance counter
                currentDistanceInMiles = 0.0f;
                
                isTracking = true;
                updateUI();
                
                Toast.makeText(this, "🚗 Trip started manually", Toast.LENGTH_SHORT).show();
                Log.d(TAG, "Manual trip started");
            }

            private void stopTrip() {
                if (currentTrip == null) {
                    Toast.makeText(this, "⚠️ No trip in progress", Toast.LENGTH_SHORT).show();
                    return;
                }
                
                if (lastKnownLocation != null) {
                    currentTrip.endLatitude = lastKnownLocation.getLatitude();
                    currentTrip.endLongitude = lastKnownLocation.getLongitude();
                }
                
                currentTrip.endTime = System.currentTimeMillis();
                currentTrip.distanceInMiles = currentDistanceInMiles;
                
                // Save trip
                tripStorage.saveTrip(currentTrip);
                
                Toast.makeText(this, "🏁 Trip completed: " + String.format("%.1f", currentDistanceInMiles) + " miles", Toast.LENGTH_SHORT).show();
                Log.d(TAG, "Manual trip completed: " + currentDistanceInMiles + " miles");
                
                currentTrip = null;
                isTracking = false;
                updateUI();
                updateStats();
                updateRecentTrips();
            }

            private void checkPermissions() {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, PERMISSION_REQUEST_CODE);
                } else {
                    startLocationUpdates();
                }
            }

            private void startLocationUpdates() {
                if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
                    return;
                }
                
                locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, LOCATION_UPDATE_INTERVAL, 0, this);
                Log.d(TAG, "Location updates started");
            }

            @Override
            public void onLocationChanged(Location location) {
                lastKnownLocation = location;
                lastLocationUpdateTime = System.currentTimeMillis();
                
                // Calculate speed in mph
                float speedMph = location.getSpeed() * 2.237f;
                
                // Update distance if trip is active
                if (isTracking && currentTrip != null) {
                    updateTripDistance(location);
                }
                
                // Update UI
                updateLocationUI(location, speedMph);
                
                // Process auto detection
                if (isAutoDetectionEnabled) {
                    gpsService.processAutoDetection(speedMph, location.getLatitude(), location.getLongitude(), System.currentTimeMillis());
                }
            }

            private void updateTripDistance(Location newLocation) {
                if (currentTrip != null && currentTrip.startLatitude != 0 && currentTrip.startLongitude != 0) {
                    // Calculate distance from previous location
                    double distance = calculateDistance(
                        currentTrip.startLatitude, currentTrip.startLongitude,
                        newLocation.getLatitude(), newLocation.getLongitude()
                    );
                    currentDistanceInMiles += distance;
                    
                    // Update distance display
                    distanceText.setText("Distance: " + String.format("%.1f", currentDistanceInMiles) + " miles");
                }
            }

            private double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
                final double EARTH_RADIUS_MILES = 3958.756;
                
                double lat1Rad = Math.toRadians(lat1);
                double lat2Rad = Math.toRadians(lat2);
                double deltaLatRad = Math.toRadians(lat2 - lat1);
                double deltaLonRad = Math.toRadians(lon2 - lon1);
                
                double a = Math.sin(deltaLatRad / 2) * Math.sin(deltaLatRad / 2) +
                          Math.cos(lat1Rad) * Math.cos(lat2Rad) *
                          Math.sin(deltaLonRad / 2) * Math.sin(deltaLonRad / 2);
                
                double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
                
                return EARTH_RADIUS_MILES * c;
            }

            private void updateLocationUI(Location location, float speedMph) {
                locationText.setText("Location: " + String.format("%.6f", location.getLatitude()) + ", " + String.format("%.6f", location.getLongitude()));
                speedText.setText("Speed: " + String.format("%.1f", speedMph) + " mph");
            }

            private void updateUI() {
                if (isTracking) {
                    statusText.setText("🚗 Trip in progress");
                    startButton.setEnabled(false);
                    stopButton.setEnabled(true);
                } else {
                    statusText.setText("Ready to track");
                    startButton.setEnabled(true);
                    stopButton.setEnabled(false);
                }
            }

            private void updateStats() {
                List<Trip> allTrips = tripStorage.getAllTrips();
                double totalMiles = 0;
                double businessMiles = 0;
                double personalMiles = 0;
                double medicalMiles = 0;
                double charityMiles = 0;
                
                for (Trip trip : allTrips) {
                    totalMiles += trip.distanceInMiles;
                    
                    switch (trip.category) {
                        case "Business":
                            businessMiles += trip.distanceInMiles;
                            break;
                        case "Personal":
                            personalMiles += trip.distanceInMiles;
                            break;
                        case "Medical":
                            medicalMiles += trip.distanceInMiles;
                            break;
                        case "Charity":
                            charityMiles += trip.distanceInMiles;
                            break;
                    }
                }
                
                // Calculate tax deductions
                double businessDeduction = businessMiles * businessRate;
                double medicalDeduction = medicalMiles * medicalRate;
                double charityDeduction = charityMiles * charityRate;
                double totalDeduction = businessDeduction + medicalDeduction + charityDeduction;
                
                statsText.setText("Statistics:\n" +
                    "• Total Trips: " + allTrips.size() + "\n" +
                    "• Total Miles: " + String.format("%.1f", totalMiles) + "\n" +
                    "• Business Miles: " + String.format("%.1f", businessMiles) + " ($" + String.format("%.2f", businessDeduction) + ")\n" +
                    "• Personal Miles: " + String.format("%.1f", personalMiles) + "\n" +
                    "• Medical Miles: " + String.format("%.1f", medicalMiles) + " ($" + String.format("%.2f", medicalDeduction) + ")\n" +
                    "• Charity Miles: " + String.format("%.1f", charityMiles) + " ($" + String.format("%.2f", charityDeduction) + ")\n" +
                    "• Total Tax Deduction: $" + String.format("%.2f", totalDeduction) + "\n" +
                    "• Auto Detection: " + (isAutoDetectionEnabled ? "ON" : "OFF"));
            }

            private void updateRecentTrips() {
                recentTripsLayout.removeAllViews();
                
                List<Trip> allTrips = tripStorage.getAllTrips();
                if (allTrips.isEmpty()) {
                    TextView noTripsText = new TextView(this);
                    noTripsText.setText("No trips recorded yet");
                    noTripsText.setTextSize(14);
                    noTripsText.setPadding(10, 10, 10, 10);
                    recentTripsLayout.addView(noTripsText);
                    return;
                }
                
                // Sort by newest first and show up to 3 recent trips
                allTrips.sort((a, b) -> Long.compare(b.startTime, a.startTime));
                int maxTrips = Math.min(3, allTrips.size());
                
                for (int i = 0; i < maxTrips; i++) {
                    Trip trip = allTrips.get(i);
                    TextView tripText = new TextView(this);
                    
                    String detectionType = trip.isAutoDetected ? "🤖 Auto" : "✋ Manual";
                    String categoryText = trip.category != null ? trip.category : "Uncategorized";
                    
                    tripText.setText(detectionType + " • " + String.format("%.1f", trip.distanceInMiles) + " mi • " + categoryText);
                    tripText.setTextSize(12);
                    tripText.setPadding(10, 5, 10, 5);
                    recentTripsLayout.addView(tripText);
                }
            }

            private void loadSettings() {
                businessRate = Double.parseDouble(settings.getString("business_rate", "0.70"));
                medicalRate = Double.parseDouble(settings.getString("medical_rate", "0.21"));
                charityRate = Double.parseDouble(settings.getString("charity_rate", "0.14"));
            }

            private void saveSettings() {
                SharedPreferences.Editor editor = settings.edit();
                editor.putString("business_rate", String.valueOf(businessRate));
                editor.putString("medical_rate", String.valueOf(medicalRate));
                editor.putString("charity_rate", String.valueOf(charityRate));
                editor.apply();
            }

            private void showExportDialog() {
                AlertDialog.Builder builder = new AlertDialog.Builder(this);
                builder.setTitle("Export Trip Data");
                
                LinearLayout layout = new LinearLayout(this);
                layout.setOrientation(LinearLayout.VERTICAL);
                layout.setPadding(50, 30, 50, 30);
                
                // Category selector
                TextView categoryLabel = new TextView(this);
                categoryLabel.setText("Select Category:");
                categoryLabel.setPadding(0, 0, 0, 10);
                layout.addView(categoryLabel);
                
                Spinner categorySpinner = new Spinner(this);
                String[] categories = {"All Categories", "Business", "Personal", "Medical", "Charity"};
                ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, categories);
                categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                categorySpinner.setAdapter(categoryAdapter);
                categorySpinner.setPadding(20, 10, 20, 20);
                layout.addView(categorySpinner);
                
                // Format selector
                TextView formatLabel = new TextView(this);
                formatLabel.setText("Select Format:");
                formatLabel.setPadding(0, 20, 0, 10);
                layout.addView(formatLabel);
                
                Spinner formatSpinner = new Spinner(this);
                String[] formatOptions = {"CSV Spreadsheet (.csv)", "Text File (.txt)", "PDF Report (.pdf)"};
                ArrayAdapter<String> formatAdapter = new ArrayAdapter<>(this, android.R.layout.simple_spinner_item, formatOptions);
                formatAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                formatSpinner.setAdapter(formatAdapter);
                formatSpinner.setPadding(20, 10, 20, 20);
                layout.addView(formatSpinner);
                
                // Date range selection
                TextView dateLabel = new TextView(this);
                dateLabel.setText("Select Date Range:");
                dateLabel.setPadding(0, 20, 0, 10);
                layout.addView(dateLabel);
                
                Button startDateButton = new Button(this);
                startDateButton.setText("📅 Start Date");
                layout.addView(startDateButton);
                
                Button endDateButton = new Button(this);
                endDateButton.setText("📅 End Date");
                layout.addView(endDateButton);
                
                // Export options
                TextView exportLabel = new TextView(this);
                exportLabel.setText("Export Options:");
                exportLabel.setPadding(0, 20, 0, 10);
                layout.addView(exportLabel);
                
                LinearLayout exportButtonLayout = new LinearLayout(this);
                exportButtonLayout.setOrientation(LinearLayout.HORIZONTAL);
                
                Button emailButton = new Button(this);
                emailButton.setText("📧 Email");
                
                Button cloudButton = new Button(this);
                cloudButton.setText("☁️ Cloud");
                
                LinearLayout.LayoutParams exportButtonParams = new LinearLayout.LayoutParams(0, LinearLayout.LayoutParams.WRAP_CONTENT, 1f);
                emailButton.setLayoutParams(exportButtonParams);
                cloudButton.setLayoutParams(exportButtonParams);
                
                exportButtonLayout.addView(emailButton);
                exportButtonLayout.addView(cloudButton);
                layout.addView(exportButtonLayout);
                
                builder.setView(layout);
                
                // Date picker state
                final Calendar startCal = Calendar.getInstance();
                final Calendar endCal = Calendar.getInstance();
                final boolean[] startDateSet = {false};
                final boolean[] endDateSet = {false};
                
                // Start date picker click handler
                startDateButton.setOnClickListener(v -> {
                    new DatePickerDialog(this, (view, year, month, dayOfMonth) -> {
                        startCal.set(year, month, dayOfMonth);
                        startDateButton.setText("📅 Start: " + (month + 1) + "/" + dayOfMonth + "/" + year);
                        startDateSet[0] = true;
                    }, startCal.get(Calendar.YEAR), startCal.get(Calendar.MONTH), startCal.get(Calendar.DAY_OF_MONTH)).show();
                });
                
                // End date picker click handler
                endDateButton.setOnClickListener(v -> {
                    new DatePickerDialog(this, (view, year, month, dayOfMonth) -> {
                        endCal.set(year, month, dayOfMonth);
                        endDateButton.setText("📅 End: " + (month + 1) + "/" + dayOfMonth + "/" + year);
                        endDateSet[0] = true;
                    }, endCal.get(Calendar.YEAR), endCal.get(Calendar.MONTH), endCal.get(Calendar.DAY_OF_MONTH)).show();
                });
                
                // Export handlers
                emailButton.setOnClickListener(v -> {
                    if (!startDateSet[0] || !endDateSet[0]) {
                        Toast.makeText(this, "❌ Please select both start and end dates", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    String selectedCategory = categorySpinner.getSelectedItem().toString();
                    int formatIndex = formatSpinner.getSelectedItemPosition(); // 0=CSV, 1=TXT, 2=PDF
                    exportAndEmail(startCal.getTime(), endCal.getTime(), selectedCategory, formatIndex);
                });
                
                cloudButton.setOnClickListener(v -> {
                    if (!startDateSet[0] || !endDateSet[0]) {
                        Toast.makeText(this, "❌ Please select both start and end dates", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    String selectedCategory = categorySpinner.getSelectedItem().toString();
                    int formatIndex = formatSpinner.getSelectedItemPosition(); // 0=CSV, 1=TXT, 2=PDF
                    exportToCloud(startCal.getTime(), endCal.getTime(), selectedCategory, formatIndex);
                });
                
                builder.setNegativeButton("Cancel", null);
                builder.create().show();
            }
            
            private void exportAndEmail(Date startDate, Date endDate, String category, int formatIndex) {
                try {
                    List<Trip> tripsInRange = getTripsInDateRange(startDate, endDate, category);
                    if (tripsInRange.isEmpty()) {
                        String categoryText = category.equals("All Categories") ? "selected date range" : category + " trips in selected date range";
                        Toast.makeText(this, "❌ No " + categoryText + " found", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    String exportContent;
                    String fileExtension;
                    String mimeType;
                    boolean isBinaryFile = false;
                    
                    switch (formatIndex) {
                        case 0: // CSV
                            exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                            fileExtension = ".csv";
                            mimeType = "text/csv";
                            break;
                        case 1: // TXT
                            exportContent = generateTXT(tripsInRange, startDate, endDate, category);
                            fileExtension = ".txt";
                            mimeType = "text/plain";
                            break;
                        case 2: // PDF
                            exportContent = generatePDF(tripsInRange, startDate, endDate, category);
                            fileExtension = ".pdf";
                            mimeType = "application/pdf";
                            isBinaryFile = true;
                            break;
                        default:
                            exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                            fileExtension = ".csv";
                            mimeType = "text/csv";
                            break;
                    }
                    
                    // Create temporary file
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                    String fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                    if (!category.equals("All Categories")) {
                        fileName += "_" + category.replace(" ", "_");
                    }
                    fileName += fileExtension;
                    
                    try {
                        // Create file in external cache directory
                        File exportFile = new File(getExternalCacheDir(), fileName);
                        
                        if (isBinaryFile) {
                            // For PDF files, write binary data
                            byte[] pdfData = exportContent.getBytes("ISO-8859-1");
                            FileOutputStream fos = new FileOutputStream(exportFile);
                            fos.write(pdfData);
                            fos.close();
                        } else {
                            // For text files (CSV, TXT), write as text
                            FileWriter writer = new FileWriter(exportFile);
                            writer.write(exportContent);
                            writer.close();
                        }
                        
                        // Create URI for the file
                        Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                        
                        String categoryFilter = category.equals("All Categories") ? "" : " (" + category + ")";
                        
                        Intent emailIntent = new Intent(Intent.ACTION_SEND);
                        emailIntent.setType("message/rfc822"); // Force email apps instead of text apps
                        emailIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export" + categoryFilter + " " + 
                            new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " +
                            new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate));
                        String formatDescription = "";
                        String openingInfo = "";
                        switch (formatIndex) {
                            case 0: // CSV
                                formatDescription = "CSV Spreadsheet";
                                openingInfo = "This file can be opened in Excel, Google Sheets, or any spreadsheet application.";
                                break;
                            case 1: // TXT
                                formatDescription = "Text Document";
                                openingInfo = "This file can be opened in any text editor or word processor.";
                                break;
                            case 2: // PDF
                                formatDescription = "PDF Report";
                                openingInfo = "This file can be opened in any PDF reader, printed, or shared professionally.";
                                break;
                            default:
                                formatDescription = "CSV Spreadsheet";
                                openingInfo = "This file can be opened in Excel, Google Sheets, or any spreadsheet application.";
                                break;
                        }
                        
                        emailIntent.putExtra(Intent.EXTRA_TEXT, "Please find your MileTracker Pro trip data attached as " + fileName + ".\n\n" +
                            "Export Summary:\n" +
                            "Date Range: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate) + "\n" +
                            "Category: " + category + "\n" +
                            "Total Trips: " + tripsInRange.size() + "\n" +
                            "File Format: " + formatDescription + "\n\n" +
                            openingInfo + "\n\n" +
                            "Generated by MileTracker Pro");
                        emailIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                        emailIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                        
                        // Try email-specific apps first, fallback to general sharing
                        try {
                            emailIntent.setPackage("com.google.android.gm"); // Try Gmail first
                            if (emailIntent.resolveActivity(getPackageManager()) != null) {
                                startActivity(emailIntent);
                                Toast.makeText(this, "✅ Opening Gmail with " + tripsInRange.size() + " trips attached as " + fileName, Toast.LENGTH_LONG).show();
                            } else {
                                // Try Outlook
                                emailIntent.setPackage("com.microsoft.office.outlook");
                                if (emailIntent.resolveActivity(getPackageManager()) != null) {
                                    startActivity(emailIntent);
                                    Toast.makeText(this, "✅ Opening Outlook with " + tripsInRange.size() + " trips attached as " + fileName, Toast.LENGTH_LONG).show();
                                } else {
                                    // Fallback to any email app
                                    emailIntent.setPackage(null);
                                    emailIntent.setType("message/rfc822");
                                    if (emailIntent.resolveActivity(getPackageManager()) != null) {
                                        startActivity(Intent.createChooser(emailIntent, "Send via email..."));
                                        Toast.makeText(this, "✅ Email created with " + tripsInRange.size() + " trips attached as " + fileName, Toast.LENGTH_LONG).show();
                                    } else {
                                        Toast.makeText(this, "❌ No email app available", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            }
                        } catch (Exception e) {
                            Log.e(TAG, "Error launching email: " + e.getMessage(), e);
                            Toast.makeText(this, "❌ Failed to open email app", Toast.LENGTH_SHORT).show();
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Error creating export file: " + e.getMessage(), e);
                        Toast.makeText(this, "❌ Failed to create export file: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error exporting to email: " + e.getMessage(), e);
                    Toast.makeText(this, "❌ Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                }
            }
            
            private void exportToCloud(Date startDate, Date endDate, String category, int formatIndex) {
                try {
                    List<Trip> tripsInRange = getTripsInDateRange(startDate, endDate, category);
                    if (tripsInRange.isEmpty()) {
                        String categoryText = category.equals("All Categories") ? "selected date range" : category + " trips in selected date range";
                        Toast.makeText(this, "❌ No " + categoryText + " found", Toast.LENGTH_SHORT).show();
                        return;
                    }
                    
                    String exportContent;
                    String fileExtension;
                    String mimeType;
                    boolean isBinaryFile = false;
                    
                    switch (formatIndex) {
                        case 0: // CSV
                            exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                            fileExtension = ".csv";
                            mimeType = "text/csv";
                            break;
                        case 1: // TXT
                            exportContent = generateTXT(tripsInRange, startDate, endDate, category);
                            fileExtension = ".txt";
                            mimeType = "text/plain";
                            break;
                        case 2: // PDF
                            exportContent = generatePDF(tripsInRange, startDate, endDate, category);
                            fileExtension = ".pdf";
                            mimeType = "application/pdf";
                            isBinaryFile = true;
                            break;
                        default:
                            exportContent = generateCSV(tripsInRange, startDate, endDate, category);
                            fileExtension = ".csv";
                            mimeType = "text/csv";
                            break;
                    }
                    
                    // Create temporary file
                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd", Locale.getDefault());
                    String fileName = "MileTracker_Export_" + dateFormat.format(startDate) + "_to_" + dateFormat.format(endDate);
                    if (!category.equals("All Categories")) {
                        fileName += "_" + category.replace(" ", "_");
                    }
                    fileName += fileExtension;
                    
                    try {
                        // Create file in external cache directory
                        File exportFile = new File(getExternalCacheDir(), fileName);
                        
                        if (isBinaryFile) {
                            // For PDF files, write binary data
                            byte[] pdfData = exportContent.getBytes("ISO-8859-1");
                            FileOutputStream fos = new FileOutputStream(exportFile);
                            fos.write(pdfData);
                            fos.close();
                        } else {
                            // For text files (CSV, TXT), write as text
                            FileWriter writer = new FileWriter(exportFile);
                            writer.write(exportContent);
                            writer.close();
                        }
                        
                        // Create URI for the file
                        Uri fileUri = FileProvider.getUriForFile(this, getPackageName() + ".fileprovider", exportFile);
                        
                        String categoryFilter = category.equals("All Categories") ? "" : " (" + category + ")";
                        
                        Intent shareIntent = new Intent(Intent.ACTION_SEND);
                        shareIntent.setType(mimeType);
                        shareIntent.putExtra(Intent.EXTRA_SUBJECT, "MileTracker Pro - Trip Export" + categoryFilter);
                        shareIntent.putExtra(Intent.EXTRA_TEXT, "MileTracker Pro trip data export file attached.\n\n" +
                            "File: " + fileName + "\n" +
                            "Date Range: " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(startDate) + " to " + new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault()).format(endDate) + "\n" +
                            "Category: " + category + "\n" +
                            "Total Trips: " + tripsInRange.size());
                        shareIntent.putExtra(Intent.EXTRA_STREAM, fileUri);
                        shareIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
                    
                        if (shareIntent.resolveActivity(getPackageManager()) != null) {
                            startActivity(Intent.createChooser(shareIntent, "Share to cloud storage..."));
                            String formatName = "";
                            switch (formatIndex) {
                                case 0: formatName = "CSV"; break;
                                case 1: formatName = "TXT"; break;
                                case 2: formatName = "PDF"; break;
                                default: formatName = "CSV"; break;
                            }
                            Toast.makeText(this, "✅ Sharing " + tripsInRange.size() + " trips (" + formatName + ") to cloud", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(this, "❌ No sharing apps available", Toast.LENGTH_SHORT).show();
                        }
                    } catch (IOException e) {
                        Log.e(TAG, "Error creating export file: " + e.getMessage(), e);
                        Toast.makeText(this, "❌ Failed to create export file: " + e.getMessage(), Toast.LENGTH_LONG).show();
                    }
                } catch (Exception e) {
                    Log.e(TAG, "Error exporting to cloud: " + e.getMessage(), e);
                    Toast.makeText(this, "❌ Export failed: " + e.getMessage(), Toast.LENGTH_LONG).show();
                }
            }
            
            private List<Trip> getTripsInDateRange(Date startDate, Date endDate, String category) {
                List<Trip> allTrips = tripStorage.getAllTrips();
                List<Trip> filteredTrips = new ArrayList<>();
                
                for (Trip trip : allTrips) {
                    Date tripDate = new Date(trip.startTime);
                    if (tripDate.compareTo(startDate) >= 0 && tripDate.compareTo(endDate) <= 0) {
                        if (category.equals("All Categories") || category.equals(trip.category)) {
                            filteredTrips.add(trip);
                        }
                    }
                }
                
                return filteredTrips;
            }
            
            private String generateCSV(List<Trip> trips, Date startDate, Date endDate, String category) {
                StringBuilder csv = new StringBuilder();
                csv.append("Date,Start Time,End Time,Duration,Distance (mi),Category,Type,Start Location,End Location,Notes\n");
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                
                for (Trip trip : trips) {
                    Date startTime = new Date(trip.startTime);
                    Date endTime = new Date(trip.endTime);
                    
                    long durationMillis = trip.endTime - trip.startTime;
                    long hours = TimeUnit.MILLISECONDS.toHours(durationMillis);
                    long minutes = TimeUnit.MILLISECONDS.toMinutes(durationMillis) % 60;
                    String duration = hours + "h " + minutes + "m";
                    
                    csv.append(dateFormat.format(startTime)).append(",")
                       .append(timeFormat.format(startTime)).append(",")
                       .append(timeFormat.format(endTime)).append(",")
                       .append(duration).append(",")
                       .append(String.format("%.1f", trip.distanceInMiles)).append(",")
                       .append(trip.category != null ? trip.category : "Uncategorized").append(",")
                       .append(trip.isAutoDetected ? "Auto" : "Manual").append(",")
                       .append(trip.startAddress != null ? trip.startAddress.replace(",", ";") : "").append(",")
                       .append(trip.endAddress != null ? trip.endAddress.replace(",", ";") : "").append(",")
                       .append(trip.notes != null ? trip.notes.replace(",", ";") : "").append("\n");
                }
                
                return csv.toString();
            }
            
            private String generateTXT(List<Trip> trips, Date startDate, Date endDate, String category) {
                StringBuilder txt = new StringBuilder();
                txt.append("MILETRACKER PRO - TRIP EXPORT\n");
                txt.append("=====================================\n\n");
                
                SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                txt.append("Export Date: ").append(dateFormat.format(new Date())).append("\n");
                txt.append("Date Range: ").append(dateFormat.format(startDate)).append(" to ").append(dateFormat.format(endDate)).append("\n");
                txt.append("Category: ").append(category).append("\n");
                txt.append("Total Trips: ").append(trips.size()).append("\n\n");
                
                // Calculate totals
                double totalMiles = 0;
                double totalDeduction = 0;
                
                for (Trip trip : trips) {
                    totalMiles += trip.distanceInMiles;
                    if ("Business".equals(trip.category)) {
                        totalDeduction += trip.distanceInMiles * businessRate;
                    } else if ("Medical".equals(trip.category)) {
                        totalDeduction += trip.distanceInMiles * medicalRate;
                    } else if ("Charity".equals(trip.category)) {
                        totalDeduction += trip.distanceInMiles * charityRate;
                    }
                }
                
                txt.append("SUMMARY:\n");
                txt.append("Total Miles: ").append(String.format("%.1f", totalMiles)).append("\n");
                txt.append("Tax Deduction: $").append(String.format("%.2f", totalDeduction)).append("\n\n");
                
                txt.append("TRIP DETAILS:\n");
                txt.append("=====================================\n");
                
                SimpleDateFormat fullDateFormat = new SimpleDateFormat("MM/dd/yyyy HH:mm", Locale.getDefault());
                
                for (int i = 0; i < trips.size(); i++) {
                    Trip trip = trips.get(i);
                    txt.append("\nTrip #").append(i + 1).append(":\n");
                    txt.append("  Date: ").append(fullDateFormat.format(new Date(trip.startTime))).append("\n");
                    txt.append("  Distance: ").append(String.format("%.1f", trip.distanceInMiles)).append(" miles\n");
                    txt.append("  Category: ").append(trip.category != null ? trip.category : "Uncategorized").append("\n");
                    txt.append("  Type: ").append(trip.isAutoDetected ? "Auto-detected" : "Manual").append("\n");
                    
                    if (trip.startAddress != null) {
                        txt.append("  Start: ").append(trip.startAddress).append("\n");
                    }
                    if (trip.endAddress != null) {
                        txt.append("  End: ").append(trip.endAddress).append("\n");
                    }
                    if (trip.notes != null && !trip.notes.isEmpty()) {
                        txt.append("  Notes: ").append(trip.notes).append("\n");
                    }
                }
                
                txt.append("\n\nGenerated by MileTracker Pro\n");
                txt.append("For questions, contact support@miletrackerpro.com\n");
                
                return txt.toString();
            }
            
            private String generatePDF(List<Trip> trips, Date startDate, Date endDate, String category) {
                try {
                    ByteArrayOutputStream baos = new ByteArrayOutputStream();
                    PdfWriter writer = new PdfWriter(baos);
                    PdfDocument pdfDoc = new PdfDocument(writer);
                    Document document = new Document(pdfDoc);
                    
                    // Title
                    document.add(new Paragraph("MileTracker Pro - Trip Export")
                        .setFontSize(20)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setBold());
                    
                    // Export info
                    SimpleDateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                    document.add(new Paragraph("Export Date: " + dateFormat.format(new Date()))
                        .setFontSize(10));
                    document.add(new Paragraph("Date Range: " + dateFormat.format(startDate) + " to " + dateFormat.format(endDate))
                        .setFontSize(10));
                    document.add(new Paragraph("Category: " + category)
                        .setFontSize(10));
                    document.add(new Paragraph("Total Trips: " + trips.size())
                        .setFontSize(10));
                    
                    // Calculate totals
                    double totalMiles = 0;
                    double totalDeduction = 0;
                    
                    for (Trip trip : trips) {
                        totalMiles += trip.distanceInMiles;
                        if ("Business".equals(trip.category)) {
                            totalDeduction += trip.distanceInMiles * businessRate;
                        } else if ("Medical".equals(trip.category)) {
                            totalDeduction += trip.distanceInMiles * medicalRate;
                        } else if ("Charity".equals(trip.category)) {
                            totalDeduction += trip.distanceInMiles * charityRate;
                        }
                    }
                    
                    // Summary
                    document.add(new Paragraph("\nSUMMARY")
                        .setFontSize(14)
                        .setBold());
                    document.add(new Paragraph("Total Miles: " + String.format("%.1f", totalMiles))
                        .setFontSize(12));
                    document.add(new Paragraph("Tax Deduction: $" + String.format("%.2f", totalDeduction))
                        .setFontSize(12));
                    
                    // Trip details table
                    document.add(new Paragraph("\nTRIP DETAILS")
                        .setFontSize(14)
                        .setBold());
                    
                    Table table = new Table(new float[]{2, 2, 1, 1, 1, 1});
                    table.setWidth(UnitValue.createPercentValue(100));
                    
                    // Table headers
                    table.addHeaderCell(new Cell().add(new Paragraph("Date").setBold()));
                    table.addHeaderCell(new Cell().add(new Paragraph("Time").setBold()));
                    table.addHeaderCell(new Cell().add(new Paragraph("Miles").setBold()));
                    table.addHeaderCell(new Cell().add(new Paragraph("Category").setBold()));
                    table.addHeaderCell(new Cell().add(new Paragraph("Type").setBold()));
                    table.addHeaderCell(new Cell().add(new Paragraph("Deduction").setBold()));
                    
                    // Table rows
                    SimpleDateFormat tableDateFormat = new SimpleDateFormat("MM/dd/yyyy", Locale.getDefault());
                    SimpleDateFormat timeFormat = new SimpleDateFormat("HH:mm", Locale.getDefault());
                    
                    for (Trip trip : trips) {
                        Date startTime = new Date(trip.startTime);
                        
                        double deduction = 0;
                        if ("Business".equals(trip.category)) {
                            deduction = trip.distanceInMiles * businessRate;
                        } else if ("Medical".equals(trip.category)) {
                            deduction = trip.distanceInMiles * medicalRate;
                        } else if ("Charity".equals(trip.category)) {
                            deduction = trip.distanceInMiles * charityRate;
                        }
                        
                        table.addCell(new Cell().add(new Paragraph(tableDateFormat.format(startTime)).setFontSize(9)));
                        table.addCell(new Cell().add(new Paragraph(timeFormat.format(startTime)).setFontSize(9)));
                        table.addCell(new Cell().add(new Paragraph(String.format("%.1f", trip.distanceInMiles)).setFontSize(9)));
                        table.addCell(new Cell().add(new Paragraph(trip.category != null ? trip.category : "Uncategorized").setFontSize(9)));
                        table.addCell(new Cell().add(new Paragraph(trip.isAutoDetected ? "Auto" : "Manual").setFontSize(9)));
                        table.addCell(new Cell().add(new Paragraph(deduction > 0 ? "$" + String.format("%.2f", deduction) : "-").setFontSize(9)));
                    }
                    
                    document.add(table);
                    
                    // Footer
                    document.add(new Paragraph("\nGenerated by MileTracker Pro")
                        .setFontSize(10)
                        .setTextAlignment(TextAlignment.CENTER)
                        .setItalic());
                    
                    document.close();
                    
                    return baos.toString("ISO-8859-1");
                    
                } catch (Exception e) {
                    Log.e(TAG, "Error generating PDF: " + e.getMessage(), e);
                    return "Error generating PDF: " + e.getMessage();
                }
            }

            // Location listener methods
            @Override
            public void onProviderEnabled(String provider) {
                Log.d(TAG, "GPS provider enabled");
            }

            @Override
            public void onProviderDisabled(String provider) {
                Log.d(TAG, "GPS provider disabled");
            }

            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {
                Log.d(TAG, "GPS status changed: " + status);
            }

            @Override
            public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
                if (requestCode == PERMISSION_REQUEST_CODE) {
                    if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                        startLocationUpdates();
                    } else {
                        Toast.makeText(this, "❌ Location permission required for GPS tracking", Toast.LENGTH_LONG).show();
                    }
                }
            }

            // Inner classes for data structures
            public static class Trip {
                public long id;
                public long startTime;
                public long endTime;
                public double startLatitude;
                public double startLongitude;
                public double endLatitude;
                public double endLongitude;
                public float distanceInMiles;
                public String category;
                public String notes;
                public String startAddress;
                public String endAddress;
                public boolean isAutoDetected;
                public String deviceId;
                public String userId;
            }

            public static class TripStorage {
                private Context context;
                private SharedPreferences prefs;
                private static final String PREFS_NAME = "MileTrackerTrips";
                private static final String TRIPS_KEY = "trips";

                public TripStorage(Context context) {
                    this.context = context;
                    this.prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
                }

                public void saveTrip(Trip trip) {
                    List<Trip> trips = getAllTrips();
                    trip.id = System.currentTimeMillis();
                    trips.add(trip);
                    saveAllTrips(trips);
                    Log.d(TAG, "Trip saved: " + trip.distanceInMiles + " miles");
                }

                public List<Trip> getAllTrips() {
                    // For now, return empty list - implement actual storage later
                    return new ArrayList<>();
                }

                private void saveAllTrips(List<Trip> trips) {
                    // For now, do nothing - implement actual storage later
                    Log.d(TAG, "Saving " + trips.size() + " trips");
                }
            }

            public static class GPSService {
                private MainActivity activity;

                public GPSService(MainActivity activity) {
                    this.activity = activity;
                }

                public void initialize() {
                    Log.d(TAG, "GPS Service initialized");
                }

                public void startAutoDetection() {
                    Log.d(TAG, "Auto detection started");
                }

                public void stopAutoDetection() {
                    Log.d(TAG, "Auto detection stopped");
                }

                public void processAutoDetection(float speed, double latitude, double longitude, long timestamp) {
                    // Auto detection logic - implement based on speed thresholds
                    Log.d(TAG, "Processing auto detection: " + speed + " mph");
                }
            }
        }
        EOF

    - name: Create build.gradle (app level)
      run: |
        cat > android/app/build.gradle << 'EOF'
        apply plugin: 'com.android.application'

        android {
            compileSdkVersion 34
            defaultConfig {
                applicationId "com.miletrackerpro.app"
                minSdkVersion 24
                targetSdkVersion 34
                versionCode 49126
                versionName "4.9.126"
                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }
            
            buildTypes {
                release {
                    minifyEnabled false
                    proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
                }
            }
            
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
        }

        dependencies {
            implementation 'androidx.appcompat:appcompat:1.6.1'
            implementation 'com.google.android.material:material:1.10.0'
            implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
            implementation 'androidx.core:core:1.12.0'
            
            // iText 7 for PDF generation
            implementation 'com.itextpdf:itext7-core:7.2.5'
            
            testImplementation 'junit:junit:4.13.2'
            androidTestImplementation 'androidx.test.ext:junit:1.1.5'
            androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
        }
        EOF

    - name: Create build.gradle (project level)
      run: |
        cat > android/build.gradle << 'EOF'
        buildscript {
            ext {
                buildToolsVersion = "34.0.0"
                minSdkVersion = 24
                compileSdkVersion = 34
                targetSdkVersion = 34
            }
            dependencies {
                classpath 'com.android.tools.build:gradle:8.1.2'
            }
        }

        allprojects {
            repositories {
                google()
                mavenCentral()
                maven { url "https://www.jitpack.io" }
            }
        }
        EOF

    - name: Create settings.gradle
      run: |
        cat > android/settings.gradle << 'EOF'
        include ':app'
        EOF

    - name: Create gradle.properties
      run: |
        cat > android/gradle.properties << 'EOF'
        org.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8
        android.useAndroidX=true
        android.enableJetifier=true
        EOF

    - name: Create gradle-wrapper.properties
      run: |
        cat > android/gradle/wrapper/gradle-wrapper.properties << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.1.1-bin.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF

    - name: Create AndroidManifest.xml
      run: |
        cat > android/app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="com.miletrackerpro.app">

            <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
            <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
            <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />

            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="@string/app_name"
                android:theme="@style/AppTheme">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
                
                <provider
                    android:name="androidx.core.content.FileProvider"
                    android:authorities="${applicationId}.fileprovider"
                    android:exported="false"
                    android:grantUriPermissions="true">
                    <meta-data
                        android:name="android.support.FILE_PROVIDER_PATHS"
                        android:resource="@xml/file_paths" />
                </provider>
                
            </application>
        </manifest>
        EOF

    - name: Create resources
      run: |
        # Create strings.xml
        cat > android/app/src/main/res/values/strings.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <string name="app_name">MileTracker Pro</string>
        </resources>
        EOF

        # Create styles.xml
        cat > android/app/src/main/res/values/styles.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <style name="AppTheme" parent="Theme.AppCompat.Light.DarkActionBar">
                <item name="colorPrimary">#667eea</item>
                <item name="colorPrimaryDark">#764ba2</item>
                <item name="colorAccent">#667eea</item>
            </style>
        </resources>
        EOF

        # Create colors.xml
        cat > android/app/src/main/res/values/colors.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <resources>
            <color name="colorPrimary">#667eea</color>
            <color name="colorPrimaryDark">#764ba2</color>
            <color name="colorAccent">#667eea</color>
        </resources>
        EOF

        # Create file_paths.xml for FileProvider
        cat > android/app/src/main/res/xml/file_paths.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <paths xmlns:android="http://schemas.android.com/apk/res/android">
            <external-cache-path name="exported_files" path="." />
        </paths>
        EOF

    - name: Create app icons
      run: |
        # Create basic app icon directories
        mkdir -p android/app/src/main/res/mipmap-hdpi
        mkdir -p android/app/src/main/res/mipmap-mdpi
        mkdir -p android/app/src/main/res/mipmap-xhdpi
        mkdir -p android/app/src/main/res/mipmap-xxhdpi
        mkdir -p android/app/src/main/res/mipmap-xxxhdpi

        # Create a simple colored square as app icon (48x48 base)
        echo "Creating app icons..."
        
        # Create ic_launcher.xml as vector drawable
        cat > android/app/src/main/res/mipmap-mdpi/ic_launcher.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <vector xmlns:android="http://schemas.android.com/apk/res/android"
            android:width="48dp"
            android:height="48dp"
            android:viewportWidth="48"
            android:viewportHeight="48">
            <path
                android:fillColor="#667eea"
                android:pathData="M0,0h48v48h-48z" />
            <path
                android:fillColor="#FFFFFF"
                android:pathData="M12,12h24v24h-24z" />
        </vector>
        EOF

    - name: Make gradlew executable
      run: |
        # Download gradle wrapper
        curl -o android/gradlew https://raw.githubusercontent.com/gradle/gradle/master/gradlew
        chmod +x android/gradlew

    - name: Create gradlew.bat
      run: |
        cat > android/gradlew.bat << 'EOF'
        @rem
        @rem Copyright 2015 the original author or authors.
        @rem
        @rem Licensed under the Apache License, Version 2.0 (the "License");
        @rem you may not use this file except in compliance with the License.
        @rem You may obtain a copy of the License at
        @rem
        @rem      https://www.apache.org/licenses/LICENSE-2.0
        @rem
        @rem Unless required by applicable law or agreed to in writing, software
        @rem distributed under the License is distributed on an "AS IS" BASIS,
        @rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
        @rem See the License for the specific language governing permissions and
        @rem limitations under the License.
        @rem

        @if "%DEBUG%" == "" @echo off
        @rem ##########################################################################
        @rem
        @rem  Gradle startup script for Windows
        @rem
        @rem ##########################################################################

        @rem Set local scope for the variables with windows NT shell
        if "%OS%"=="Windows_NT" setlocal

        set DIRNAME=%~dp0
        if "%DIRNAME%" == "" set DIRNAME=.
        set APP_BASE_NAME=%~n0
        set APP_HOME=%DIRNAME%

        @rem Resolve any "." and ".." in APP_HOME to make it shorter.
        for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

        @rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
        set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

        @rem Find java.exe
        if defined JAVA_HOME goto findJavaFromJavaHome

        set JAVA_EXE=java.exe
        %JAVA_EXE% -version >NUL 2>&1
        if "%ERRORLEVEL%" == "0" goto init

        echo.
        echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
        echo.
        echo Please set the JAVA_HOME variable in your environment to match the
        echo location of your Java installation.

        goto fail

        :findJavaFromJavaHome
        set JAVA_HOME=%JAVA_HOME:"=%
        set JAVA_EXE=%JAVA_HOME%/bin/java.exe

        if exist "%JAVA_EXE%" goto init

        echo.
        echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
        echo.
        echo Please set the JAVA_HOME variable in your environment to match the
        echo location of your Java installation.

        goto fail

        :init
        @rem Get command-line arguments, handling Windows variants

        if not "%OS%" == "Windows_NT" goto win9xME_args

        :win9xME_args
        @rem Slurp the command line arguments.
        set CMD_LINE_ARGS=
        set _SKIP=2

        :win9xME_args_slurp
        if "x%~1" == "x" goto execute

        set CMD_LINE_ARGS=%*

        :execute
        @rem Setup the command line

        set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar

        @rem Execute Gradle
        "%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%

        :end
        @rem End local scope for the variables with windows NT shell
        if "%ERRORLEVEL%"=="0" goto mainEnd

        :fail
        rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
        rem the _cmd_ return code
        if not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
        exit /b 1

        :mainEnd
        if "%OS%"=="Windows_NT" endlocal

        :omega
        EOF

    - name: Generate signing key
      run: |
        mkdir -p android/app/
        keytool -genkey -v -keystore android/app/release-key.keystore -alias miletracker -keyalg RSA -keysize 2048 -validity 10000 -storepass miletracker123 -keypass miletracker123 -dname "CN=MileTracker Pro, OU=MileTracker, O=MileTracker, L=City, S=State, C=US"

    - name: Build APK
      run: |
        cd android
        ./gradlew assembleRelease

    - name: Sign APK
      run: |
        cd android
        jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 -keystore app/release-key.keystore -storepass miletracker123 -keypass miletracker123 app/build/outputs/apk/release/app-release-unsigned.apk miletracker

    - name: Align APK
      run: |
        cd android
        $ANDROID_HOME/build-tools/34.0.0/zipalign -v 4 app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/MileTracker-Pro-v4.9.126.apk

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: MileTracker-Pro-APK
        path: android/app/build/outputs/apk/release/MileTracker-Pro-v4.9.126.apk
        retention-days: 30

    - name: Create release notes
      run: |
        cat > release_notes.txt << 'EOF'
        MileTracker Pro v4.9.126 - PDF Export Feature Added
        
        🔧 NEW FEATURES:
        • PDF Export: Professional PDF reports with formatted tables and summaries
        • Three Export Formats: CSV, TXT, and PDF options for all export functions
        • Enhanced Email Integration: Format-specific descriptions and opening instructions
        • Professional PDF Layout: Organized tables, summaries, and tax calculations
        
        📊 EXPORT IMPROVEMENTS:
        • PDF reports include trip details in formatted tables
        • Tax deduction calculations displayed prominently
        • Professional layout suitable for business use
        • Binary file handling for PDF attachments
        
        🔧 TECHNICAL UPDATES:
        • iText 7 PDF library integration
        • Enhanced file handling for different formats
        • Improved export dialog with three format options
        • Better error handling for PDF generation
        
        Download and install the APK to test the new PDF export functionality.
        The app maintains all existing features while adding professional PDF reporting capabilities.
        EOF

    - name: Display build summary
      run: |
        echo "🎉 BUILD COMPLETED SUCCESSFULLY!"
        echo "Version: v4.9.126"
        echo "Features: PDF Export Added"
        echo "APK Location: android/app/build/outputs/apk/release/MileTracker-Pro-v4.9.126.apk"
        echo "File Size: $(du -h android/app/build/outputs/apk/release/MileTracker-Pro-v4.9.126.apk | cut -f1)"
        echo ""
        echo "📱 INSTALLATION INSTRUCTIONS:"
        echo "1. Download the APK from the artifacts"
        echo "2. Enable 'Unknown Sources' in Android settings"
        echo "3. Install the APK"
        echo "4. Grant location permissions when prompted"
        echo "5. Test PDF export functionality"
        echo ""
        echo "🔧 KEY CHANGES:"
        echo "• Added PDF export option to export dialog"
        echo "• Integrated iText 7 for professional PDF generation"
        echo "• Enhanced export functions with three format support"
        echo "• Professional PDF layout with tables and summaries"
        echo ""
        cat release_notes.txt
